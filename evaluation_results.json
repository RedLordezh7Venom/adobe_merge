{
  "accuracy": 3.556485355648536,
  "total": 478,
  "matches": 17,
  "mismatches": 461,
  "errors": [
    {
      "NL": "Find the average time spent on the website by users who clicked on a push notification and completed a survey.",
      "Expected": "SELECT AVG(time_spent_seconds) FROM events WHERE push_notification_clicked = true AND survey_completed = true;",
      "Actual": "SELECT AVG(CASE WHEN survey_completed = TRUE THEN time_spent ELSE NULL END) FROM users WHERE push_notification_clicked = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"users\" does not exist\nLINE 1: ...pleted = TRUE THEN time_spent ELSE NULL END) FROM users WHER...\n                                                             ^\n"
    },
    {
      "NL": "Get the count of wishlist items for each user and sort them in descending order.",
      "Expected": "SELECT fk_user_id, COUNT(*) as wishlist_count FROM wishlist GROUP BY fk_user_id ORDER BY wishlist_count DESC",
      "Actual": "SELECT COUNT(*) ,  username FROM wishlist GROUP BY username ORDER BY COUNT(*) DESC",
      "Expected_Error": null,
      "Actual_Error": "column \"username\" does not exist\nLINE 1: SELECT COUNT(*) ,  username FROM wishlist GROUP BY username ...\n                           ^\n"
    },
    {
      "NL": "Find the products in the cart that have a promotional discounted price less than $50, along with the customer's loyalty program tier level and the customer's accumulated loyalty points balance.",
      "Expected": "SELECT T1.product_display_name, T3.accumulated_loyalty_points_balance, T3.loyalty_program_tier_level FROM products AS T1 INNER JOIN cart AS T2 ON T1.unique_product_identifier = T2.fk_product_id INNER JOIN customers_loyalty_program AS T3 ON T2.fk_user_id = T3.associated_customer_reference_id WHERE T1.promotional_discounted_price < 50",
      "Actual": "SELECT p.product_name, c.loyalty_program_tier, c.loyalty_points FROM cart c JOIN product p ON c.product_id = p.product_id WHERE p.promo_discounted_price < 50",
      "Expected_Error": null,
      "Actual_Error": "relation \"product\" does not exist\nLINE 1: ...y_program_tier, c.loyalty_points FROM cart c JOIN product p ...\n                                                             ^\n"
    },
    {
      "NL": "What is the total discount amount redeemed by customers who have participated in exclusive beta testing and have a loyalty membership unique identifier greater than 1000?",
      "Expected": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = TRUE AND loyalty_membership_unique_identifier > 1000",
      "Actual": "SELECT SUM(t2.discount_amount) FROM customers AS t1 INNER JOIN beta_test_participants AS t2 ON t1.customer_id = t2.customer_id WHERE t1.loyalty_membership_id > 1000",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT SUM(t2.discount_amount) FROM customers AS t1 INNER JO...\n                                            ^\n"
    },
    {
      "NL": "Retrieve the total amount of all orders that contain products from the cart of user with ID 123 and have a shipping date after January 1, 2023.",
      "Expected": "SELECT SUM(o.total_amount) FROM orders o JOIN cart c ON o.person_customer_id = c.fk_user_id WHERE c.fk_user_id = 123 AND o.shipping_date > '2023-01-01'",
      "Actual": "SELECT SUM(o.total_amount) FROM orders o JOIN cart_items ci ON o.id = ci.order_id JOIN cart c ON ci.cart_id = c.id JOIN users u ON c.user_id = u.id WHERE u.id = 123 AND o.shipping_date > '2023-01-01'",
      "Expected_Error": null,
      "Actual_Error": "relation \"cart_items\" does not exist\nLINE 1: SELECT SUM(o.total_amount) FROM orders o JOIN cart_items ci ...\n                                                      ^\n"
    },
    {
      "NL": "What are the campaign names of the campaigns that have generated more than $1000 in revenue and have a cost per acquisition of less than $10?",
      "Expected": "SELECT campaign_name FROM campaigns WHERE revenue_generated > 1000 AND cost_per_acquisition < 10",
      "Actual": "SELECT campaign_name FROM campaigns WHERE revenue > 1000 AND cost_per_acquisition < 10",
      "Expected_Error": null,
      "Actual_Error": "column \"revenue\" does not exist\nLINE 1: SELECT campaign_name FROM campaigns WHERE revenue > 1000 AND...\n                                                  ^\n"
    },
    {
      "NL": "Show the average rating of reviews submitted by customers who are verified and have active subscriptions, and the number of helpful votes they received.",
      "Expected": "SELECT AVG(T2.submitted_review_star_rating), AVG(T2.number_of_helpful_votes_received) FROM customerinfo AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier WHERE T1.account_has_active_subscription = TRUE AND T2.verification_status_of_reviewer = TRUE",
      "Actual": "SELECT AVG(r.rating) ,  COUNT(hv.helpful) FROM reviews r JOIN customers c ON r.customer_id = c.customer_id JOIN subscriptions s ON c.customer_id = s.customer_id JOIN verification v ON c.customer_id = v.customer_id WHERE v.verified = TRUE AND s.active = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT AVG(r.rating) ,  COUNT(hv.helpful) FROM reviews r JOI...\n                                                       ^\n"
    },
    {
      "NL": "Find the product name and average review rating for products with more than 100 reviews",
      "Expected": "SELECT p.product_display_name, AVG(prar.submitted_review_star_rating) FROM products p JOIN product_reviews_and_ratings prar ON p.unique_product_identifier = prar.referenced_product_identifier GROUP BY p.product_display_name HAVING COUNT(prar.review_unique_identifier) > 100",
      "Actual": "SELECT product_name ,  AVG(review_rating) FROM reviews GROUP BY product_name HAVING COUNT(review_id)  >  100",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT product_name ,  AVG(review_rating) FROM reviews GROUP...\n                                                       ^\n"
    },
    {
      "NL": "Find the total number of orders placed by premium customers who have purchased products with an average supplier rating greater than 4 and have a total number of verified reviews greater than 1000, along with the total amount spent by these customers, the average rating given by them, and the total number of helpful votes received by their reviews.",
      "Expected": "SELECT COUNT(DISTINCT o.order_id), SUM(o.total_amount), AVG(prar.submitted_review_star_rating), SUM(prar.number_of_helpful_votes_received) FROM orders o JOIN customerinfo c ON o.person_customer_id = c.person_customer_id JOIN product_reviews_and_ratings prar ON prar.referenced_product_identifier = (SELECT p.unique_product_identifier FROM products p JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE s.average_supplier_rating > 4 AND p.total_number_of_verified_reviews > 1000) WHERE c.person_is_premium = TRUE",
      "Actual": "SELECT COUNT(*) ,  SUM(total_amount) ,  AVG(avg_rating) ,  SUM(helpful_votes) FROM orders JOIN customers ON orders.customer_id = customers.id JOIN supplier_ratings ON orders.supplier_id = supplier_ratings.id JOIN reviews ON orders.order_id = reviews.order_id WHERE customers.premium = TRUE AND avg_rating > 4 AND total_reviews > 1000",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...vg_rating) ,  SUM(helpful_votes) FROM orders JOIN customers ...\n                                                             ^\n"
    },
    {
      "NL": "List the orders with a discount applied greater than 10% in any currency.",
      "Expected": "SELECT order_id, discount_applied, total_amount, created_at FROM orders WHERE discount_applied > 0.1 * total_amount;",
      "Actual": "SELECT * FROM orders WHERE total_amount * 100 - discount_amount > 10 * total_amount",
      "Expected_Error": null,
      "Actual_Error": "column \"discount_amount\" does not exist\nLINE 1: SELECT * FROM orders WHERE total_amount * 100 - discount_amo...\n                                                        ^\n"
    },
    {
      "NL": "Find the total number of products and the total price for each cart associated with a specific user.",
      "Expected": "SELECT COUNT(*) AS total_number_of_products, SUM(total_price) AS total_price FROM cart GROUP BY fk_user_id;",
      "Actual": "SELECT COUNT(DISTINCT c.id) AS total_products, SUM(p.price * c.quantity) AS total_price FROM carts c JOIN cart_items ci ON c.id = ci.cart_id JOIN products p ON ci.product_id = p.id WHERE c.user_id = 1;",
      "Expected_Error": null,
      "Actual_Error": "relation \"carts\" does not exist\nLINE 1: ...ts, SUM(p.price * c.quantity) AS total_price FROM carts c JO...\n                                                             ^\n"
    },
    {
      "NL": "List all items in the wishlist where the expected purchase date is within the next 30 days and the priority level is 'high'.",
      "Expected": "SELECT * FROM wishlist WHERE expected_purchase_date <= CURRENT_DATE + INTERVAL '30 days' AND priority_level = 'high';",
      "Actual": "SELECT * FROM wishlist WHERE expected_purchase_date BETWEEN NOW() + INTERVAL '30 day' AND NOW() + INTERVAL '30 day' AND priority_level = 'high';",
      "Expected_Signature": "0ceceba7de1d95f435ba1f9cec372ed8",
      "Actual_Signature": "empty_result",
      "Expected_Shape": [
        1,
        21
      ],
      "Actual_Shape": [
        0,
        0
      ]
    },
    {
      "NL": "Find the total number of products supplied by each supplier, along with the average supplier rating and the number of inventories associated with each supplier, ordered by the total number of products supplied in descending order.",
      "Expected": "SELECT supplier_unique_identifier, total_number_of_products_supplied, average_supplier_rating, COUNT(inventory.id) AS inventory_count FROM suppliers LEFT JOIN inventory ON suppliers.supplier_unique_identifier = inventory.supplier_id GROUP BY supplier_unique_identifier, total_number_of_products_supplied, average_supplier_rating ORDER BY total_number_of_products_supplied DESC;",
      "Actual": "SELECT COUNT(*) AS total_products, AVG(rating) AS avg_rating, COUNT(inventory_id) AS total_inventories FROM products JOIN supplier ON products.supplier_id = supplier.id GROUP BY supplier.id ORDER BY COUNT(*) DESC",
      "Expected_Error": null,
      "Actual_Error": "relation \"supplier\" does not exist\nLINE 1: ...ntory_id) AS total_inventories FROM products JOIN supplier O...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the total time spent and the average scroll depth percentage for events where the event type is 'purchase' and the device platform is 'mobile'.",
      "Expected": "SELECT SUM(time_spent_seconds) AS total_time_spent, AVG(scroll_depth_percentage) AS average_scroll_depth FROM events WHERE event_type = 'purchase' AND device_platform = 'mobile';",
      "Actual": "SELECT SUM(T2.time_spent) AS total_time_spent, AVG(T2.scroll_depth / 100 * (SELECT max(scroll_depth) FROM events)) AS avg_scroll_depth FROM events AS T1 INNER JOIN event_details AS T2 ON T1.id = T2.event_id WHERE T1.event_type = 'purchase' AND T1.device_platform = 'mobile';",
      "Expected_Error": null,
      "Actual_Error": "relation \"event_details\" does not exist\nLINE 1: ... AS avg_scroll_depth FROM events AS T1 INNER JOIN event_deta...\n                                                             ^\n"
    },
    {
      "NL": "Find all reviews of products that have been purchased more than 5 times, with the customer's review submission date and the total number of helpful votes received.",
      "Expected": "SELECT T1.customer_review_submission_date, T1.number_of_helpful_votes_received FROM product_reviews_and_ratings AS T1 INNER JOIN transactions_and_payments AS T2 ON T1.referenced_product_identifier = T2.linked_order_reference_identifier WHERE T1.previous_product_purchases_count > 5",
      "Actual": "SELECT review_submission_date, helpful_votes FROM reviews WHERE product_id IN (SELECT product_id FROM orders GROUP BY product_id HAVING COUNT(order_id) > 5)",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT review_submission_date, helpful_votes FROM reviews WH...\n                                                          ^\n"
    },
    {
      "NL": "Find the estimated delivery date and shipping cost for orders where the event type is 'order_placed' and the shipping status is 'shipped'.",
      "Expected": "SELECT s.estimated_delivery, s.shipping_cost FROM shipping s JOIN events e ON s.fk_order_id = e.order_id WHERE e.event_type = 'order_placed' AND s.shipping_status = 'shipped';",
      "Actual": "SELECT estimated_delivery_date, shipping_cost FROM orders WHERE event_type = 'order_placed' AND shipping_status = 'shipped'",
      "Expected_Error": null,
      "Actual_Error": "column \"estimated_delivery_date\" does not exist\nLINE 1: SELECT estimated_delivery_date, shipping_cost FROM orders WH...\n               ^\n"
    },
    {
      "NL": "Analyze the total number of clicks and the average time spent by customers from the United States who visited product pages of 'Electronics' category products and view those who spent the most time on the site, including product names and their respective suppliers.",
      "Expected": "SELECT p.product_display_name, s.official_supplier_business_name, SUM(e.click_count) AS total_clicks, AVG(e.time_spent_seconds) AS average_time_spent FROM events e JOIN products p ON e.order_item_id = p.unique_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE e.location_country = 'United States' AND p.product_category_primary = 'Electronics' GROUP BY p.product_display_name, s.official_supplier_business_name ORDER BY average_time_spent DESC;",
      "Actual": "SELECT T1.product_name, T1.supplier, COUNT(T2.click_id) AS total_clicks, AVG(T2.time_spent) AS avg_time_spent, ROW_NUMBER() OVER (ORDER BY SUM(T2.time_spent) DESC) AS time_spent_rank FROM product AS T1 INNER JOIN click AS T2 ON T1.product_id = T2.product_id WHERE T1.category = 'Electronics' AND T2.country = 'United States' GROUP BY T1.product_name, T1.supplier",
      "Expected_Error": null,
      "Actual_Error": "relation \"product\" does not exist\nLINE 1: ... SUM(T2.time_spent) DESC) AS time_spent_rank FROM product AS...\n                                                             ^\n"
    },
    {
      "NL": "List all the campaigns with their corresponding campaign status, start date, end date and total revenue generated, and also list the total quantity of products in the cart for each campaign",
      "Expected": "SELECT c.campaign_name, c.campaign_status, c.start_date, c.end_date, c.revenue_generated, SUM(ct.quantity) AS total_quantity FROM campaigns c LEFT JOIN cart ct ON c.campaign_id = ct.fk_product_id GROUP BY c.campaign_name, c.campaign_status, c.start_date, c.end_date, c.revenue_generated",
      "Actual": "SELECT c.campaign_id, c.campaign_status, c.start_date, c.end_date, SUM(r.revenue) AS total_revenue, SUM(p.quantity) AS total_quantity FROM campaigns c JOIN campaign_products cp ON c.campaign_id = cp.campaign_id JOIN products p ON cp.product_id = p.product_id JOIN campaign_revenue r ON c.campaign_id = r.campaign_id GROUP BY c.campaign_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"campaign_products\" does not exist\nLINE 1: ...quantity) AS total_quantity FROM campaigns c JOIN campaign_p...\n                                                             ^\n"
    },
    {
      "NL": "List the anniversary_reward_voucher_status of customers and their corresponding shipping_status for orders with fk_order_id = 67890.",
      "Expected": "SELECT T2.anniversary_reward_voucher_status, T1.shipping_status FROM shipping AS T1 INNER JOIN customers_loyalty_program AS T2 ON T1.fk_order_id = T2.associated_customer_reference_id WHERE T1.fk_order_id = 67890",
      "Actual": "SELECT anniversary_reward_voucher_status, shipping_status FROM orders WHERE fk_order_id = 67890",
      "Expected_Error": null,
      "Actual_Error": "column \"anniversary_reward_voucher_status\" does not exist\nLINE 1: SELECT anniversary_reward_voucher_status, shipping_status FR...\n               ^\n"
    },
    {
      "NL": "Retrieve the loyalty_program_tier_level of customers who have reviewed a product referenced_product_identifier = 12345. Provide the review_unique_identifier and associated_review_image_urls.",
      "Expected": "SELECT DISTINCT T2.loyalty_program_tier_level, T1.referenced_product_identifier, T1.associated_review_image_urls FROM product_reviews_and_ratings AS T1 INNER JOIN customers_loyalty_program AS T2 ON T1.reviewing_customer_identifier = T2.associated_customer_reference_id WHERE T1.referenced_product_identifier = 12345",
      "Actual": "SELECT t2.loyalty_program_tier_level, r.review_unique_identifier, r.associated_review_image_urls FROM referenced_product AS t1 JOIN reviews AS t2 ON t1.product_identifier = t2.product_identifier WHERE t1.product_identifier = 12345",
      "Expected_Error": null,
      "Actual_Error": "relation \"referenced_product\" does not exist\nLINE 1: ...e_identifier, r.associated_review_image_urls FROM referenced...\n                                                             ^\n"
    },
    {
      "NL": "Find the total amount of all orders placed in the month of January 2023, along with the average tax amount applied to those orders.",
      "Expected": "SELECT SUM(total_amount) AS total_order_amount, AVG(tax_amount) AS average_tax_amount FROM orders WHERE delivery_date >= '2023-01-01' AND delivery_date < '2023-02-01';",
      "Actual": "SELECT SUM(total_amount) AS total_amount, AVG(tax_amount) AS average_tax FROM orders WHERE EXTRACT(MONTH FROM order_date) = 1 AND EXTRACT(YEAR FROM order_date) = 2023",
      "Expected_Signature": "371aec1ba049102794dc2c7c138cf3c4",
      "Actual_Signature": "d9e7750c648a9b99f4dac0f417675bc2",
      "Expected_Shape": [
        1,
        2
      ],
      "Actual_Shape": [
        1,
        2
      ]
    },
    {
      "NL": "What is the total shipping cost for orders that have been shipped?",
      "Expected": "SELECT SUM(shipping_cost) FROM shipping WHERE shipping_status = 'shipped'",
      "Actual": "SELECT SUM(t2.cost) FROM orders AS t1 INNER JOIN shipments AS t2 ON t1.id = t2.order_id WHERE t2.shipped = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"shipments\" does not exist\nLINE 1: SELECT SUM(t2.cost) FROM orders AS t1 INNER JOIN shipments A...\n                                                         ^\n"
    },
    {
      "NL": "Get the wishlists with the name of the wishlist item and its price at addition, along with the order status of the orders with matching campaign ID.",
      "Expected": "SELECT w.product_name, w.price_at_addition, o.order_status FROM wishlist w LEFT JOIN orders o ON w.fk_product_id = o.campaign_id",
      "Actual": "SELECT T1.name, T1.price, T2.status FROM wishlists AS T1 INNER JOIN orders AS T2 ON T1.id = T2.wishlist_id INNER JOIN campaigns AS T3 ON T2.campaign_id = T3.id",
      "Expected_Error": null,
      "Actual_Error": "relation \"wishlists\" does not exist\nLINE 1: SELECT T1.name, T1.price, T2.status FROM wishlists AS T1 INN...\n                                                 ^\n"
    },
    {
      "NL": "For each distinct product name in the wishlist, find the corresponding product id and brand name from the wishlist, as well as the order item id and item status from the order items table, where the wishlist product id matches the order item product id, and include the corresponding shipping address, shipping city, and shipping state from the shipping table.",
      "Expected": "SELECT DISTINCT T1.product_name, T1.fk_product_id, T1.brand_name, T2.order_item_id, T2.item_status, T3.shipping_address, T3.shipping_city, T3.shipping_state FROM wishlist AS T1 INNER JOIN order_items AS T2 ON T1.fk_product_id = T2.product_id INNER JOIN shipping AS T3 ON T2.order_id = T3.fk_order_id",
      "Actual": "SELECT DISTINCT w.product_id, w.product_name, o.order_item_id, o.item_status, s.shipping_address, s.shipping_city, s.shipping_state FROM wishlist w JOIN order_items o ON w.product_id = o.product_id JOIN shipping s ON o.order_id = s.order_id",
      "Expected_Error": null,
      "Actual_Error": "column w.product_id does not exist\nLINE 1: ...pping_state FROM wishlist w JOIN order_items o ON w.product_...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"o.product_id\".\n"
    },
    {
      "NL": "Retrieve all refunds initiated by the users where the refund status is 'pending'.",
      "Expected": "SELECT * FROM refunds_returns WHERE refund_status = 'pending' AND refund_initiated_by = 'user';",
      "Actual": "SELECT * FROM refunds WHERE user_id IN (SELECT id FROM users WHERE status = 'active') AND status = 'pending';",
      "Expected_Error": null,
      "Actual_Error": "relation \"refunds\" does not exist\nLINE 1: SELECT * FROM refunds WHERE user_id IN (SELECT id FROM users...\n                      ^\n"
    },
    {
      "NL": "Find the total amount of all orders placed by customers from the United States that were shipped using standard shipping methods and include a discount.",
      "Expected": "SELECT SUM(o.total_amount) FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.shipping_address_country = 'United States' AND oi.is_returnable = false AND o.discount_applied > 0;",
      "Actual": "SELECT SUM(o.total_amount - o.discount) FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN shipping_methods sm ON o.shipping_method_id = sm.shipping_method_id WHERE c.country = 'United States' AND sm.shipping_method = 'Standard';",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...M(o.total_amount - o.discount) FROM orders o JOIN customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the event type, the campaign name, and the total number of products supplied by each supplier for events where the device type is 'mobile' and the campaign status is 'completed' and the supplier tax identification number is '123456789'.",
      "Expected": "SELECT T1.event_type, T2.campaign_name, T3.total_number_of_products_supplied FROM events AS T1 INNER JOIN campaigns AS T2 ON T1.event_id = T2.campaign_id INNER JOIN suppliers AS T3 ON T2.campaign_id = T3.supplier_unique_identifier WHERE T1.device_type = 'mobile' AND T2.campaign_status = 'completed' AND T3.supplier_tax_identification_number = '123456789'",
      "Actual": "SELECT event_type, campaign_name, COUNT(*) FROM events WHERE device_type = 'mobile' AND campaign_status = 'completed' AND supplier_tax_id = '123456789' GROUP BY event_type, campaign_name",
      "Expected_Error": null,
      "Actual_Error": "column \"campaign_name\" does not exist\nLINE 1: SELECT event_type, campaign_name, COUNT(*) FROM events WHERE...\n                           ^\n"
    },
    {
      "NL": "Find the average total transaction amount for customers who have made at least one purchase and have loyalty points greater than 1000, along with the number of wishlist items and average spent per order for these customers, grouped by city and country",
      "Expected": "SELECT AVG(t.total_transaction_amount), COUNT(c.person_customer_id), AVG(c.preferences_avg_spent_per_order), c.address_city, c.address_country FROM customerinfo c JOIN transactions_and_payments t ON c.person_customer_id = t.corresponding_customer_reference_identifier WHERE c.person_loyalty_points > 1000 AND t.final_billed_amount > 0 GROUP BY c.address_city, c.address_country",
      "Actual": "SELECT AVG(T2.total_amount) AS avg_total_amount, COUNT(T1.id) AS num_customers, COUNT(T3.id) AS num_wishlist_items, AVG(T3.total_amount) AS avg_spent_per_order FROM customers AS T1 INNER JOIN orders AS T2 ON T1.id = T2.customer_id INNER JOIN order_items AS T3 ON T2.id = T3.order_id WHERE T1.loyalty_points > 1000 GROUP BY T1.city, T1.country",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ... AVG(T3.total_amount) AS avg_spent_per_order FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "List all the orders where the order status is 'Shipped' and the device platform is 'Windows'.",
      "Expected": "SELECT o.order_id FROM orders o INNER JOIN events e ON o.order_id = e.order_id WHERE o.order_status = 'Shipped' AND e.device_platform = 'Windows'",
      "Actual": "SELECT * FROM orders WHERE status = 'Shipped' AND device_platform = 'Windows';",
      "Expected_Error": null,
      "Actual_Error": "column \"status\" does not exist\nLINE 1: SELECT * FROM orders WHERE status = 'Shipped' AND device_pla...\n                                   ^\n"
    },
    {
      "NL": "Retrieve the inventory of products with stock status as 'reorder'.",
      "Expected": "SELECT * FROM inventory WHERE stock_status = 'reorder';",
      "Actual": "SELECT * FROM products WHERE stock_status = 'reorder';",
      "Expected_Error": null,
      "Actual_Error": "column \"stock_status\" does not exist\nLINE 1: SELECT * FROM products WHERE stock_status = 'reorder';\n                                     ^\n"
    },
    {
      "NL": "Find all campaigns with their corresponding total reach, impressions and email open rate where the campaign type is 'Social Media' and the target audience is 'Young Adults', and also find the total refund amount for each campaign",
      "Expected": "SELECT c.campaign_name, c.total_reach, c.impressions, c.email_open_rate, SUM(rr.refund_amount) AS total_refund_amount FROM campaigns c LEFT JOIN refunds_returns rr ON c.campaign_id = rr.fk_order_id WHERE c.campaign_type = 'Social Media' AND c.target_audience = 'Young Adults' GROUP BY c.campaign_name, c.total_reach, c.impressions, c.email_open_rate",
      "Actual": "SELECT c.id, c.name, c.total_reach, c.impressions, c.email_open_rate, c.total_refund FROM campaigns c JOIN campaign_targeting ct ON c.id = ct.campaign_id WHERE ct.target_audience = 'Young Adults' AND c.campaign_type = 'Social Media'",
      "Expected_Error": null,
      "Actual_Error": "relation \"campaign_targeting\" does not exist\nLINE 1: ...l_open_rate, c.total_refund FROM campaigns c JOIN campaign_t...\n                                                             ^\n"
    },
    {
      "NL": "Find the average shipping cost for orders shipped to the United States",
      "Expected": "SELECT AVG(T1.shipping_cost) FROM shipping AS T1 INNER JOIN orders AS T2 ON T1.fk_order_id = T2.order_id WHERE T2.shipping_address_country = 'United States'",
      "Actual": "SELECT AVG(s.shipping_cost) FROM orders o JOIN shipments s ON o.id = s.order_id WHERE s.country = 'United States';",
      "Expected_Error": null,
      "Actual_Error": "relation \"shipments\" does not exist\nLINE 1: SELECT AVG(s.shipping_cost) FROM orders o JOIN shipments s O...\n                                                       ^\n"
    },
    {
      "NL": "Find the total billed amount for transactions where the corresponding customer made a refund and the refund amount was more than $50.",
      "Expected": "SELECT SUM(final_billed_amount) FROM transactions_and_payments tp JOIN refunds_returns rr ON tp.linked_order_reference_identifier = rr.fk_order_id WHERE rr.refund_amount > 50;",
      "Actual": "SELECT SUM(t.total_amount) FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.refund_amount > 50",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT SUM(t.total_amount) FROM transactions t JOIN customer...\n                                        ^\n"
    },
    {
      "NL": "Show the total amount of refunds and the total restocking fees for items in the inventory that belong to products that have a featured product flag set to true",
      "Expected": "SELECT sum(refund_amount) as total_refund_amount, sum(restocking_fee) as total_restocking_fee FROM refunds_returns INNER JOIN products ON refunds_returns.fk_product_id = products.unique_product_identifier WHERE products.featured_product_flag = true AND refunds_returns.fk_product_id IN (SELECT referenced_product_id FROM inventory)",
      "Actual": "SELECT SUM(refund_amount) AS total_refunds, SUM(restocking_fee) AS total_restocking_fees FROM inventory WHERE featured_product = TRUE",
      "Expected_Error": null,
      "Actual_Error": "column \"refund_amount\" does not exist\nLINE 1: SELECT SUM(refund_amount) AS total_refunds, SUM(restocking_f...\n                   ^\n"
    },
    {
      "NL": "What is the average aggregate customer review rating for all products from suppliers in the USA, who have an average supplier rating of at least 4.5, and what is the average total number of products supplied by these suppliers?",
      "Expected": "SELECT AVG(T2.aggregate_customer_review_rating) AS AVG_RATING, AVG(T1.total_number_of_products_supplied) AS AVG_PRODUCTS FROM suppliers AS T1 INNER JOIN products AS T2 ON T1.supplier_unique_identifier = T2.associated_supplier_reference_id WHERE T1.supplier_country_of_operation = 'USA' AND T1.average_supplier_rating >= 4.5",
      "Actual": "SELECT AVG(r.rating) ,  AVG(p.num_products) FROM products p JOIN supplier s ON p.supplier_id = s.id JOIN customer r ON p.customer_id = r.id WHERE s.country = 'USA' AND s.rating >= 4.5",
      "Expected_Error": null,
      "Actual_Error": "relation \"supplier\" does not exist\nLINE 1: ...ting) ,  AVG(p.num_products) FROM products p JOIN supplier s...\n                                                             ^\n"
    },
    {
      "NL": "Show the total number of customers who have an active subscription and a Loyalty points greater than 1000.",
      "Expected": "SELECT COUNT(*) FROM customerinfo WHERE account_has_active_subscription = true AND person_loyalty_points > 1000;",
      "Actual": "SELECT COUNT(*) FROM customers WHERE subscription_status = 'active' AND loyalty_points > 1000",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers WHERE subscription_status = '...\n                             ^\n"
    },
    {
      "NL": "What is the product id and quantity for each order that has a transaction review score of more than 4.5 and has been fully paid?",
      "Expected": "SELECT i.referenced_product_id, i.quantity FROM inventory i JOIN transactions_and_payments t ON i.id = t.corresponding_customer_reference_identifier WHERE t.transaction_review_score > 4.5 AND t.final_billed_amount = t.total_transaction_amount",
      "Actual": "SELECT DISTINCT o.id, o.quantity FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN order_transactions ot ON o.id = ot.order_id JOIN order_reviews or ON o.id = or.order_id WHERE or.score > 4.5 AND ot.status = 'paid'",
      "Expected_Error": null,
      "Actual_Error": "syntax error at or near \"or\"\nLINE 1: ...tions ot ON o.id = ot.order_id JOIN order_reviews or ON o.id...\n                                                             ^\n"
    },
    {
      "NL": "Find the names of products that have received a review with a sentiment analysis score greater than 0.7 and have a total number of verified reviews of at least 50.",
      "Expected": "SELECT p.product_display_name FROM products p JOIN product_reviews_and_ratings prr ON p.unique_product_identifier = prr.referenced_product_identifier WHERE prr.sentiment_analysis_score > 0.7 GROUP BY p.product_display_name HAVING COUNT(prr.review_unique_identifier) >= 50;",
      "Actual": "SELECT DISTINCT product_name FROM reviews WHERE sentiment_score > 0.7 GROUP BY product_name HAVING COUNT(verified) >= 50",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT DISTINCT product_name FROM reviews WHERE sentiment_sc...\n                                          ^\n"
    },
    {
      "NL": "List the inventory ids and referenced product ids of all inventory items with quantity less than the safety stock and the supplier id is 1.",
      "Expected": "SELECT id, referenced_product_id FROM inventory WHERE quantity < safety_stock AND supplier_id = 1",
      "Actual": "SELECT i.id, p.id FROM inventory i JOIN products p ON i.product_id = p.id WHERE i.quantity < (SELECT safety_stock FROM products WHERE id = 1) AND i.supplier_id = 1;",
      "Expected_Error": null,
      "Actual_Error": "column i.product_id does not exist\nLINE 1: ...CT i.id, p.id FROM inventory i JOIN products p ON i.product_...\n                                                             ^\n"
    },
    {
      "NL": "Get the total discount amount redeemed and the total number of products supplied for customers who are eligible for special promotions and have a supplier with more than 100 products supplied",
      "Expected": "SELECT clp.total_discount_amount_redeemed, s.total_number_of_products_supplied FROM customers_loyalty_program clp JOIN cart c ON clp.associated_customer_reference_id = c.fk_user_id JOIN suppliers s ON c.fk_product_id = s.supplier_unique_identifier WHERE clp.eligible_for_special_promotions = TRUE AND s.total_number_of_products_supplied > 100",
      "Actual": "SELECT SUM(t1.discount_amount) ,  SUM(t2.product_count) FROM customers AS t1 JOIN supplier_promotions AS t2 ON t1.customer_id = t2.customer_id JOIN supplier AS t3 ON t2.supplier_id = t3.supplier_id WHERE t3.product_count > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...t1.discount_amount) ,  SUM(t2.product_count) FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total transaction amount and the number of reviews for each customer who has made a transaction and submitted a review for the same product.",
      "Expected": "SELECT transactions_and_payments.corresponding_customer_reference_identifier, SUM(transactions_and_payments.total_transaction_amount) AS total_transaction_amount, COUNT(product_reviews_and_ratings.review_unique_identifier) AS number_of_reviews FROM transactions_and_payments JOIN product_reviews_and_ratings ON transactions_and_payments.corresponding_customer_reference_identifier = product_reviews_and_ratings.reviewing_customer_identifier GROUP BY transactions_and_payments.corresponding_customer_reference_identifier;",
      "Actual": "SELECT SUM(t.amount), COUNT(r.id) FROM transactions t JOIN reviews r ON t.id = r.transaction_id WHERE t.customer_id = r.customer_id GROUP BY t.customer_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT SUM(t.amount), COUNT(r.id) FROM transactions t JOIN r...\n                                               ^\n"
    },
    {
      "NL": "Retrieve the product display name, promotional price, and the loyalty membership unique identifier for customers who have redeemed loyalty points for products that are in stock and have an aggregate customer review rating of at least 4.",
      "Expected": "SELECT p.product_display_name, p.promotional_discounted_price, clp.loyalty_membership_unique_identifier\nFROM customers_loyalty_program clp\nJOIN cart c ON clp.associated_customer_reference_id = c.fk_user_id\nJOIN products p ON c.fk_product_id = p.unique_product_identifier\nWHERE clp.lifetime_loyalty_points_redeemed > 0 AND p.available_stock_quantity_in_units > 0 AND p.aggregate_customer_review_rating >= 4;",
      "Actual": "SELECT t1.display_name, t2.promotional_price, t3.loyalty_membership_id FROM products AS t1 INNER JOIN product_reviews AS t2 ON t1.id = t2.product_id INNER JOIN loyalty_redemptions AS t3 ON t2.id = t3.product_review_id WHERE t1.in_stock = TRUE AND t2.customer_review_rating >= 4",
      "Expected_Error": null,
      "Actual_Error": "relation \"product_reviews\" does not exist\nLINE 1: ...alty_membership_id FROM products AS t1 INNER JOIN product_re...\n                                                             ^\n"
    },
    {
      "NL": "Find all orders in the cart where the product is a featured product and the estimated delivery date is after today.",
      "Expected": "SELECT c.* FROM cart c JOIN products p ON c.fk_product_id = p.unique_product_identifier WHERE p.featured_product_flag = true AND c.estimated_delivery_date > CURRENT_DATE;",
      "Actual": "SELECT * FROM cart WHERE product_id IN (SELECT id FROM featured_products) AND estimated_delivery_date > CURRENT_DATE",
      "Expected_Error": null,
      "Actual_Error": "relation \"featured_products\" does not exist\nLINE 1: ...T * FROM cart WHERE product_id IN (SELECT id FROM featured_p...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of products supplied by each supplier and list them in descending order.",
      "Expected": "SELECT supplier_unique_identifier, SUM(total_number_of_products_supplied) AS total_products_supplied FROM suppliers GROUP BY supplier_unique_identifier ORDER BY total_products_supplied DESC;",
      "Actual": "SELECT COUNT(*) ,  s.supplier_name FROM products p JOIN suppliers s ON p.supplier_id = s.supplier_id GROUP BY s.supplier_name ORDER BY COUNT(*) DESC",
      "Expected_Error": null,
      "Actual_Error": "column p.supplier_id does not exist\nLINE 1: ...supplier_name FROM products p JOIN suppliers s ON p.supplier...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the total amount of discounts applied to orders within the last year, grouped by campaign.",
      "Expected": "SELECT campaign_id, SUM(discount_applied) as total_discount_applied FROM orders WHERE order_date >= NOW() - INTERVAL '1 year' GROUP BY campaign_id;",
      "Actual": "SELECT SUM(total_amount) AS total_amount FROM orders WHERE created_at >= NOW() - INTERVAL '1 year' GROUP BY campaign",
      "Expected_Error": null,
      "Actual_Error": "column \"campaign\" does not exist\nLINE 1: ...RE created_at >= NOW() - INTERVAL '1 year' GROUP BY campaign\n                                                               ^\nHINT:  Perhaps you meant to reference the column \"orders.campaign_id\".\n"
    },
    {
      "NL": "Identify the top 5 customers who have the highest total number of edits made in their reviews and have submitted reviews with a review_unique_identifier that is either 100 or 200. Additionally, for these customers, find the average time spent on the product review page and the total number of events where they clicked more than 3 times and spent more than 10 seconds on the page, considering only events that happened after June 1, 2022. The results should be ordered by the total number of edits in descending order.",
      "Expected": "SELECT p.reviewing_customer_identifier, COUNT(p.total_number_of_edits_made) AS total_edits, AVG(e.time_spent_seconds) AS avg_time_spent, COUNT(e.event_id) AS high_activity_events FROM product_reviews_and_ratings p LEFT JOIN events e ON p.reviewing_customer_identifier = e.person_customer_id WHERE p.review_unique_identifier IN (100, 200) AND e.event_type = 'product_review_page' AND e.time_spent_seconds > 10 AND e.click_count > 3 AND e.event_timestamp > '2022-06-01' GROUP BY p.reviewing_customer_identifier ORDER BY total_edits DESC LIMIT 5;",
      "Actual": "SELECT customers.id, customers.name, COUNT(events.id) AS total_edits, AVG(events.time_spent) AS avg_time_spent, COUNT(CASE WHEN events.clicks > 3 THEN 1 END) AS clicks_more_than_3, COUNT(CASE WHEN events.time_spent > 10 THEN 1 END) AS time_spent_more_than_10, SUM(CASE WHEN events.review_unique_identifier IN (100, 200) THEN 1 ELSE 0 END) AS review_count FROM customers JOIN reviews ON customers.id = reviews.customer_id JOIN events ON reviews.id = events.review_id WHERE events.date >= '2022-06-01' GROUP BY customers.id, customers.name ORDER BY COUNT(events.id) DESC LIMIT 5;",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...100, 200) THEN 1 ELSE 0 END) AS review_count FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find all the orders with total price greater than 100 and the item is returnable.",
      "Expected": "SELECT * FROM order_items WHERE total_price > 100 AND is_returnable = TRUE",
      "Actual": "SELECT * FROM orders WHERE total_price > 100 AND returnable = TRUE",
      "Expected_Error": null,
      "Actual_Error": "column \"total_price\" does not exist\nLINE 1: SELECT * FROM orders WHERE total_price > 100 AND returnable ...\n                                   ^\n"
    },
    {
      "NL": "Retrieve the official business name of suppliers who provide products with an expected restock date this month and have a supplier rating above 4.5, along with the names of customers who have ordered from these suppliers.",
      "Expected": "SELECT DISTINCT s.official_supplier_business_name, ci.person_first_name, ci.person_last_name FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id JOIN customerinfo ci ON ci.person_customer_id = i.id WHERE EXTRACT(YEAR FROM i.expected_restock_date) = EXTRACT(YEAR FROM CURRENT_DATE) AND EXTRACT(MONTH FROM i.expected_restock_date) = EXTRACT(MONTH FROM CURRENT_DATE) AND s.average_supplier_rating > 4.5",
      "Actual": "SELECT T1.name, T2.customer_name FROM suppliers AS T1 INNER JOIN orders AS T2 ON T1.id = T2.supplier_id WHERE T1.restock_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '1 month' AND T1.rating > 4.5",
      "Expected_Error": null,
      "Actual_Error": "column t1.id does not exist\nLINE 1: ...e FROM suppliers AS T1 INNER JOIN orders AS T2 ON T1.id = T2...\n                                                             ^\n"
    },
    {
      "NL": "Get the list of customers who have viewed their wishlist at least once and have made a purchase, along with their wishlist details, the number of reviews they have submitted, and the total amount spent by them. Include the event type and device platform for each customer.",
      "Expected": "SELECT c.person_customer_id, w.id AS wishlist_id, w.price_at_addition, w.priority_level, w.expected_purchase_date, COUNT(DISTINCT prr.review_unique_identifier) AS total_reviews, SUM(e.cart_value) AS total_spent, e.event_type, e.device_platform FROM customerinfo c JOIN wishlist w ON c.person_customer_id = w.fk_user_id JOIN product_reviews_and_ratings prr ON c.person_customer_id = prr.reviewing_customer_identifier JOIN events e ON c.person_customer_id = e.person_customer_id WHERE w.last_viewed_at IS NOT NULL AND e.event_type = 'purchase' GROUP BY c.person_customer_id, w.id, w.price_at_addition, w.priority_level, w.expected_purchase_date, e.event_type, e.device_platform",
      "Actual": "SELECT c.customer_id, c.name, c.email, w.wishlist_id, w.wishlist_name, COUNT(r.review_id) AS num_reviews, SUM(o.order_total) AS total_spent, e.event_type, d.device_platform FROM customers c JOIN wishlist w ON c.customer_id = w.customer_id JOIN orders o ON c.customer_id = o.customer_id JOIN reviews r ON o.order_id = r.order_id JOIN events e ON r.review_id = e.review_id JOIN devices d ON e.event_id = d.event_id WHERE w.viewed = TRUE GROUP BY c.customer_id, w.wishlist_id, e.event_type, d.device_platform",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...total_spent, e.event_type, d.device_platform FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "List all customers who have registered after January 1, 2022, and have a loyalty point balance greater than 1000.",
      "Expected": "SELECT person_first_name, person_last_name FROM customerinfo WHERE person_registration_date > '2022-01-01' AND person_loyalty_points > 1000;",
      "Actual": "SELECT * FROM customers WHERE registration_date > '2022-01-01' AND loyalty_points > 1000",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT * FROM customers WHERE registration_date > '2022-01-0...\n                      ^\n"
    },
    {
      "NL": "Find all reviews with a sentiment analysis score greater than 4 that were submitted by customers who have made more than 10 previous purchases and were reviewed on the same day as the last restock date of their associated product, excluding those products that are currently out of stock.",
      "Expected": "SELECT prr.* FROM product_reviews_and_ratings prr JOIN inventory i ON prr.referenced_product_identifier = i.referenced_product_id WHERE prr.sentiment_analysis_score > 4 AND prr.previous_product_purchases_count > 10 AND DATE(prr.customer_review_submission_date) = DATE(i.last_restock_date) AND i.stock_status != 'out_of_stock'",
      "Actual": "SELECT reviews.* FROM reviews JOIN customers ON reviews.customer_id = customers.id JOIN products ON reviews.product_id = products.id WHERE reviews.sentiment_score > 4 AND customers.num_purchases > 10 AND reviews.review_date = (SELECT MAX(review_date) FROM reviews r JOIN products p ON r.product_id = p.id WHERE p.restock_date = (SELECT MIN(restock_date) FROM products p WHERE p.out_of_stock = FALSE))",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT reviews.* FROM reviews JOIN customers ON reviews.cust...\n                              ^\n"
    },
    {
      "NL": "Find all products with a standard retail price greater than $50 and the customers who have redeemed more than 1000 loyalty points and have an anniversary reward voucher status as true.",
      "Expected": "SELECT p.*, c.* FROM products p JOIN customers_loyalty_program c ON p.unique_product_identifier = c.associated_customer_reference_id WHERE p.standard_retail_price_including_tax > 50 AND c.lifetime_loyalty_points_redeemed > 1000 AND c.anniversary_reward_voucher_status = TRUE",
      "Actual": "SELECT p.*, c.* FROM products p JOIN customers c ON p.customer_id = c.customer_id WHERE p.retail_price > 50 AND c.loyalty_points > 1000 AND c.anniversary_reward = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT p.*, c.* FROM products p JOIN customers c ON p.custom...\n                                             ^\n"
    },
    {
      "NL": "Retrieve the first name, last name, and total discount amount redeemed for customers who are eligible for special promotions and have more than 1000 loyalty points.",
      "Expected": "SELECT ci.person_first_name, ci.person_last_name, clp.total_discount_amount_redeemed FROM customerinfo ci JOIN customers_loyalty_program clp ON ci.person_customer_id = clp.associated_customer_reference_id WHERE clp.eligible_for_special_promotions = TRUE AND clp.accumulated_loyalty_points_balance > 1000;",
      "Actual": "SELECT first_name, last_name, SUM(discount_amount) FROM customers WHERE loyalty_points > 1000 AND is_promotion_eligible = TRUE GROUP BY first_name, last_name",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ... first_name, last_name, SUM(discount_amount) FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "What is the total revenue generated by each campaign and the total amount spent by each order?",
      "Expected": "SELECT SUM(T2.revenue_generated) AS total_revenue, SUM(T1.total_amount) AS total_amount FROM orders AS T1 INNER JOIN campaigns AS T2 ON T1.campaign_id = T2.campaign_id GROUP BY T2.campaign_id",
      "Actual": "SELECT campaign_id, SUM(revenue) AS total_revenue, SUM(amount) AS total_spent FROM orders GROUP BY campaign_id",
      "Expected_Error": null,
      "Actual_Error": "column \"revenue\" does not exist\nLINE 1: SELECT campaign_id, SUM(revenue) AS total_revenue, SUM(amoun...\n                                ^\n"
    },
    {
      "NL": "Find the total orders for each customer who has a preferred payment method and sort the results in ascending order.",
      "Expected": "SELECT T2.preferences_total_orders FROM customerinfo AS T1 INNER JOIN customerinfo AS T2 ON T1.person_customer_id = T2.person_customer_id WHERE T1.account_preferred_payment_method IS NOT NULL ORDER BY T2.preferences_total_orders ASC;",
      "Actual": "SELECT COUNT(*) ,  customer_id FROM orders WHERE payment_method IN ('credit card', 'paypal') GROUP BY customer_id ORDER BY COUNT(*) ASC",
      "Expected_Error": null,
      "Actual_Error": "column \"customer_id\" does not exist\nLINE 1: SELECT COUNT(*) ,  customer_id FROM orders WHERE payment_met...\n                           ^\n"
    },
    {
      "NL": "Get the campaign name and total revenue generated for each campaign from the given campaign ID. Also, find the total billed amount in the transactions table for each campaign ID. Order the results by the total revenue in descending order.",
      "Expected": "SELECT T1.campaign_name, T1.revenue_generated, SUM(T2.final_billed_amount) AS total_billed_amount FROM campaigns T1 INNER JOIN transactions_and_payments T2 ON T1.campaign_id = T2.linked_order_reference_identifier GROUP BY T1.campaign_name, T1.revenue_generated ORDER BY T1.revenue_generated DESC;",
      "Actual": "SELECT T1.campaign_name, T1.total_revenue, T2.total_billed FROM campaigns AS T1 INNER JOIN ( SELECT campaign_id, SUM(amount) AS total_billed FROM transactions GROUP BY campaign_id ) AS T2 ON T1.campaign_id = T2.campaign_id WHERE T1.campaign_id = 123 ORDER BY T1.total_revenue DESC",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: ...ECT campaign_id, SUM(amount) AS total_billed FROM transactio...\n                                                             ^\n"
    },
    {
      "NL": "Calculate the total revenue generated by successful campaigns that ended in the last 30 days.",
      "Expected": "SELECT SUM(revenue_generated) FROM campaigns WHERE campaign_status = 'successful' AND end_date >= CURRENT_DATE - INTERVAL '30 days';",
      "Actual": "SELECT SUM(campaign_revenue) FROM campaigns WHERE campaign_status = 'successful' AND campaign_end_date >= CURRENT_DATE - INTERVAL '30 days';",
      "Expected_Error": null,
      "Actual_Error": "column \"campaign_revenue\" does not exist\nLINE 1: SELECT SUM(campaign_revenue) FROM campaigns WHERE campaign_s...\n                   ^\n"
    },
    {
      "NL": "Find the total number of products supplied by each supplier along with the corresponding inventory quantity for products with a safety stock greater than 10.",
      "Expected": "SELECT s.total_number_of_products_supplied, i.quantity FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id WHERE i.safety_stock > 10;",
      "Actual": "SELECT COUNT(DISTINCT s.id) AS supplier_count, SUM(i.quantity) AS total_inventory FROM suppliers s JOIN products p ON s.id = p.supplier_id JOIN inventory i ON p.id = i.product_id WHERE i.quantity > 10 GROUP BY s.id",
      "Expected_Error": null,
      "Actual_Error": "column s.id does not exist\nLINE 1: ...tal_inventory FROM suppliers s JOIN products p ON s.id = p.s...\n                                                             ^\n"
    },
    {
      "NL": "List the customer loyalty program details for customers who have placed orders with a total amount greater than $100, including their loyalty points balance, loyalty tier level, and the campaign name for the order.",
      "Expected": "SELECT T3.accumulated_loyalty_points_balance, T3.loyalty_program_tier_level, T1.campaign_name FROM campaigns AS T1 INNER JOIN orders AS T2 ON T1.campaign_id = T2.campaign_id INNER JOIN customers_loyalty_program AS T3 ON T2.person_customer_id = T3.associated_customer_reference_id WHERE T2.total_amount > 100",
      "Actual": "SELECT c.loyalty_points, c.loyalty_tier, o.campaign_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.total_amount > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...alty_points, c.loyalty_tier, o.campaign_name FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total revenue generated by each campaign type along with the total quantity of inventory for each product",
      "Expected": "SELECT c.campaign_type, SUM(c.revenue_generated) AS total_revenue, SUM(i.quantity) AS total_quantity FROM campaigns c JOIN inventory i ON c.campaign_id = i.referenced_product_id GROUP BY c.campaign_type",
      "Actual": "SELECT campaign_type, SUM(revenue), SUM(quantity) FROM orders GROUP BY campaign_type",
      "Expected_Error": null,
      "Actual_Error": "column \"campaign_type\" does not exist\nLINE 1: SELECT campaign_type, SUM(revenue), SUM(quantity) FROM order...\n               ^\n"
    },
    {
      "NL": "List the average number of stars given by customers who have placed more than 10 orders.",
      "Expected": "SELECT AVG(pr.submitted_review_star_rating) FROM product_reviews_and_ratings pr JOIN customerinfo ci ON pr.reviewing_customer_identifier = ci.person_customer_id WHERE ci.preferences_total_orders > 10;",
      "Actual": "SELECT AVG(stars) FROM customers JOIN orders ON customers.id = orders.customer_id GROUP BY customers.id HAVING COUNT(orders.id) > 10",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT AVG(stars) FROM customers JOIN orders ON customers.id...\n                               ^\n"
    },
    {
      "NL": "Find the top 5 most purchased products with their average rating from customers who have purchased at least 2 products and have a loyalty membership tier level of Platinum, along with the total number of reviews for each product and the total loyalty points earned by each customer.",
      "Expected": "WITH purchased_products AS ( SELECT T2.referenced_product_identifier, T1.associated_customer_reference_id, T2.submitted_review_star_rating FROM customers_loyalty_program AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.associated_customer_reference_id = T2.reviewing_customer_identifier ), count_table AS ( SELECT referenced_product_identifier, COUNT(referenced_product_identifier) AS count, AVG(submitted_review_star_rating) AS avg_rating FROM purchased_products GROUP BY referenced_product_identifier ) SELECT T2.referenced_product_identifier, T2.avg_rating, T3.loyalty_membership_unique_identifier, T3.lifetime_loyalty_points_earned, T2.count FROM purchased_products AS T1 INNER JOIN count_table AS T2 ON T1.referenced_product_identifier = T2.referenced_product_identifier INNER JOIN customers_loyalty_program AS T3 ON T1.associated_customer_reference_id = T3.associated_customer_reference_id WHERE T3.loyalty_program_tier_level = 'Platinum' AND T2.count > 2 ORDER BY T2.avg_rating DESC LIMIT 5",
      "Actual": "SELECT product_id, AVG(rating) AS avg_rating, COUNT(review_id) AS total_reviews, SUM(loyalty_points) AS total_loyalty_points FROM reviews JOIN customers ON reviews.customer_id = customers.customer_id JOIN orders ON reviews.order_id = orders.order_id JOIN loyalty_program ON customers.customer_id = loyalty_program.customer_id WHERE loyalty_program.tier_level = 'Platinum' GROUP BY product_id HAVING COUNT(DISTINCT orders.order_id) >= 2 ORDER BY total_reviews DESC LIMIT 5",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ... SUM(loyalty_points) AS total_loyalty_points FROM reviews JO...\n                                                             ^\n"
    },
    {
      "NL": "Find the total revenue generated by campaigns that were successful, defined as campaigns with an actual spent less than the budget.",
      "Expected": "SELECT SUM(revenue_generated) AS total_revenue FROM campaigns WHERE actual_spent < budget AND campaign_status = 'successful';",
      "Actual": "SELECT SUM(campaign_budget) FROM campaigns WHERE campaign_actual_spent < campaign_budget",
      "Expected_Error": null,
      "Actual_Error": "column \"campaign_budget\" does not exist\nLINE 1: SELECT SUM(campaign_budget) FROM campaigns WHERE campaign_ac...\n                   ^\n"
    },
    {
      "NL": "Retrieve the product display names and the number of orders for products that have been reviewed with a rating above 4 in the past month, along with the customer's first name and last name who placed the order.",
      "Expected": "SELECT p.product_display_name, COUNT(e.order_id) AS order_count, ci.person_first_name, ci.person_last_name FROM products p JOIN events e ON p.unique_product_identifier = e.order_item_id JOIN customerinfo ci ON e.person_customer_id = ci.person_customer_id WHERE e.review_rating > 4 AND e.event_timestamp >= NOW() - INTERVAL '1 month' GROUP BY p.product_display_name, ci.person_first_name, ci.person_last_name;",
      "Actual": "SELECT T1.product_name, COUNT(T2.order_id) FROM products AS T1 INNER JOIN orders AS T2 ON T1.product_id = T2.product_id INNER JOIN order_reviews AS T3 ON T2.order_id = T3.order_id WHERE T3.review_date >= NOW() - INTERVAL '1 month' AND T3.rating > 4 GROUP BY T1.product_name",
      "Expected_Error": null,
      "Actual_Error": "column t1.product_id does not exist\nLINE 1: ...d) FROM products AS T1 INNER JOIN orders AS T2 ON T1.product...\n                                                             ^\n"
    },
    {
      "NL": "Get the total quantity of all products in the inventory with a stock status of 'in stock' and a warehouse location of 'main warehouse', along with the product identifier and last updated timestamp.",
      "Expected": "SELECT referenced_product_id, SUM(quantity) AS total_quantity, MAX(last_updated) AS last_updated FROM inventory WHERE stock_status = 'in stock' AND warehouse_location = 'main warehouse' GROUP BY referenced_product_id",
      "Actual": "SELECT SUM(quantity), product_id, last_updated FROM inventory WHERE stock_status = 'in stock' AND warehouse_location = 'main warehouse' GROUP BY product_id, last_updated",
      "Expected_Error": null,
      "Actual_Error": "column \"product_id\" does not exist\nLINE 1: SELECT SUM(quantity), product_id, last_updated FROM inventor...\n                              ^\n"
    },
    {
      "NL": "Get the top 5 products with highest average customer review rating.",
      "Expected": "SELECT T1.product_display_name, T1.aggregate_customer_review_rating FROM products AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.unique_product_identifier = T2.referenced_product_identifier GROUP BY T1.product_display_name, T1.aggregate_customer_review_rating ORDER BY T1.aggregate_customer_review_rating DESC LIMIT 5",
      "Actual": "SELECT product_id, AVG(review_rating) FROM customer_reviews GROUP BY product_id ORDER BY AVG(review_rating) DESC LIMIT 5;",
      "Expected_Error": null,
      "Actual_Error": "relation \"customer_reviews\" does not exist\nLINE 1: SELECT product_id, AVG(review_rating) FROM customer_reviews ...\n                                                   ^\n"
    },
    {
      "NL": "Get the average amount spent per order by each customer for orders placed in the last 30 days.",
      "Expected": "SELECT customerinfo.person_customer_id, AVG(orders.total_amount) as average_spent_per_order FROM orders INNER JOIN customerinfo ON orders.person_customer_id = customerinfo.person_customer_id WHERE orders.order_date >= NOW() - INTERVAL '30 days' GROUP BY customerinfo.person_customer_id;",
      "Actual": "SELECT AVG(o.total_amount) ,  c.customer_id ,  c.customer_name FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date >= NOW() - INTERVAL '30 days' GROUP BY c.customer_id ,  c.customer_name",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...customer_id ,  c.customer_name FROM orders o JOIN customers ...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve all reviews where the reviewer is verified and the review has received more than 5 helpful votes.",
      "Expected": "SELECT * FROM product_reviews_and_ratings WHERE verification_status_of_reviewer = TRUE AND number_of_helpful_votes_received > 5;",
      "Actual": "SELECT * FROM reviews WHERE verified = TRUE AND helpful_votes > 5",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT * FROM reviews WHERE verified = TRUE AND helpful_vote...\n                      ^\n"
    },
    {
      "NL": "Retrieve the details of products in the wishlist along with customer's first and last name for wishlists that have a reminder set and the product is still in stock.",
      "Expected": "SELECT w.product_name, w.brand_name, w.category, w.price_at_addition, w.discount_at_addition, w.quantity, w.reminder_date, ci.person_first_name, ci.person_last_name FROM wishlist w JOIN customerinfo ci ON w.fk_user_id = ci.person_customer_id WHERE w.reminder_set = true AND w.stock_status_at_addition = true;",
      "Actual": "SELECT p.name, p.price, p.stock, c.first_name, c.last_name FROM products p JOIN wishlist w ON p.id = w.product_id JOIN customers c ON w.customer_id = c.id WHERE w.reminder = 'true' AND p.stock > 0",
      "Expected_Error": null,
      "Actual_Error": "column p.id does not exist\nLINE 1: ...e, c.last_name FROM products p JOIN wishlist w ON p.id = w.p...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"w.id\".\n"
    },
    {
      "NL": "Retrieve the details of products that have been returned more than once due to 'damaged' reasons, along with the average cart value of those returns and the customer's email who initiated the returns, excluding products that are no longer active.",
      "Expected": "SELECT p.product_display_name, rr.reason, ci.person_email, AVG(e.cart_value) AS avg_cart_value FROM products p JOIN refunds_returns rr ON p.unique_product_identifier = rr.fk_product_id JOIN events e ON rr.fk_order_id = e.order_id JOIN customerinfo ci ON rr.fk_user_id = ci.person_customer_id WHERE rr.reason = 'damaged' AND p.active_product_status = true GROUP BY p.product_display_name, rr.reason, ci.person_email HAVING COUNT(rr.id) > 1;",
      "Actual": "SELECT p.name, c.email, AVG(r.cart_value) FROM returns r JOIN customers c ON r.customer_id = c.id JOIN products p ON r.product_id = p.id WHERE r.return_reason = 'damaged' AND p.is_active = FALSE GROUP BY r.customer_id, r.product_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"returns\" does not exist\nLINE 1: SELECT p.name, c.email, AVG(r.cart_value) FROM returns r JOI...\n                                                       ^\n"
    },
    {
      "NL": "Which products are shipped to the same state where shipping status is 'Delivered' and estimated delivery is within the next 7 days?",
      "Expected": "SELECT DISTINCT T2.product_name FROM shipping AS T1 INNER JOIN wishlist AS T2 ON T2.id = T1.fk_order_id WHERE T1.shipping_state = (SELECT shipping_state FROM shipping WHERE shipping_status = 'Delivered') AND T1.estimated_delivery BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 day'",
      "Actual": "SELECT DISTINCT product_id FROM orders WHERE state = ( SELECT state FROM orders WHERE shipping_status = 'Delivered' AND estimated_delivery BETWEEN NOW() + INTERVAL '7 days' AND NOW() + INTERVAL '8 days' )",
      "Expected_Error": null,
      "Actual_Error": "column \"product_id\" does not exist\nLINE 1: SELECT DISTINCT product_id FROM orders WHERE state = ( SELEC...\n                        ^\n"
    },
    {
      "NL": "Find the total billed amount and the transaction date for all transactions that were part of campaigns with an ROI greater than 100% and used the payment method 'Credit Card'.",
      "Expected": "SELECT TAP.final_billed_amount, TAP.transaction_date_and_time FROM transactions_and_payments AS TAP JOIN campaigns AS C ON TAP.promotional_offer_applied = TRUE AND TAP.applied_gift_card_code = C.discount_code WHERE C.roi > 100 AND TAP.payment_method_used = 'Credit Card';",
      "Actual": "SELECT SUM(amount) ,  min(transaction_date) FROM transactions WHERE campaign_roi > 100 AND payment_method = 'Credit Card'",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT SUM(amount) ,  min(transaction_date) FROM transaction...\n                                                         ^\n"
    },
    {
      "NL": "Find the total amount spent by each customer on orders that included items with a warranty period of more than 1 year, and include only those orders which were shipped after January 1, 2023.",
      "Expected": "SELECT o.person_customer_id, SUM(o.total_amount) AS total_spent FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE oi.warranty_period > 12 AND o.shipping_date > '2023-01-01' GROUP BY o.person_customer_id;",
      "Actual": "SELECT SUM(o.total_amount) ,  c.customer_name FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE p.warranty_period > 1 AND o.ship_date > '2022-01-01' GROUP BY c.customer_name",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...tal_amount) ,  c.customer_name FROM orders o JOIN customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total time spent on events by customers who have completed a survey, grouped by their device platform.",
      "Expected": "SELECT device_platform, SUM(time_spent_seconds) as total_time_spent FROM events WHERE survey_completed = true GROUP BY device_platform;",
      "Actual": "SELECT SUM(CASE WHEN device_platform = 'mobile' THEN event_duration ELSE 0 END) AS mobile_time, SUM(CASE WHEN device_platform = 'desktop' THEN event_duration ELSE 0 END) AS desktop_time",
      "Expected_Error": null,
      "Actual_Error": "column \"device_platform\" does not exist\nLINE 1: SELECT SUM(CASE WHEN device_platform = 'mobile' THEN event_d...\n                             ^\n"
    },
    {
      "NL": "Find the total number of push notifications clicked for events happening in the last 30 days.",
      "Expected": "SELECT COUNT(*) AS total_push_notifications_clicked FROM events WHERE push_notification_clicked = true AND event_timestamp >= NOW() - INTERVAL '30 days';",
      "Actual": "SELECT COUNT(*) FROM push_notifications WHERE created_at >= NOW() - INTERVAL '30 days';",
      "Expected_Error": null,
      "Actual_Error": "relation \"push_notifications\" does not exist\nLINE 1: SELECT COUNT(*) FROM push_notifications WHERE created_at >= ...\n                             ^\n"
    },
    {
      "NL": "What are the total amount and order status of orders made by customers who have clicked push notifications and have also completed surveys, along with the total time spent and discount applied in their corresponding events?",
      "Expected": "SELECT o.total_amount, o.order_status, SUM(e.time_spent_seconds), SUM(e.discount_applied) FROM orders o JOIN events e ON o.order_id = e.order_id WHERE e.push_notification_clicked = true AND e.survey_completed = true GROUP BY o.total_amount, o.order_status",
      "Actual": "SELECT SUM(CASE WHEN status = 'completed' THEN amount ELSE 0 END) AS total_amount, SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) AS order_status, SUM(CASE WHEN status = 'completed' THEN time_spent ELSE 0 END) AS total_time_spent, SUM(CASE WHEN status = 'completed' THEN discount ELSE 0 END) AS total_discount FROM orders WHERE push_notification_clicked = TRUE AND survey_completed = TRUE",
      "Expected_Error": null,
      "Actual_Error": "column \"status\" does not exist\nLINE 1: SELECT SUM(CASE WHEN status = 'completed' THEN amount ELSE 0...\n                             ^\n"
    },
    {
      "NL": "List all orders that have a payment status of paid and were shipped via a carrier other than UPS",
      "Expected": "SELECT T1.order_id, T1.payment_status, T2.carrier FROM orders AS T1 INNER JOIN shipping AS T2 ON T1.order_id = T2.fk_order_id WHERE T1.payment_status = 'paid' AND T2.carrier != 'UPS'",
      "Actual": "SELECT * FROM orders WHERE payment_status = 'paid' AND carrier != 'UPS'",
      "Expected_Error": null,
      "Actual_Error": "column \"carrier\" does not exist\nLINE 1: ...T * FROM orders WHERE payment_status = 'paid' AND carrier !=...\n                                                             ^\n"
    },
    {
      "NL": "Get the first and last name of customers who have placed an order with a total amount of more than $1000 and have an active subscription.",
      "Expected": "SELECT T2.person_first_name, T2.person_last_name FROM orders AS T1 INNER JOIN customerinfo AS T2 ON T1.person_customer_id = T2.person_customer_id WHERE T1.total_amount > 1000 AND T2.account_has_active_subscription = TRUE",
      "Actual": "SELECT first_name, last_name FROM customers WHERE total_amount > 1000 AND active_subscription = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT first_name, last_name FROM customers WHERE total_amou...\n                                          ^\n"
    },
    {
      "NL": "Find the loyalty membership unique identifiers for customers who made more than $1000 in transactions and received a special discount on their birthday.",
      "Expected": "SELECT DISTINCT T1.loyalty_membership_unique_identifier FROM customers_loyalty_program AS T1 JOIN transactions_and_payments AS T2 ON T1.associated_customer_reference_id = T2.corresponding_customer_reference_identifier WHERE T2.total_transaction_amount > 1000 AND T1.customer_birthday_special_discount = TRUE;",
      "Actual": "SELECT DISTINCT loyalty_membership_id FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.total_amount > 1000 AND transactions.discount_amount > 0 AND transactions.transaction_date = customers.birthday_date",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT DISTINCT loyalty_membership_id FROM customers JOIN tr...\n                                                   ^\n"
    },
    {
      "NL": "Get the number of customers who are premium and have more than 10000 loyalty points.",
      "Expected": "SELECT COUNT(person_customer_id) FROM customerinfo WHERE person_is_premium = True AND person_loyalty_points > 10000",
      "Actual": "SELECT COUNT(*) FROM customers WHERE premium = TRUE AND loyalty_points > 10000;",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers WHERE premium = TRUE AND loya...\n                             ^\n"
    },
    {
      "NL": "What is the average total amount of orders for each city, along with the corresponding number of orders and customers in that city?",
      "Expected": "SELECT T1.shipping_address_city, AVG(T1.total_amount), COUNT(T1.order_id), COUNT(DISTINCT T1.person_customer_id) FROM orders AS T1 INNER JOIN customerinfo AS T2 ON T1.person_customer_id = T2.person_customer_id GROUP BY T1.shipping_address_city",
      "Actual": "SELECT avg(total_amount) AS avg_total_amount, count(*) AS num_orders, count(DISTINCT customer_id) AS num_customers FROM orders GROUP BY city",
      "Expected_Error": null,
      "Actual_Error": "column \"customer_id\" does not exist\nLINE 1: ...al_amount, count(*) AS num_orders, count(DISTINCT customer_i...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the product display names and their associated supplier reference IDs for products that have been in stock for less than 10 units and have not been restocked since before January 1, 2023, and are in the 'Electronics' category.",
      "Expected": "SELECT p.product_display_name, p.associated_supplier_reference_id FROM products p JOIN inventory i ON p.unique_product_identifier = i.referenced_product_id WHERE i.quantity < 10 AND i.last_restock_date < '2023-01-01' AND p.product_category_primary = 'Electronics';",
      "Actual": "SELECT t1.product_display_name, t2.supplier_reference_id FROM products AS t1 INNER JOIN product_suppliers AS t2 ON t1.product_id = t2.product_id WHERE t1.in_stock < 10 AND t1.restock_date < '2023-01-01' AND t1.category = 'Electronics'",
      "Expected_Error": null,
      "Actual_Error": "relation \"product_suppliers\" does not exist\nLINE 1: ...plier_reference_id FROM products AS t1 INNER JOIN product_su...\n                                                             ^\n"
    },
    {
      "NL": "What are the product names and prices of the items in the cart for a specific user?",
      "Expected": "SELECT p.product_display_name, c.price_per_unit FROM cart c JOIN products p ON c.fk_product_id = p.unique_product_identifier WHERE c.fk_user_id = 1;",
      "Actual": "SELECT T1.name, T1.price FROM cart AS T1 INNER JOIN cart_items AS T2 ON T1.id = T2.cart_id WHERE T2.user_id = 1",
      "Expected_Error": null,
      "Actual_Error": "relation \"cart_items\" does not exist\nLINE 1: ...LECT T1.name, T1.price FROM cart AS T1 INNER JOIN cart_items...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of transactions made by customers who have an active subscription, have a premium account, and have made a purchase in the last 30 days, and also find the average loyalty points earned by these customers, and the total average amount spent per order by these customers, and the average review score given by these customers for their transactions.",
      "Expected": "SELECT COUNT(DISTINCT t1.transaction_unique_identifier), AVG(t2.person_loyalty_points), AVG(t2.preferences_avg_spent_per_order), AVG(t1.transaction_review_score) FROM transactions_and_payments AS t1 INNER JOIN customerinfo AS t2 ON t1.corresponding_customer_reference_identifier = t2.person_customer_id WHERE t2.account_has_active_subscription = TRUE AND t2.person_is_premium = TRUE AND t1.transaction_date_and_time > NOW() - INTERVAL '30 days'",
      "Actual": "SELECT COUNT(*) ,  AVG(loyalty_points) ,  AVG(total_amount) ,  AVG(review_score) FROM transactions JOIN customers ON transactions.customer_id = customers.customer_id WHERE customers.subscription_status = 'active' AND customers.account_type = 'premium' AND transactions.transaction_date >= NOW() - INTERVAL '30 days'",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: ...s) ,  AVG(total_amount) ,  AVG(review_score) FROM transactio...\n                                                             ^\n"
    },
    {
      "NL": "Find the average click count and total cart value for events of type 'Product View' on the 'Android' platform.",
      "Expected": "SELECT AVG(click_count) AS avg_click_count, SUM(cart_value) AS total_cart_value FROM events WHERE event_type = 'Product View' AND device_platform = 'Android'",
      "Actual": "SELECT AVG(click_count) ,  SUM(total_cart_value) FROM events WHERE event_type = 'Product View' AND platform = 'Android';",
      "Expected_Error": null,
      "Actual_Error": "column \"total_cart_value\" does not exist\nLINE 1: SELECT AVG(click_count) ,  SUM(total_cart_value) FROM events...\n                                       ^\n"
    },
    {
      "NL": "Find the total number of products that are active and have more than 1000 verified reviews.",
      "Expected": "SELECT COUNT(unique_product_identifier) FROM products WHERE active_product_status = TRUE AND total_number_of_verified_reviews > 1000;",
      "Actual": "SELECT COUNT(*) FROM products WHERE active = TRUE AND verified_reviews > 1000",
      "Expected_Error": null,
      "Actual_Error": "column \"active\" does not exist\nLINE 1: SELECT COUNT(*) FROM products WHERE active = TRUE AND verifi...\n                                            ^\n"
    },
    {
      "NL": "Find the number of suppliers for each country of operation, sorted in descending order.",
      "Expected": "SELECT supplier_country_of_operation, COUNT(supplier_unique_identifier) FROM suppliers GROUP BY supplier_country_of_operation ORDER BY COUNT(supplier_unique_identifier) DESC;",
      "Actual": "SELECT COUNT(DISTINCT country) ,  country FROM suppliers GROUP BY country ORDER BY COUNT(DISTINCT country) DESC",
      "Expected_Error": null,
      "Actual_Error": "column \"country\" does not exist\nLINE 1: SELECT COUNT(DISTINCT country) ,  country FROM suppliers GRO...\n                              ^\n"
    },
    {
      "NL": "Retrieve the total refund amount and the date when the refund was processed for orders that had events marked as 'Return'.",
      "Expected": "SELECT rf.refund_amount, rf.processed_date FROM refunds_returns rf JOIN events e ON rf.fk_order_id = e.order_id WHERE e.event_type = 'Return';",
      "Actual": "SELECT SUM(orders.total_refund), orders.processed_date FROM orders JOIN order_events ON orders.id = order_events.order_id WHERE order_events.event = 'Return';",
      "Expected_Error": null,
      "Actual_Error": "relation \"order_events\" does not exist\nLINE 1: ...l_refund), orders.processed_date FROM orders JOIN order_even...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of customers who are eligible for special promotions.",
      "Expected": "SELECT count(*) FROM customers_loyalty_program WHERE eligible_for_special_promotions = TRUE;",
      "Actual": "SELECT COUNT(*) FROM customers WHERE is_eligible_for_promotions = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers WHERE is_eligible_for_promoti...\n                             ^\n"
    },
    {
      "NL": "Find all products that have a standard retail price greater than 200 and an available stock quantity in units greater than 10",
      "Expected": "SELECT * FROM products WHERE standard_retail_price_including_tax > 200 AND available_stock_quantity_in_units > 10",
      "Actual": "SELECT * FROM products WHERE retail_price > 200 AND stock_quantity > 10",
      "Expected_Error": null,
      "Actual_Error": "column \"retail_price\" does not exist\nLINE 1: SELECT * FROM products WHERE retail_price > 200 AND stock_qu...\n                                     ^\n"
    },
    {
      "NL": "List all the customers who have two-factor authentication enabled and their loyalty points",
      "Expected": "SELECT person_customer_id, person_loyalty_points FROM customerinfo WHERE securitytwo_factor_enabled = TRUE",
      "Actual": "SELECT customers.name, customers.loyalty_points FROM customers JOIN two_factor_auth ON customers.id = two_factor_auth.customer_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...ECT customers.name, customers.loyalty_points FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "What is the average total transaction amount for orders with a total amount greater than $1000, and what is the average number of loyalty points earned for these transactions, considering only customers who have participated in the exclusive beta testing program and have a loyalty membership unique identifier greater than 5000, and have made a payment using the same billing and shipping address, and have not had any chargeback requests, and their transaction status is 'completed', and the transaction date and time is within the last 6 months?",
      "Expected": "SELECT AVG(T.total_transaction_amount), AVG(T.associated_loyalty_points_earned) FROM transactions_and_payments T INNER JOIN orders O ON T.linked_order_reference_identifier = O.order_id INNER JOIN customers_loyalty_program C ON T.corresponding_customer_reference_identifier = C.associated_customer_reference_id WHERE O.total_amount > 1000 AND C.participation_in_exclusive_beta_testing = TRUE AND C.loyalty_membership_unique_identifier > 5000 AND T.billing_address_street = T.shipping_address_street AND T.billing_address_city = T.shipping_address_city AND T.billing_address_state = T.shipping_address_state AND T.billing_address_country = T.shipping_address_country AND T.billing_address_zip_code = T.shipping_address_zip_code AND T.chargeback_request_status = FALSE AND T.transaction_status = 'completed' AND T.transaction_date_and_time > NOW() - INTERVAL '6 month'",
      "Actual": "SELECT AVG(total_amount) AS avg_total_amount, AVG(loyalty_points) AS avg_loyalty_points FROM orders WHERE total_amount > 1000 AND customer_id IN (SELECT customer_id FROM beta_testers WHERE loyalty_membership_id > 5000) AND billing_address = shipping_address AND chargeback_requests = 0 AND transaction_status = 'completed' AND transaction_date >= NOW() - INTERVAL '6 months'",
      "Expected_Error": null,
      "Actual_Error": "column \"loyalty_points\" does not exist\nLINE 1: SELECT AVG(total_amount) AS avg_total_amount, AVG(loyalty_po...\n                                                          ^\n"
    },
    {
      "NL": "Analyze the inventory data to identify products that are frequently restocked but have low sales volume. Specifically, find products that have been restocked more than 5 times in the last year, have a stock turnover rate less than 0.5, and have not been part of any completed orders within the last year. Additionally, include the last updated timestamp, expiry date, and the total quantity sold for each product.",
      "Expected": "SELECT i.id, i.referenced_product_id, i.last_updated, i.expiry_date, COALESCE(SUM(oi.quantity), 0) AS total_quantity_sold FROM inventory i LEFT JOIN order_items oi ON i.referenced_product_id = oi.product_id WHERE i.last_restock_date > NOW() - INTERVAL '1 year' AND i.inventory_turnover_rate < 0.5 AND (oi.order_id IS NULL OR oi.order_item_id IS NULL OR oi.item_status = 'cancelled' OR oi.item_status = 'returned') GROUP BY i.id HAVING COUNT(i.last_restock_date) > 5 ORDER BY total_quantity_sold ASC;",
      "Actual": "SELECT p.product_name, p.last_updated, p.expiry_date, SUM(o.quantity_sold) AS total_quantity_sold, COALESCE(SUM(oi.quantity), 0) AS total_quantity, COALESCE(SUM(oi.quantity) / COALESCE(SUM(o.quantity), 1), 0) AS stock_turnover_rate FROM products p LEFT JOIN orders o ON p.product_id = o.product_id LEFT JOIN order_items oi ON o.order_id = oi.order_id WHERE oi.quantity > 0 AND o.order_date > NOW() - INTERVAL '1 year' AND p.restock_count > 5 AND p.stock_turnover_rate < 0.5 GROUP BY p.product_name, p.last_updated, p.expiry_date",
      "Expected_Error": null,
      "Actual_Error": "column p.product_id does not exist\nLINE 1: ...rnover_rate FROM products p LEFT JOIN orders o ON p.product_...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the average time spent on the site by customers who clicked on a promotion email and placed an order.",
      "Expected": "SELECT AVG(e.time_spent_seconds) AS avg_time_spent FROM events e JOIN orders o ON e.order_id = o.order_id WHERE e.email_opened = TRUE AND e.event_type = 'promotion_click';",
      "Actual": "SELECT AVG(T2.time_spent) FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.promotion_email = 'true'",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT AVG(T2.time_spent) FROM customers AS T1 INNER JOIN or...\n                                       ^\n"
    },
    {
      "NL": "List the number of customers grouped by their marital status and average income.",
      "Expected": "SELECT person_marital_status, AVG(person_income) FROM customerinfo GROUP BY person_marital_status",
      "Actual": "SELECT COUNT(*) ,  AVG(income) ,  marital_status FROM customers GROUP BY marital_status",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...CT COUNT(*) ,  AVG(income) ,  marital_status FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the total discounted price and the estimated delivery date for all items in the cart that are also available in the products table.",
      "Expected": "SELECT cart.discounted_total_price, cart.estimated_delivery_date FROM cart JOIN products ON cart.fk_product_id = products.unique_product_identifier;",
      "Actual": "SELECT SUM(p.price - d.discount) AS total_discounted_price, p.estimated_delivery_date FROM cart c JOIN products p ON c.product_id = p.id",
      "Expected_Error": null,
      "Actual_Error": "column c.product_id does not exist\nLINE 1: ...ated_delivery_date FROM cart c JOIN products p ON c.product_...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"c.fk_product_id\".\n"
    },
    {
      "NL": "Find the total loyalty points earned by customers who have made transactions in the last month and have an anniversary reward voucher status of true",
      "Expected": "SELECT SUM(T1.accumulated_loyalty_points_balance) FROM customers_loyalty_program AS T1 JOIN transactions_and_payments AS T2 ON T1.associated_customer_reference_id = T2.corresponding_customer_reference_identifier WHERE T2.transaction_date_and_time > NOW() - INTERVAL '1 month' AND T1.anniversary_reward_voucher_status = TRUE",
      "Actual": "SELECT SUM(loyalty_points) FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.transaction_date >= NOW() - INTERVAL '1 month' AND customers.anniversary_reward = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT SUM(loyalty_points) FROM customers JOIN transactions ...\n                                        ^\n"
    },
    {
      "NL": "Find the number of events where the event type is 'ORDER_COMPLETION' and the device platform is 'ANDROID', and the customer has also left a review with 5 stars. Then, group these events by the event timestamp and find the total number of such events for each group. Finally, find the top 5 results with the highest total number of events.",
      "Expected": "SELECT COUNT(*) AS total_events, T1.event_timestamp FROM events AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier WHERE T1.event_type = 'ORDER_COMPLETION' AND T1.device_platform = 'ANDROID' AND T2.submitted_review_star_rating = 5 GROUP BY T1.event_timestamp ORDER BY total_events DESC LIMIT 5",
      "Actual": "SELECT COUNT(*) ,  EXTRACT(EPOCH FROM timestamp) AS timestamp ,  COUNT(*) FROM events WHERE event_type = 'ORDER_COMPLETION' AND device_platform = 'ANDROID' AND review_rating = 5 GROUP BY EXTRACT(EPOCH FROM timestamp) ORDER BY COUNT(*) DESC LIMIT 5",
      "Expected_Error": null,
      "Actual_Error": "column \"timestamp\" does not exist\nLINE 1: SELECT COUNT(*) ,  EXTRACT(EPOCH FROM timestamp) AS timestam...\n                                              ^\n"
    },
    {
      "NL": "Find all users who have 'free shipping eligibility' as true and also have products in the wishlist which are currently out of stock.",
      "Expected": "SELECT T1.associated_customer_reference_id FROM customers_loyalty_program AS T1 JOIN wishlist AS T2 ON T1.associated_customer_reference_id = T2.fk_user_id WHERE T1.free_shipping_eligibility = TRUE AND T2.stock_status_at_addition = FALSE",
      "Actual": "SELECT * FROM users JOIN wishlist ON users.id = wishlist.user_id JOIN products ON wishlist.product_id = products.id WHERE products.in_stock = 'false' AND users.free_shipping_eligibility = 'true'",
      "Expected_Error": null,
      "Actual_Error": "relation \"users\" does not exist\nLINE 1: SELECT * FROM users JOIN wishlist ON users.id = wishlist.use...\n                      ^\n"
    },
    {
      "NL": "Get the total value of all carts for users who have completed a survey and have a cart status of 'active'",
      "Expected": "SELECT SUM(c.total_price) FROM cart c JOIN events e ON c.fk_user_id = e.person_customer_id WHERE e.survey_completed = TRUE AND c.cart_status = 'active'",
      "Actual": "SELECT SUM(total_value) FROM carts WHERE user_id IN (SELECT user_id FROM surveys WHERE status = 'completed') AND status = 'active';",
      "Expected_Error": null,
      "Actual_Error": "relation \"carts\" does not exist\nLINE 1: SELECT SUM(total_value) FROM carts WHERE user_id IN (SELECT ...\n                                     ^\n"
    },
    {
      "NL": "Find the total shipping costs and the estimated delivery dates for orders that were part of successful campaigns (ROI > 100%) and had at least one item that was part of a refund request. Include the campaign name, shipping carrier, and the total price of items in the order.",
      "Expected": "SELECT SUM(sh.shipping_cost) AS total_shipping_costs, sh.estimated_delivery, c.campaign_name, sh.carrier, SUM(oi.total_price) AS total_order_price FROM shipping sh JOIN order_items oi ON sh.fk_order_id = oi.order_id JOIN campaigns c ON oi.order_id = c.campaign_id JOIN refunds_returns rr ON oi.order_id = rr.fk_order_id WHERE c.roi > 100 AND rr.id IS NOT NULL GROUP BY sh.estimated_delivery, c.campaign_name, sh.carrier",
      "Actual": "SELECT SUM(o.total_price), c.campaign_name, s.shipping_carrier, o.estimated_delivery_date FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN campaigns c ON o.campaign_id = c.campaign_id JOIN refunds r ON oi.refund_id = r.refund_id WHERE c.ROI > 100 AND r.refund_status = 'approved'",
      "Expected_Error": null,
      "Actual_Error": "relation \"refunds\" does not exist\nLINE 1: ...campaigns c ON o.campaign_id = c.campaign_id JOIN refunds r ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of customers who have participated in the exclusive beta testing and have a loyalty membership unique identifier greater than 50000.",
      "Expected": "SELECT COUNT(*) FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = TRUE AND loyalty_membership_unique_identifier > 50000;",
      "Actual": "SELECT COUNT(*) FROM customers WHERE beta_tester = 'true' AND loyalty_membership_id > 50000",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers WHERE beta_tester = 'true' AN...\n                             ^\n"
    },
    {
      "NL": "Find all the chargeback dispute reasons from the transactions_and_payments table.",
      "Expected": "SELECT DISTINCT chargeback_dispute_reason FROM transactions_and_payments;",
      "Actual": "SELECT DISTINCT reason FROM transactions_and_payments",
      "Expected_Error": null,
      "Actual_Error": "column \"reason\" does not exist\nLINE 1: SELECT DISTINCT reason FROM transactions_and_payments\n                        ^\n"
    },
    {
      "NL": "Get the product identifier, review rating, and review feedback for reviews with a rating greater than 4 and a review length greater than 100 characters.",
      "Expected": "SELECT referenced_product_identifier, submitted_review_star_rating, textual_review_feedback FROM product_reviews_and_ratings WHERE submitted_review_star_rating > 4 AND length_of_review_in_characters > 100",
      "Actual": "SELECT product_identifier, review_rating, review_feedback FROM reviews WHERE review_rating > 4 AND review_length > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ...t_identifier, review_rating, review_feedback FROM reviews WH...\n                                                             ^\n"
    },
    {
      "NL": "Find the average shipping fee for orders that were created from carts where the estimated delivery date is before June 1, 2023, and the cart status is 'completed'.",
      "Expected": "SELECT AVG(o.shipping_fee) FROM orders o JOIN cart c ON o.created_at = c.added_at WHERE c.estimated_delivery_date < '2023-06-01' AND c.cart_status = 'completed'",
      "Actual": "SELECT AVG(s.shipping_fee) FROM orders o JOIN carts c ON o.cart_id = c.id JOIN shipments s ON o.id = s.order_id WHERE c.estimated_delivery_date < '2023-06-01' AND c.status = 'completed';",
      "Expected_Error": null,
      "Actual_Error": "relation \"carts\" does not exist\nLINE 1: SELECT AVG(s.shipping_fee) FROM orders o JOIN carts c ON o.c...\n                                                      ^\n"
    },
    {
      "NL": "Get the refund amount and refund status for all refunds where the refund method is 'credit' and the status is 'processed'.",
      "Expected": "SELECT refund_amount, refund_status FROM refunds_returns WHERE refund_method = 'credit' AND status = 'processed'",
      "Actual": "SELECT refund_amount, refund_status FROM refunds WHERE refund_method = 'credit' AND refund_status = 'processed';",
      "Expected_Error": null,
      "Actual_Error": "relation \"refunds\" does not exist\nLINE 1: SELECT refund_amount, refund_status FROM refunds WHERE refun...\n                                                 ^\n"
    },
    {
      "NL": "Find the names of customers who have accumulated more than 1000 loyalty points and are eligible for special promotions.",
      "Expected": "SELECT c.person_first_name, c.person_last_name FROM customerinfo c JOIN customers_loyalty_program l ON c.person_customer_id = l.associated_customer_reference_id WHERE l.accumulated_loyalty_points_balance > 1000 AND l.eligible_for_special_promotions = TRUE;",
      "Actual": "SELECT name FROM customers WHERE points > 1000 AND is_eligible_for_promotions",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT name FROM customers WHERE points > 1000 AND is_eligib...\n                         ^\n"
    },
    {
      "NL": "Retrieve the first name, last name, and total amount spent by each premium customer in transactions, along with the number of transactions they made.",
      "Expected": "SELECT ci.person_first_name, ci.person_last_name, SUM(tp.total_transaction_amount) AS total_spent, COUNT(tp.transaction_unique_identifier) AS total_transactions FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier WHERE ci.person_is_premium = TRUE GROUP BY ci.person_first_name, ci.person_last_name",
      "Actual": "SELECT T1.first_name, T1.last_name, SUM(T2.amount) AS total_amount_spent, COUNT(T2.id) AS num_transactions FROM customers AS T1 INNER JOIN transactions AS T2 ON T1.id = T2.customer_id WHERE T1.premium = TRUE GROUP BY T1.id",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...ount_spent, COUNT(T2.id) AS num_transactions FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the total transaction amounts and referral bonus points earned for customers who participated in the exclusive beta testing and have personalized product recommendations.",
      "Expected": "SELECT T2.total_transaction_amount, T1.referral_bonus_points_earned FROM customers_loyalty_program AS T1 JOIN transactions_and_payments AS T2 ON T1.associated_customer_reference_id = T2.corresponding_customer_reference_identifier WHERE T1.participation_in_exclusive_beta_testing = TRUE AND T1.personalized_product_recommendations IS NOT NULL;",
      "Actual": "SELECT SUM(t.amount) AS total_amount, SUM(r.points) AS referral_points FROM transactions t JOIN referrals r ON t.customer_id = r.customer_id WHERE t.tested = 'true' AND r.recommended = 'true'",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: ...tal_amount, SUM(r.points) AS referral_points FROM transactio...\n                                                             ^\n"
    },
    {
      "NL": "What are the product names and quantities of all items in orders with a total price greater than $100?",
      "Expected": "SELECT product_name, quantity FROM order_items WHERE total_price > 100",
      "Actual": "SELECT T1.product_name, T2.quantity FROM orders AS T1 INNER JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.total_price > 100",
      "Expected_Error": null,
      "Actual_Error": "column t1.product_name does not exist\nLINE 1: SELECT T1.product_name, T2.quantity FROM orders AS T1 INNER ...\n               ^\nHINT:  Perhaps you meant to reference the column \"t2.product_name\".\n"
    },
    {
      "NL": "Retrieve details of all wishlisted products where the price at addition is less than 50% of the current purchase price of the product in inventory, and the product has been on the wishlist for more than 30 days but has not been viewed in the last 15 days, also provide the name of the product, the user's ID who added it to the wishlist, and the current stock status of the product.",
      "Expected": "SELECT w.*, i.purchase_price, i.stock_status, w.product_name FROM wishlist w JOIN inventory i ON w.fk_product_id = i.referenced_product_id WHERE w.price_at_addition < 0.5 * i.purchase_price AND w.added_at <= NOW() - INTERVAL '30 days' AND w.last_viewed_at <= NOW() - INTERVAL '15 days'",
      "Actual": "SELECT p.name, w.user_id, i.stock_status FROM products p JOIN wishlists w ON p.id = w.product_id JOIN inventory i ON p.id = i.product_id WHERE w.added_at < NOW() - INTERVAL '30 days' AND w.viewed_at IS NULL AND p.price_at_addition < (p.current_price * 0.5)",
      "Expected_Error": null,
      "Actual_Error": "relation \"wishlists\" does not exist\nLINE 1: ...e, w.user_id, i.stock_status FROM products p JOIN wishlists ...\n                                                             ^\n"
    },
    {
      "NL": "What is the shipping status of the orders which have estimated delivery before '2022-01-01'?",
      "Expected": "SELECT DISTINCT shipping_status FROM shipping WHERE estimated_delivery < '2022-01-01'",
      "Actual": "SELECT shipping_status FROM orders WHERE estimated_delivery < '2022-01-01'",
      "Expected_Error": null,
      "Actual_Error": "column \"shipping_status\" does not exist\nLINE 1: SELECT shipping_status FROM orders WHERE estimated_delivery ...\n               ^\n"
    },
    {
      "NL": "Retrieve all product names and their associated supplier reference IDs for products that have a minimum threshold for restocking set to 5 or less and have a promotional discount applied, showing only active products.",
      "Expected": "SELECT product_display_name, associated_supplier_reference_id FROM products WHERE minimum_threshold_for_restocking <= 5 AND percentage_discount_applied > 0 AND active_product_status = true;",
      "Actual": "SELECT T1.name, T2.supplier_reference_id FROM products AS T1 INNER JOIN product_suppliers AS T2 ON T1.id = T2.product_id WHERE T1.restock_threshold <= 5 AND T1.promotional_discount IS NOT NULL AND T1.status = 'active'",
      "Expected_Error": null,
      "Actual_Error": "relation \"product_suppliers\" does not exist\nLINE 1: ...plier_reference_id FROM products AS T1 INNER JOIN product_su...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the number of unique customers who added items to their wishlist from a mobile device and have at least one item with a reminder set.",
      "Expected": "SELECT COUNT(DISTINCT w.fk_user_id) AS unique_customers FROM wishlist w JOIN events e ON w.session_id = e.session_id WHERE e.device_platform LIKE '%Mobile%' AND w.reminder_set = TRUE;",
      "Actual": "SELECT COUNT(DISTINCT c.customer_id) FROM customers c JOIN wishlist_items wi ON c.customer_id = wi.customer_id JOIN wishlist_reminders wr ON wi.wishlist_id = wr.wishlist_id WHERE wr.reminder_set = TRUE AND wi.device_type = 'mobile'",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(DISTINCT c.customer_id) FROM customers c JOIN w...\n                                                  ^\n"
    },
    {
      "NL": "List the event types and their timestamps for customers who have a loyalty points balance greater than 500, and find out the event types that occurred on weekends.",
      "Expected": "SELECT e.event_type, e.event_timestamp FROM events e INNER JOIN customerinfo c ON e.person_customer_id = c.person_customer_id WHERE c.person_loyalty_points > 500 AND EXTRACT(DOW FROM e.event_timestamp) IN (0, 6);",
      "Actual": "SELECT e.event_type, e.timestamp FROM events e JOIN customers c ON e.customer_id = c.customer_id WHERE c.loyalty_points > 500 AND e.timestamp::date NOT IN (SELECT date FROM days WHERE day IN (Saturday, Sunday))",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...LECT e.event_type, e.timestamp FROM events e JOIN customers ...\n                                                             ^\n"
    },
    {
      "NL": "Show all reviews with a star rating greater than 4.",
      "Expected": "SELECT * FROM product_reviews_and_ratings WHERE submitted_review_star_rating > 4;",
      "Actual": "SELECT * FROM reviews WHERE rating > 4;",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT * FROM reviews WHERE rating > 4;\n                      ^\n"
    },
    {
      "NL": "Find the names of the customers who made previous purchases and submitted reviews with more than 4 stars and are verified, and their corresponding review ratings.",
      "Expected": "SELECT T1.person_first_name, T1.person_last_name, T2.submitted_review_star_rating FROM customerinfo AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.referenced_product_identifier WHERE T2.verification_status_of_reviewer = TRUE AND T2.previous_product_purchases_count > 0 AND T2.submitted_review_star_rating > 4",
      "Actual": "SELECT T1.name, T2.rating FROM customers AS T1 INNER JOIN reviews AS T2 ON T1.id = T2.customer_id WHERE T2.rating > 4 AND T1.verified = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT T1.name, T2.rating FROM customers AS T1 INNER JOIN re...\n                                       ^\n"
    },
    {
      "NL": "Find all customer information with their review ratings and the associated review image URLs for customers who have submitted a review with a rating of 5 stars and number of helpful votes received is greater than 10.",
      "Expected": "SELECT T2.person_customer_id, T2.review_rating, T1.associated_review_image_urls FROM product_reviews_and_ratings AS T1 INNER JOIN events AS T2 ON T1.referenced_product_identifier = T2.order_id WHERE T1.submitted_review_star_rating = 5 AND T1.number_of_helpful_votes_received > 10",
      "Actual": "SELECT c.*, r.rating, r.review_image FROM customers c JOIN reviews r ON c.customer_id = r.customer_id WHERE r.rating = 5 AND r.helpful_votes > 10",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT c.*, r.rating, r.review_image FROM customers c JOIN r...\n                                                  ^\n"
    },
    {
      "NL": "Find the total amount spent on all orders for which email was opened and the payment method was 'PayPal'.",
      "Expected": "SELECT SUM(o.total_amount) FROM orders o INNER JOIN events e ON o.order_id = e.order_id WHERE e.email_opened = TRUE AND e.payment_method = 'PayPal'",
      "Actual": "SELECT SUM(total_amount) FROM orders WHERE email_opened = TRUE AND payment_method = 'PayPal';",
      "Expected_Error": null,
      "Actual_Error": "column \"email_opened\" does not exist\nLINE 1: SELECT SUM(total_amount) FROM orders WHERE email_opened = TR...\n                                                   ^\n"
    },
    {
      "NL": "Find the total revenue generated by all campaigns with a budget greater than $1000, along with the total number of clicks and impressions for each campaign, and also include the number of customers who made a purchase after clicking on an ad, and the total amount they spent, grouped by campaign name",
      "Expected": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, SUM(c.clicks) AS total_clicks, SUM(c.impressions) AS total_impressions, COUNT(DISTINCT e.person_customer_id) AS total_customers, SUM(e.cart_value) AS total_spent FROM campaigns c JOIN events e ON c.campaign_id = (SELECT campaign_id FROM events WHERE event_type = 'click' AND person_customer_id = e.person_customer_id) WHERE c.budget > 1000 AND e.event_type = 'purchase' GROUP BY c.campaign_name",
      "Actual": "SELECT SUM(campaign_budget) AS total_revenue, SUM(campaign_clicks) AS total_clicks, SUM(campaign_impressions) AS total_impressions, SUM(purchase_count) AS total_purchases, SUM(purchase_amount) AS total_spent FROM ( SELECT campaign_name, SUM(budget) AS campaign_budget, SUM(clicks) AS campaign_clicks, SUM(impressions) AS campaign_impressions, COUNT(DISTINCT customer_id) AS purchase_count, SUM(amount) AS purchase_amount FROM campaign WHERE budget > 1000 GROUP BY campaign_name ) AS subquery",
      "Expected_Error": null,
      "Actual_Error": "relation \"campaign\" does not exist\nLINE 1: ...rchase_count, SUM(amount) AS purchase_amount FROM campaign W...\n                                                             ^\n"
    },
    {
      "NL": "List the total amount and discount applied for each order for orders made in 2023.",
      "Expected": "SELECT order_id, total_amount, discount_applied FROM orders WHERE order_date >= '2023-01-01' AND order_date < '2024-01-01'",
      "Actual": "SELECT SUM(total_amount - discount_amount) AS total_amount, discount_amount FROM orders WHERE EXTRACT(YEAR FROM order_date) = 2023",
      "Expected_Error": null,
      "Actual_Error": "column \"discount_amount\" does not exist\nLINE 1: SELECT SUM(total_amount - discount_amount) AS total_amount, ...\n                                  ^\n"
    },
    {
      "NL": "Find all orders that were shipped in the last month and list their shipping status, estimated delivery date, and shipping cost.",
      "Expected": "SELECT shipping_status, estimated_delivery, shipping_cost FROM shipping WHERE shipped_date >= (CURRENT_DATE - INTERVAL '1 month');",
      "Actual": "SELECT * FROM orders WHERE shipped_at >= NOW() - INTERVAL '1 month' AND shipped_at IS NOT NULL AND shipping_status != 'pending' AND shipping_status != 'canceled' AND shipping_cost > 0",
      "Expected_Error": null,
      "Actual_Error": "column \"shipped_at\" does not exist\nLINE 1: SELECT * FROM orders WHERE shipped_at >= NOW() - INTERVAL '1...\n                                   ^\n"
    },
    {
      "NL": "What are the product names and average review ratings of all products that have more than 100 reviews?",
      "Expected": "SELECT product_display_name, aggregate_customer_review_rating FROM products WHERE total_number_of_verified_reviews > 100",
      "Actual": "SELECT product_name ,  AVG(review_rating) FROM reviews GROUP BY product_name HAVING COUNT(review_id)  >  100",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT product_name ,  AVG(review_rating) FROM reviews GROUP...\n                                                       ^\n"
    },
    {
      "NL": "Retrieve the average total price of all order items shipped to customers in the state of New York, along with the count of such orders.",
      "Expected": "SELECT AVG(oi.total_price) AS average_total_price, COUNT(oi.order_id) AS order_count FROM order_items oi JOIN shipping s ON oi.order_id = s.fk_order_id WHERE s.shipping_state = 'New York';",
      "Actual": "SELECT AVG(total_price) ,  COUNT(*) FROM orders JOIN order_items ON orders.id = order_items.order_id JOIN customers ON orders.customer_id = customers.id WHERE customers.state = 'New York';",
      "Expected_Error": null,
      "Actual_Error": "column orders.id does not exist\nLINE 1: ...rice) ,  COUNT(*) FROM orders JOIN order_items ON orders.id ...\n                                                             ^\n"
    },
    {
      "NL": "Calculate the total refund amount for each product that was part of a campaign and identify the campaign name and type for each product.",
      "Expected": "SELECT r.fk_product_id, c.campaign_name, c.campaign_type, SUM(r.refund_amount) AS total_refund_amount FROM refunds_returns r JOIN campaigns c ON r.request_date BETWEEN c.start_date AND c.end_date GROUP BY r.fk_product_id, c.campaign_name, c.campaign_type;",
      "Actual": "SELECT T1.product_id, T1.name, T2.campaign_name, T2.campaign_type, SUM(T3.refund_amount) AS total_refund FROM products AS T1 INNER JOIN campaign_products AS T2 ON T1.product_id = T2.product_id INNER JOIN refunds AS T3 ON T2.refund_id = T3.refund_id GROUP BY T1.product_id, T2.campaign_name, T2.campaign_type",
      "Expected_Error": null,
      "Actual_Error": "relation \"campaign_products\" does not exist\nLINE 1: ...t) AS total_refund FROM products AS T1 INNER JOIN campaign_p...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the last restock date and the primary contact person name for suppliers who have supplied products with a purchase price greater than 100.",
      "Expected": "SELECT i.last_restock_date, s.primary_contact_person_name FROM inventory i JOIN suppliers s ON i.supplier_id = s.supplier_unique_identifier WHERE i.purchase_price > 100;",
      "Actual": "SELECT T2.restock_date, T1.name FROM suppliers AS T1 INNER JOIN supplier_products AS T2 ON T1.id = T2.supplier_id WHERE T2.purchase_price > 100 ORDER BY T2.restock_date DESC LIMIT 1",
      "Expected_Error": null,
      "Actual_Error": "relation \"supplier_products\" does not exist\nLINE 1: ...ock_date, T1.name FROM suppliers AS T1 INNER JOIN supplier_p...\n                                                             ^\n"
    },
    {
      "NL": "Find the email open rate, campaign name, and shipping cost for each campaign, along with the estimated delivery date and shipping address of the corresponding shipping order.",
      "Expected": "SELECT T1.email_open_rate, T1.campaign_name, T2.shipping_cost, T2.estimated_delivery, T2.shipping_address FROM campaigns T1 INNER JOIN shipping T2 ON T1.campaign_id = T2.fk_order_id",
      "Actual": "SELECT T1.email_open_rate, T1.campaign_name, T1.shipping_cost, T2.estimated_delivery_date, T2.shipping_address FROM campaign_stats AS T1 INNER JOIN shipping_orders AS T2 ON T1.campaign_id = T2.campaign_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"campaign_stats\" does not exist\nLINE 1: ...estimated_delivery_date, T2.shipping_address FROM campaign_s...\n                                                             ^\n"
    },
    {
      "NL": "What is the total amount for orders and the corresponding order item id where payment status is paid?",
      "Expected": "SELECT T1.total_amount, T2.order_item_id FROM orders AS T1 INNER JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.payment_status = 'paid'",
      "Actual": "SELECT SUM(total_amount) ,  i.order_item_id FROM orders o JOIN order_items i ON o.order_id = i.order_id WHERE o.payment_status = 'paid'",
      "Expected_Error": null,
      "Actual_Error": "column \"i.order_item_id\" must appear in the GROUP BY clause or be used in an aggregate function\nLINE 1: SELECT SUM(total_amount) ,  i.order_item_id FROM orders o JO...\n                                    ^\n"
    },
    {
      "NL": "Find the total final billed amount for all transactions that occurred in the year 2022 and had a refund initiated.",
      "Expected": "SELECT SUM(final_billed_amount) FROM transactions_and_payments WHERE EXTRACT(YEAR FROM transaction_date_and_time) = 2022 AND refund_status = TRUE;",
      "Actual": "SELECT SUM(t.final_billed_amount) FROM transactions t WHERE EXTRACT(YEAR FROM t.transaction_date) = 2022 AND t.refund_initiated = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT SUM(t.final_billed_amount) FROM transactions t WHERE ...\n                                               ^\n"
    },
    {
      "NL": "Retrieve the customer details of all premium users who have an active subscription and have made more than 10 orders.",
      "Expected": "SELECT * FROM customerinfo WHERE person_is_premium = true AND account_has_active_subscription = true AND preferences_total_orders > 10;",
      "Actual": "SELECT * FROM customers WHERE subscription_status = 'premium' AND orders_count > 10",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT * FROM customers WHERE subscription_status = 'premium...\n                      ^\n"
    },
    {
      "NL": "Find all customers who have at least one item in their wishlist and have an active subscription, along with the estimated delivery date of their shipments.",
      "Expected": "SELECT c.person_first_name, c.person_last_name, w.expected_purchase_date, s.estimated_delivery FROM customerinfo c JOIN wishlist w ON c.person_customer_id = w.fk_user_id JOIN shipping s ON c.person_customer_id = s.fk_order_id WHERE c.account_has_active_subscription = TRUE AND w.wishlist_status = 'active'",
      "Actual": "SELECT c.*, SUM(wl.shipment_date - w.delivery_date) AS estimated_delivery_time FROM customers c LEFT JOIN wishlist_items wi ON c.customer_id = wi.customer_id LEFT JOIN wishlist w ON wi.wishlist_id = w.wishlist_id LEFT JOIN shipments s ON w.shipment_id = s.shipment_id WHERE c.subscription_status = 'active' GROUP BY c.customer_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ... w.delivery_date) AS estimated_delivery_time FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "What is the average star rating given by customers who have made more than 5 previous purchases?",
      "Expected": "SELECT AVG(submitted_review_star_rating) FROM product_reviews_and_ratings WHERE previous_product_purchases_count > 5",
      "Actual": "SELECT AVG(star_rating) FROM customers WHERE id IN (SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(*) > 5)",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT AVG(star_rating) FROM customers WHERE id IN (SELECT c...\n                                     ^\n"
    },
    {
      "NL": "Find the official supplier business name, registered business address, and primary contact person name for each supplier who has supplied products to a customer who has placed an order, returned or requested a refund on a product that was added to their wishlist during the last 6 months, and also find the campaign name for each campaign that has a budget greater than the average spent for each campaign, the campaign start date, and the campaign end date.",
      "Expected": "SELECT T4.official_supplier_business_name, T4.registered_business_address, T4.primary_contact_person_name, T7.campaign_name, T7.start_date, T7.end_date FROM wishlist AS T1 INNER JOIN cart AS T2 ON T1.fk_user_id = T2.fk_user_id INNER JOIN refunds_returns AS T3 ON T2.id = T3.fk_order_id INNER JOIN suppliers AS T4 ON T4.supplier_unique_identifier = T3.fk_product_id INNER JOIN campaigns AS T7 ON T7.total_reach > ( SELECT AVG(T6.actual_spent) FROM campaigns AS T6 ) WHERE T1.added_at > NOW() - INTERVAL '6 month'",
      "Actual": "SELECT T1.supplier_name, T1.registered_business_address, T1.primary_contact_person_name, T2.campaign_name, T2.budget, T2.start_date, T2.end_date FROM supplier AS T1 INNER JOIN order_item AS T2 ON T1.supplier_id = T2.supplier_id INNER JOIN order AS T3 ON T2.order_id = T3.order_id INNER JOIN wishlist AS T4 ON T3.order_id = T4.order_id WHERE T4.requested_refund OR T4.returned_product OR T4.wishlist_date BETWEEN NOW() - INTERVAL '6 months' AND NOW()",
      "Expected_Error": null,
      "Actual_Error": "syntax error at or near \"order\"\nLINE 1: ... T2 ON T1.supplier_id = T2.supplier_id INNER JOIN order AS T...\n                                                             ^\n"
    },
    {
      "NL": "Identify the top 10 suppliers with the highest average supplier rating, and list the total number of products they have supplied, the total quantity of their products in the inventory, and the average purchase price of their products. Also, find the average rating of the reviews for their products and the total number of reviews for their products. Filter the results to only include suppliers who have supplied products with a shelf life of more than 30 days.",
      "Expected": "SELECT s.supplier_unique_identifier, AVG(s.average_supplier_rating) AS average_rating, SUM(i.quantity) AS total_quantity, AVG(i.purchase_price) AS average_purchase_price, AVG(pr.submitted_review_star_rating) AS average_review_rating, COUNT(pr.review_unique_identifier) AS total_reviews FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id JOIN product_reviews_and_ratings pr ON i.referenced_product_id = pr.referenced_product_identifier WHERE i.shelf_life > 30 GROUP BY s.supplier_unique_identifier ORDER BY AVG(s.average_supplier_rating) DESC LIMIT 10",
      "Actual": "SELECT supplier_id, COUNT(DISTINCT product_id) AS total_products, SUM(quantity) AS total_quantity, AVG(purchase_price) AS avg_purchase_price, AVG(rating) AS avg_rating, COUNT(rating) AS total_reviews FROM supplier_product SP JOIN product P ON SP.product_id = P.product_id JOIN product_review PR ON P.product_id = PR.product_id JOIN review R ON PR.review_id = R.review_id WHERE shelf_life > 30 GROUP BY supplier_id ORDER BY avg_rating DESC LIMIT 10;",
      "Expected_Error": null,
      "Actual_Error": "relation \"supplier_product\" does not exist\nLINE 1: ...S avg_rating, COUNT(rating) AS total_reviews FROM supplier_p...\n                                                             ^\n"
    },
    {
      "NL": "Find the total billed amount for all transactions initiated by customers from a specific country, say 'USA', who made a payment using a digital wallet.",
      "Expected": "SELECT SUM(t.final_billed_amount) FROM transactions_and_payments t JOIN refunds_returns r ON t.transaction_unique_identifier = r.fk_order_id WHERE t.billing_address_country = 'USA' AND t.digital_wallet_used IS NOT NULL;",
      "Actual": "SELECT SUM(t.total_amount) FROM transactions t JOIN customers c ON t.customer_id = c.id JOIN payments p ON t.id = p.transaction_id JOIN countries co ON c.country_id = co.id WHERE co.name = 'USA' AND p.payment_method = 'digital wallet';",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT SUM(t.total_amount) FROM transactions t JOIN customer...\n                                        ^\n"
    },
    {
      "NL": "Find the total revenue generated from campaigns that used the discount code 'SUMMER2023'.",
      "Expected": "SELECT SUM(revenue_generated) FROM campaigns WHERE discount_code = 'SUMMER2023'",
      "Actual": "SELECT SUM(total_revenue) FROM campaigns WHERE discount_code = 'SUMMER2023';",
      "Expected_Error": null,
      "Actual_Error": "column \"total_revenue\" does not exist\nLINE 1: SELECT SUM(total_revenue) FROM campaigns WHERE discount_code...\n                   ^\n"
    },
    {
      "NL": "Find all refund requests that were processed within the last 30 days and were made for products supplied by 'TechGiants Inc.'.",
      "Expected": "SELECT rr.* FROM refunds_returns rr JOIN products p ON rr.fk_product_id = p.unique_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE rr.processed_date >= NOW() - INTERVAL '30 days' AND s.official_supplier_business_name = 'TechGiants Inc.';",
      "Actual": "SELECT * FROM refund_requests WHERE created_at >= NOW() - INTERVAL '30 days' AND supplier = 'TechGiants Inc.'",
      "Expected_Error": null,
      "Actual_Error": "relation \"refund_requests\" does not exist\nLINE 1: SELECT * FROM refund_requests WHERE created_at >= NOW() - IN...\n                      ^\n"
    },
    {
      "NL": "Find all customers who have shopped at least once, have a loyalty membership, and have provided feedback with an engagement score greater than 0.5. Also, list the average rating of the products they have reviewed, the total loyalty points they have accumulated, and the number of times they have edited their reviews. Filter the results to only include customers who are eligible for special promotions and have a loyalty tier level of 'Gold' or higher.",
      "Expected": "SELECT c.associated_customer_reference_id, AVG(pr.submitted_review_star_rating) AS average_rating, SUM(c.accumulated_loyalty_points_balance) AS total_loyalty_points, SUM(pr.total_number_of_edits_made) AS total_edits FROM customers_loyalty_program c JOIN product_reviews_and_ratings pr ON c.associated_customer_reference_id = pr.reviewing_customer_identifier WHERE c.eligible_for_special_promotions = TRUE AND c.loyalty_program_tier_level IN ('Gold', 'Platinum') AND c.customer_feedback_engagement_score > 0.5 AND pr.user_has_edited_review = TRUE GROUP BY c.associated_customer_reference_id",
      "Actual": "SELECT AVG(r.rating), SUM(c.loyalty_points), COUNT(c.review_edit_count) FROM customers c JOIN reviews r ON c.customer_id = r.customer_id JOIN loyalty_memberships lm ON c.customer_id = lm.customer_id JOIN promotions p ON c.customer_id = p.customer_id WHERE lm.loyalty_tier_level >= 'Gold' AND r.engagement_score > 0.5 AND c.customer_id IN (SELECT customer_id FROM reviews WHERE review_id IN (SELECT review_id FROM reviews WHERE engagement_score > 0.5))",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ....loyalty_points), COUNT(c.review_edit_count) FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Get the total number of products supplied, average supplier rating, primary contact person name, and primary contact email address for each supplier who has not supplied any products to a customer who has placed an order and also has not supplied any products to a customer who has returned or requested a refund on a product that was added to their wishlist during the last 6 months, and also find the campaign name for each campaign that has a budget greater than the average spent for each campaign, the campaign start date, and the campaign end date.",
      "Expected": "SELECT T2.total_number_of_products_supplied, T2.average_supplier_rating, T2.primary_contact_person_name, T2.primary_contact_email_address, T6.campaign_name, T6.start_date, T6.end_date FROM cart AS T1 INNER JOIN suppliers AS T2 ON T2.supplier_unique_identifier NOT IN ( SELECT T3.fk_product_id FROM cart AS T3 WHERE T3.fk_user_id IN ( SELECT T4.fk_user_id FROM wishlist AS T4 WHERE T4.added_at > NOW() - INTERVAL '6 month' ) OR T3.id IN ( SELECT T5.fk_order_id FROM refunds_returns AS T5 ) ) INNER JOIN campaigns AS T6 ON T6.total_reach > ( SELECT AVG(T7.actual_spent) FROM campaigns AS T7 ) WHERE T1.id ISNULL",
      "Actual": "SELECT COUNT(DISTINCT s.id) AS total_products, AVG(r.rating) AS avg_rating, p.name AS primary_contact, p.email AS primary_contact_email, c.name AS campaign_name, c.start_date, c.end_date FROM suppliers s JOIN orders o ON s.id = o.supplier_id JOIN products p ON s.id = p.supplier_id JOIN ratings r ON p.id = r.product_id JOIN customers c ON o.customer_id = c.id WHERE o.order_date > NOW() - INTERVAL '6 months' AND r.rating IS NULL AND c.wishlist_id IS NULL GROUP BY s.id, c.name, c.start_date, c.end_date HAVING COUNT(DISTINCT o.id) = COUNT(DISTINCT p.id)",
      "Expected_Error": null,
      "Actual_Error": "column s.id does not exist\nLINE 1: ...ate, c.end_date FROM suppliers s JOIN orders o ON s.id = o.s...\n                                                             ^\n"
    },
    {
      "NL": "Find the total transaction amount and the average final billed amount for each order status from the transactions_and_payments and orders tables, excluding fraudulent transactions.",
      "Expected": "SELECT o.order_status, SUM(t.total_transaction_amount) AS total_transaction_amount, AVG(t.final_billed_amount) AS average_final_billed_amount FROM transactions_and_payments t JOIN orders o ON t.linked_order_reference_identifier = o.order_id WHERE t.is_transaction_fraudulent = FALSE GROUP BY o.order_status;",
      "Actual": "SELECT SUM(t.amount) AS total_amount, AVG(o.final_billed_amount) AS avg_final_billed_amount, o.status FROM transactions_and_payments t JOIN orders o ON t.order_id = o.id WHERE t.is_fraudulent = FALSE GROUP BY o.status",
      "Expected_Error": null,
      "Actual_Error": "column t.order_id does not exist\nLINE 1: ...FROM transactions_and_payments t JOIN orders o ON t.order_id...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"o.order_id\".\n"
    },
    {
      "NL": "Find the average transaction amount for each customer who has placed at least one transaction and also has orders in their cart, excluding those who have not logged in for more than a year.",
      "Expected": "SELECT ci.person_first_name, ci.person_last_name, AVG(tp.total_transaction_amount) AS average_transaction_amount FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier JOIN cart c ON ci.person_customer_id = c.fk_user_id WHERE ci.person_last_login > NOW() - INTERVAL '1 year' GROUP BY ci.person_first_name, ci.person_last_name",
      "Actual": "SELECT AVG(t.amount) FROM customers c JOIN orders o ON c.id = o.customer_id JOIN transactions t ON o.id = t.order_id WHERE c.login_date > NOW() - INTERVAL '1 year'",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT AVG(t.amount) FROM customers c JOIN orders o ON c.id ...\n                                  ^\n"
    },
    {
      "NL": "Find the total number of orders made by customers who have given 5-star reviews and have purchased a product at least twice, along with the total amount spent by these customers and the average sentiment analysis score of their reviews",
      "Expected": "SELECT COUNT(T1.order_id) AS total_orders, SUM(T1.total_amount) AS total_amount_spent, AVG(T2.sentiment_analysis_score) AS avg_sentiment_score FROM orders AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier WHERE T2.submitted_review_star_rating = 5 AND T2.previous_product_purchases_count >= 2",
      "Actual": "SELECT COUNT(DISTINCT o.customer_id) ,  SUM(o.total_amount) ,  AVG(r.sentiment_score) FROM orders o JOIN reviews r ON o.customer_id = r.customer_id WHERE r.sentiment_score = 5 AND o.order_id IN (SELECT order_id FROM orders GROUP BY order_id HAVING COUNT(order_id) > 1);",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ...unt) ,  AVG(r.sentiment_score) FROM orders o JOIN reviews r ...\n                                                             ^\n"
    },
    {
      "NL": "Find the campaign id and total reach of all campaigns with a budget greater than $1000.",
      "Expected": "SELECT campaign_id, total_reach FROM campaigns WHERE budget > 1000",
      "Actual": "SELECT campaign_id, SUM(reach) FROM campaigns WHERE budget > 1000 GROUP BY campaign_id",
      "Expected_Error": null,
      "Actual_Error": "column \"reach\" does not exist\nLINE 1: SELECT campaign_id, SUM(reach) FROM campaigns WHERE budget >...\n                                ^\n"
    },
    {
      "NL": "What is the count of customers with free shipping eligibility set to true?",
      "Expected": "SELECT COUNT(*) FROM customers_loyalty_program WHERE free_shipping_eligibility = TRUE",
      "Actual": "SELECT COUNT(*) FROM customers WHERE free_shipping = TRUE;",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers WHERE free_shipping = TRUE;\n                             ^\n"
    },
    {
      "NL": "Find the customer birthday special discount status and the total discount amount redeemed for customers who have placed orders with a total amount greater than $50 and have a loyalty program tier level of 'Gold', including the product name and quantity of each order item, and the total transaction amount, grouped by the customer reference ID?",
      "Expected": "SELECT clpm.customer_birthday_special_discount, SUM(clpm.total_discount_amount_redeemed) AS total_discount_amount_redeemed, oi.product_name, oi.quantity, tap.total_transaction_amount FROM customers_loyalty_program AS clpm INNER JOIN orders AS o ON clpm.associated_customer_reference_id = o.person_customer_id INNER JOIN order_items AS oi ON o.order_id = oi.order_id INNER JOIN transactions_and_payments AS tap ON o.order_id = tap.linked_order_reference_identifier WHERE o.total_amount > 50 AND clpm.loyalty_program_tier_level = 'Gold' GROUP BY clpm.associated_customer_reference_id, clpm.customer_birthday_special_discount, oi.product_name, oi.quantity, tap.total_transaction_amount",
      "Actual": "SELECT T1.customer_reference_id, T1.birthday_special_discount_status, SUM(T2.total_amount) AS total_discount_amount, T3.product_name, T3.quantity, T4.total_transaction_amount FROM customer AS T1 INNER JOIN order_item AS T2 ON T1.customer_reference_id = T2.customer_reference_id INNER JOIN order AS T3 ON T2.order_id = T3.order_id INNER JOIN transaction AS T4 ON T3.order_id = T4.order_id WHERE T1.loyalty_program_tier_level = 'Gold' AND T2.total_amount > 50 GROUP BY T1.customer_reference_id",
      "Expected_Error": null,
      "Actual_Error": "syntax error at or near \"order\"\nLINE 1: ...eference_id = T2.customer_reference_id INNER JOIN order AS T...\n                                                             ^\n"
    },
    {
      "NL": "Find the average annual loyalty spending threshold for customers who have participated in exclusive beta testing and have a higher total reach than the average total reach of all campaigns.",
      "Expected": "SELECT AVG(T1.annual_loyalty_spending_threshold) FROM customers_loyalty_program AS T1 INNER JOIN campaigns AS T2 ON T1.associated_customer_reference_id = T2.campaign_id WHERE T1.participation_in_exclusive_beta_testing = TRUE AND T2.total_reach > (SELECT AVG(total_reach) FROM campaigns)",
      "Actual": "SELECT AVG(loyalty_spending_threshold) FROM customers WHERE beta_testing = TRUE AND total_reach > (SELECT AVG(total_reach) FROM campaigns)",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT AVG(loyalty_spending_threshold) FROM customers WHERE ...\n                                                    ^\n"
    },
    {
      "NL": "What are the product names and average ratings of products with more than 5 reviews in the wishlist?",
      "Expected": "SELECT T2.product_name, AVG(T1.submitted_review_star_rating) FROM product_reviews_and_ratings AS T1 INNER JOIN wishlist AS T2 ON T1.referenced_product_identifier = T2.fk_product_id GROUP BY T2.product_name HAVING COUNT(T1.review_unique_identifier) > 5",
      "Actual": "SELECT T1.name, AVG(T2.rating) FROM products AS T1 INNER JOIN wishlist AS T2 ON T1.id = T2.product_id GROUP BY T1.id HAVING COUNT(T2.review_id) > 5",
      "Expected_Error": null,
      "Actual_Error": "column t1.id does not exist\nLINE 1: ... FROM products AS T1 INNER JOIN wishlist AS T2 ON T1.id = T2...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t2.id\".\n"
    },
    {
      "NL": "What are the product names and the total price of each order item for all the orders with the campaign name 'Campaign X'?",
      "Expected": "SELECT T3.product_name, T3.total_price FROM campaigns AS T1 INNER JOIN orders AS T2 ON T1.campaign_id = T2.campaign_id INNER JOIN order_items AS T3 ON T2.order_id = T3.order_id WHERE T1.campaign_name = 'Campaign X'",
      "Actual": "SELECT T1.product_name, SUM(T2.price * T2.quantity) FROM orders AS T1 INNER JOIN order_items AS T2 ON T1.id = T2.order_id WHERE T1.campaign_name = 'Campaign X' GROUP BY T1.product_name",
      "Expected_Error": null,
      "Actual_Error": "column t1.id does not exist\nLINE 1: ...FROM orders AS T1 INNER JOIN order_items AS T2 ON T1.id = T2...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the total number of loyalty points earned by each customer who has participated in the exclusive beta testing program.",
      "Expected": "SELECT associated_customer_reference_id, SUM(lifetime_loyalty_points_earned) AS total_loyalty_points FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = true GROUP BY associated_customer_reference_id;",
      "Actual": "SELECT COUNT(*) ,  customer_id FROM beta_testers GROUP BY customer_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"beta_testers\" does not exist\nLINE 1: SELECT COUNT(*) ,  customer_id FROM beta_testers GROUP BY cu...\n                                            ^\n"
    },
    {
      "NL": "Find the total shipping cost for each order that has an estimated delivery date later than January 1, 2023, and list the results sorted by the shipping cost in descending order.",
      "Expected": "SELECT fk_order_id, SUM(shipping_cost) AS total_shipping_cost FROM shipping WHERE estimated_delivery > '2023-01-01' GROUP BY fk_order_id ORDER BY total_shipping_cost DESC;",
      "Actual": "SELECT SUM(s.shipping_cost) FROM orders o JOIN shipments s ON o.id = s.order_id WHERE o.estimated_delivery_date > '2023-01-01' GROUP BY o.id ORDER BY SUM(s.shipping_cost) DESC",
      "Expected_Error": null,
      "Actual_Error": "relation \"shipments\" does not exist\nLINE 1: SELECT SUM(s.shipping_cost) FROM orders o JOIN shipments s O...\n                                                       ^\n"
    },
    {
      "NL": "What is the average review rating of products with a retail price higher than 500 and a minimum threshold for restocking higher than 50, and what is the average textual review feedback length of these reviews?",
      "Expected": "SELECT AVG(T1.submitted_review_star_rating), AVG(T1.length_of_review_in_characters) FROM product_reviews_and_ratings AS T1 INNER JOIN products AS T2 ON T1.referenced_product_identifier = T2.unique_product_identifier WHERE T2.standard_retail_price_including_tax > 500 AND T2.minimum_threshold_for_restocking > 50",
      "Actual": "SELECT AVG(rating) AS avg_rating, AVG(LENGTH(review)) AS avg_review_length FROM reviews WHERE retail_price > 500 AND restocking_threshold > 50",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ...ng, AVG(LENGTH(review)) AS avg_review_length FROM reviews WH...\n                                                             ^\n"
    },
    {
      "NL": "Get the average loyalty points of customers who have made at least one order",
      "Expected": "SELECT AVG(T1.person_loyalty_points) FROM customerinfo AS T1 INNER JOIN wishlist AS T2 ON T1.person_customer_id = T2.fk_user_id INNER JOIN order_items AS T3 ON T2.fk_product_id = T3.product_id GROUP BY T1.person_loyalty_points",
      "Actual": "SELECT AVG(loyalty_points) FROM customers WHERE id IN (SELECT customer_id FROM orders)",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT AVG(loyalty_points) FROM customers WHERE id IN (SELEC...\n                                        ^\n"
    },
    {
      "NL": "Find the total amount of all orders placed and the corresponding final billed amount for transactions where the first time customer transaction flag is true.",
      "Expected": "SELECT SUM(o.total_amount) as total_order_amount, SUM(t.final_billed_amount) as total_final_billed_amount FROM orders o JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE t.first_time_customer_transaction = true;",
      "Actual": "SELECT SUM(total_amount) AS total_amount, SUM(billed_amount) AS final_billed_amount FROM orders WHERE first_time_customer = TRUE",
      "Expected_Error": null,
      "Actual_Error": "column \"billed_amount\" does not exist\nLINE 1: SELECT SUM(total_amount) AS total_amount, SUM(billed_amount)...\n                                                      ^\n"
    },
    {
      "NL": "List the campaign names and the number of customers who have made a purchase through each campaign in the last 60 days.",
      "Expected": "SELECT c.campaign_name, COUNT(DISTINCT t.corresponding_customer_reference_identifier) FROM campaigns c JOIN transactions_and_payments t ON c.campaign_id = t.linked_order_reference_identifier WHERE t.transaction_date_and_time > NOW() - INTERVAL '60 day' GROUP BY c.campaign_name",
      "Actual": "SELECT campaign_name, COUNT(*) FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.order_date >= NOW() - INTERVAL '60 days' GROUP BY campaign_name",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT campaign_name, COUNT(*) FROM customers JOIN orders ON...\n                                            ^\n"
    },
    {
      "NL": "Find the total number of customers who are premium members and have made at least one order in the last year, along with the average time spent on the site.",
      "Expected": "SELECT COUNT(DISTINCT ci.person_customer_id), AVG(e.time_spent_seconds) AS avg_time_spent_seconds FROM customerinfo ci JOIN events e ON ci.person_customer_id = e.person_customer_id WHERE ci.person_is_premium = TRUE AND e.event_timestamp >= NOW() - INTERVAL '1 year' AND e.event_type = 'order';",
      "Actual": "SELECT COUNT(DISTINCT c.customer_id) AS premium_customers, AVG(o.order_time) AS avg_time_spent FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_time >= NOW() - INTERVAL '1 year' AND c.premium_member = TRUE;",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...stomers, AVG(o.order_time) AS avg_time_spent FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total amount spent by customers who have made more than one transaction.",
      "Expected": "SELECT T2.corresponding_customer_reference_identifier, SUM(T1.total_amount) FROM orders AS T1 INNER JOIN transactions_and_payments AS T2 ON T1.order_id = T2.linked_order_reference_identifier GROUP BY T2.corresponding_customer_reference_identifier HAVING COUNT(T1.order_id) > 1",
      "Actual": "SELECT SUM(t2.amount) FROM customers AS t1 JOIN transactions AS t2 ON t1.customer_id = t2.customer_id GROUP BY t1.customer_id HAVING COUNT(t2.transaction_id) > 1",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT SUM(t2.amount) FROM customers AS t1 JOIN transactions...\n                                   ^\n"
    },
    {
      "NL": "Find the total revenue generated from all campaigns that ended after January 1, 2023.",
      "Expected": "SELECT SUM(revenue_generated) FROM campaigns WHERE end_date > '2023-01-01'",
      "Actual": "SELECT SUM(campaign_revenue) FROM campaigns WHERE end_date > '2023-01-01'",
      "Expected_Error": null,
      "Actual_Error": "column \"campaign_revenue\" does not exist\nLINE 1: SELECT SUM(campaign_revenue) FROM campaigns WHERE end_date >...\n                   ^\n"
    },
    {
      "NL": "Find the customers who have purchased products with an average rating greater than 4 and get the product name and rating for each of them.",
      "Expected": "SELECT T3.person_first_name, T3.person_last_name, T1.product_display_name, T1.aggregate_customer_review_rating FROM products AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.unique_product_identifier = T2.referenced_product_identifier INNER JOIN customerinfo AS T3 ON T2.reviewing_customer_identifier = T3.person_customer_id WHERE T1.aggregate_customer_review_rating > 4",
      "Actual": "SELECT c.customer_name, p.product_name, AVG(p.rating) FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN products p ON o.product_id = p.product_id GROUP BY c.customer_name HAVING AVG(p.rating) > 4",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...customer_name, p.product_name, AVG(p.rating) FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "List the customers who have ordered items with a warranty period of more than 2 years.",
      "Expected": "SELECT T1.person_first_name, T1.person_last_name FROM customerinfo AS T1 INNER JOIN order_items AS T2 ON T1.person_customer_id = T2.order_id WHERE T2.warranty_period > 730",
      "Actual": "SELECT DISTINCT c.* FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE p.warranty_period > 2",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT DISTINCT c.* FROM customers c JOIN orders o ON c.cust...\n                                 ^\n"
    },
    {
      "NL": "Find all transactions where the customer has not previously made a purchase and the order was shipped to a billing address in the same city as the shipping address.",
      "Expected": "SELECT t.* FROM transactions_and_payments t JOIN cart c ON t.linked_order_reference_identifier = c.id WHERE t.first_time_customer_transaction = TRUE AND t.billing_address_city = t.shipping_address_city",
      "Actual": "SELECT * FROM transactions WHERE customer_id NOT IN (SELECT customer_id FROM orders) AND billing_city = shipping_city",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT * FROM transactions WHERE customer_id NOT IN (SELECT ...\n                      ^\n"
    },
    {
      "NL": "What is the total amount spent by customers who have accumulated more than 1000 loyalty points and have placed orders with a total amount greater than $100, including the total discount applied and the tax amount, grouped by the loyalty program tier level?",
      "Expected": "SELECT SUM(o.total_amount) AS total_amount, clpm.loyalty_program_tier_level FROM customers_loyalty_program AS clpm INNER JOIN orders AS o ON clpm.associated_customer_reference_id = o.person_customer_id WHERE clpm.accumulated_loyalty_points_balance > 1000 AND o.total_amount > 100 GROUP BY clpm.loyalty_program_tier_level",
      "Actual": "SELECT SUM(total_amount - discount_amount + tax_amount) ,  loyalty_program_tier_level FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE customers.loyalty_points > 1000 AND SUM(orders.total_amount) > 100 GROUP BY loyalty_program_tier_level",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ... + tax_amount) ,  loyalty_program_tier_level FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the average star rating of reviews for products with a net weight greater than 1 kilogram.",
      "Expected": "SELECT AVG(T1.submitted_review_star_rating) FROM product_reviews_and_ratings AS T1 INNER JOIN products AS T2 ON T1.referenced_product_identifier = T2.unique_product_identifier WHERE T2.net_weight_in_kilograms > 1",
      "Actual": "SELECT AVG(r.rating) FROM reviews r JOIN products p ON r.product_id = p.id WHERE p.net_weight > 1",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT AVG(r.rating) FROM reviews r JOIN products p ON r.pro...\n                                  ^\n"
    },
    {
      "NL": "Find the average rating of suppliers that have supplied more than 100 products.",
      "Expected": "SELECT AVG(average_supplier_rating) AS average_rating FROM suppliers WHERE total_number_of_products_supplied > 100;",
      "Actual": "SELECT AVG(rating) FROM suppliers WHERE id IN (SELECT supplier_id FROM orders GROUP BY supplier_id HAVING COUNT(*) > 100)",
      "Expected_Error": null,
      "Actual_Error": "column \"rating\" does not exist\nLINE 1: SELECT AVG(rating) FROM suppliers WHERE id IN (SELECT suppli...\n                   ^\n"
    },
    {
      "NL": "Get all wishlist items for users who have placed orders with a payment status of 'paid' and order status of 'delivered' and also get the shipping details of those orders.",
      "Expected": "SELECT w.*, s.* FROM wishlist w JOIN orders o ON w.fk_user_id = o.person_customer_id JOIN shipping s ON o.order_id = s.fk_order_id WHERE o.payment_status = 'paid' AND o.order_status = 'delivered'",
      "Actual": "SELECT w.id, w.user_id, w.item_id, w.quantity, o.payment_status, o.order_status, s.shipping_address, s.shipping_city, s.shipping_state, s.shipping_zip, s.shipping_country FROM wishlist w JOIN orders o ON w.user_id = o.user_id JOIN shipping s ON o.id = s.order_id WHERE o.payment_status = 'paid' AND o.order_status = 'delivered'",
      "Expected_Error": null,
      "Actual_Error": "column w.user_id does not exist\nLINE 1: ...shipping_country FROM wishlist w JOIN orders o ON w.user_id ...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"w.fk_user_id\".\n"
    },
    {
      "NL": "Which customers have accumulated more than 1000 loyalty points and are eligible for free shipping?",
      "Expected": "SELECT associated_customer_reference_id FROM customers_loyalty_program WHERE accumulated_loyalty_points_balance > 1000 AND free_shipping_eligibility = TRUE",
      "Actual": "SELECT * FROM customers WHERE points > 1000 AND shipping_eligible = true",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT * FROM customers WHERE points > 1000 AND shipping_eli...\n                      ^\n"
    },
    {
      "NL": "Get the average time spent per session and the average cart value for sessions where the email was opened and a push notification was clicked.",
      "Expected": "SELECT AVG(time_spent_seconds) AS average_time_spent, AVG(cart_value) AS average_cart_value FROM events WHERE email_opened = true AND push_notification_clicked = true;",
      "Actual": "SELECT AVG(T2.time_spent) AS avg_time_spent, AVG(T1.cart_value) AS avg_cart_value FROM sessions AS T1 INNER JOIN session_actions AS T2 ON T1.id = T2.session_id WHERE T1.email_opened = TRUE AND T2.push_notification_clicked = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"sessions\" does not exist\nLINE 1: ..._spent, AVG(T1.cart_value) AS avg_cart_value FROM sessions A...\n                                                             ^\n"
    },
    {
      "NL": "Find the total revenue generated by each campaign along with the total number of transactions made during the campaign's active period.",
      "Expected": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, COUNT(t.transaction_unique_identifier) AS total_transactions FROM campaigns c LEFT JOIN transactions_and_payments t ON t.transaction_date_and_time BETWEEN c.start_date AND c.end_date GROUP BY c.campaign_name;",
      "Actual": "SELECT campaign_id, SUM(revenue) AS total_revenue, COUNT(*) AS total_transactions FROM transactions WHERE active = TRUE GROUP BY campaign_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: ...otal_revenue, COUNT(*) AS total_transactions FROM transactio...\n                                                             ^\n"
    },
    {
      "NL": "Find all the customers who have a total order value greater than $1000, have their newsletter subscription enabled, have a premium account, and have returned at least one product with a restocking fee, and also find the average number of products supplied by the supplier with the highest average supplier rating who is operating in the same country as the customer, and the total shipping cost for all the orders of these customers.",
      "Expected": "SELECT T1.person_customer_id, T1.person_first_name, T1.person_last_name, AVG(T3.total_number_of_products_supplied), SUM(T4.shipping_cost) FROM customerinfo AS T1 INNER JOIN refunds_returns AS T2 ON T1.person_customer_id = T2.fk_user_id INNER JOIN suppliers AS T3 ON T3.supplier_country_of_operation = T1.address_country INNER JOIN shipping AS T4 ON T4.fk_order_id = T2.fk_order_id WHERE T1.preferences_total_orders * T1.preferences_avg_spent_per_order > 1000 AND T1.preferences_newsletter_subscription = TRUE AND T1.person_is_premium = TRUE AND T2.restocking_fee > 0 AND T3.average_supplier_rating = (SELECT MAX(average_supplier_rating) FROM suppliers) GROUP BY T1.person_customer_id, T1.person_first_name, T1.person_last_name",
      "Actual": "SELECT (SUM(oi.total_amount) - SUM(oi.restocking_fee)) AS total_order_value, c.country, c.newsletter_subscription, c.premium_account, COUNT(o.id) AS num_returned_products, s.name AS supplier_name, s.country, s.avg_rating, AVG(oi.quantity) AS avg_products_supplied, SUM(oi.shipping_cost) AS total_shipping_cost FROM customers c JOIN orders o ON c.id = o.customer_id JOIN order_items oi ON o.id = oi.order_id JOIN suppliers s ON oi.supplier_id = s.id WHERE c.newsletter_subscription = 'true' AND c.premium_account = 'true' AND c.country = s.country AND SUM(oi.total_amount) - SUM(oi.restocking_fee) > 1000 GROUP BY c.country, c.newsletter_subscription, c.premium_account, s.name, s.country, s.avg_rating HAVING COUNT(o.id) > 1 ORDER BY s.avg_rating DESC LIMIT 1",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...SUM(oi.shipping_cost) AS total_shipping_cost FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total revenue generated by campaigns that targeted customers who prefer a specific favorite category.",
      "Expected": "SELECT SUM(c.revenue_generated) FROM campaigns c JOIN customerinfo ci ON ci.preferences_favorite_category = c.target_audience;",
      "Actual": "SELECT SUM(c.revenue) FROM campaigns c JOIN customer_preferences cp ON c.customer_id = cp.customer_id JOIN favorite_categories fc ON cp.category_id = fc.id WHERE fc.category_name = 'specific_category_name'",
      "Expected_Error": null,
      "Actual_Error": "relation \"customer_preferences\" does not exist\nLINE 1: SELECT SUM(c.revenue) FROM campaigns c JOIN customer_prefere...\n                                                    ^\n"
    },
    {
      "NL": "Identify the highest and lowest stock levels for products supplied by suppliers who have an average supplier rating of less than 3.5, along with the product's last updated date and the supplier's official business name.",
      "Expected": "SELECT i.referenced_product_id, MIN(i.quantity) AS lowest_stock_level, MAX(i.quantity) AS highest_stock_level, i.last_updated, s.official_supplier_business_name FROM inventory i JOIN suppliers s ON i.supplier_id = s.supplier_unique_identifier WHERE s.average_supplier_rating < 3.5 GROUP BY i.referenced_product_id, i.last_updated, s.official_supplier_business_name",
      "Actual": "SELECT product_id, last_updated, supplier_name, min(stock_level) AS min_stock, max(stock_level) AS max_stock FROM products JOIN suppliers ON products.supplier_id = suppliers.supplier_id WHERE avg_rating < 3.5 GROUP BY product_id, last_updated, supplier_name",
      "Expected_Error": null,
      "Actual_Error": "column products.supplier_id does not exist\nLINE 1: ...vel) AS max_stock FROM products JOIN suppliers ON products.s...\n                                                             ^\n"
    },
    {
      "NL": "What is the average refund amount and status for each return type?",
      "Expected": "SELECT T1.return_type, AVG(T1.refund_amount), T1.status FROM refunds_returns AS T1 INNER JOIN wishlist AS T2 ON T1.fk_product_id = T2.fk_product_id GROUP BY T1.return_type, T1.status",
      "Actual": "SELECT AVG(amount), status, return_type FROM refunds GROUP BY return_type",
      "Expected_Error": null,
      "Actual_Error": "relation \"refunds\" does not exist\nLINE 1: SELECT AVG(amount), status, return_type FROM refunds GROUP B...\n                                                     ^\n"
    },
    {
      "NL": "Find all the transactions where the payment method used is 'visa' and the corresponding customer reference identifier is 12345.",
      "Expected": "SELECT * FROM transactions_and_payments WHERE payment_method_used = 'visa' AND corresponding_customer_reference_identifier = 12345",
      "Actual": "SELECT * FROM transactions WHERE payment_method = 'visa' AND customer_reference = 12345;",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT * FROM transactions WHERE payment_method = 'visa' AND...\n                      ^\n"
    },
    {
      "NL": "Which customers have spent more than $1000 in the last year and have a lifetime loyalty points earned of more than 5000, and also show the average loyalty points balance and the count of orders for these customers, including the top 3 products they have ordered with the highest retail price?",
      "Expected": "SELECT clp.associated_customer_reference_id, AVG(clp.accumulated_loyalty_points_balance), COUNT(o.order_id), p.product_display_name, p.standard_retail_price_including_tax FROM customers_loyalty_program clp JOIN orders o ON clp.associated_customer_reference_id = o.person_customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.unique_product_identifier WHERE o.order_date > NOW() - INTERVAL '1 year' AND o.total_amount > 1000 AND clp.lifetime_loyalty_points_earned > 5000 GROUP BY clp.associated_customer_reference_id, p.product_display_name, p.standard_retail_price_including_tax ORDER BY p.standard_retail_price_including_tax DESC LIMIT 3",
      "Actual": "SELECT c.customer_id, c.customer_name, SUM(o.total_amount) AS total_spent, SUM(lp.loyalty_points) AS total_loyalty, AVG(lp.loyalty_points) AS avg_loyalty, COUNT(o.order_id) AS order_count, o.product_id, p.product_name, p.retail_price FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN loyalty_points lp ON c.customer_id = lp.customer_id JOIN products p ON o.product_id = p.product_id WHERE o.order_date >= NOW() - INTERVAL '1 year' AND lp.loyalty_points > 5000 GROUP BY c.customer_id, c.customer_name, o.product_id, p.product_name, p.retail_price ORDER BY SUM(o.total_amount) DESC LIMIT 3",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...o.product_id, p.product_name, p.retail_price FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the number of orders and total amount of all orders for each shipping state that have a discount applied.",
      "Expected": "SELECT COUNT(order_id), SUM(total_amount), shipping_address_state FROM orders WHERE discount_applied IS NOT NULL GROUP BY shipping_address_state",
      "Actual": "SELECT COUNT(*) ,  SUM(total_amount) ,  COUNT(*) AS num_orders ,  SUM(total_amount) AS total_amount FROM orders WHERE discount IS NOT NULL GROUP BY shipping_state",
      "Expected_Error": null,
      "Actual_Error": "column \"discount\" does not exist\nLINE 1: ...M(total_amount) AS total_amount FROM orders WHERE discount I...\n                                                             ^\n"
    },
    {
      "NL": "Find all the carts where the total price is greater than 50 and the cart status is 'active'.",
      "Expected": "SELECT * FROM cart WHERE total_price > 50 AND cart_status = 'active'",
      "Actual": "SELECT * FROM carts WHERE total_price > 50 AND status = 'active';",
      "Expected_Error": null,
      "Actual_Error": "relation \"carts\" does not exist\nLINE 1: SELECT * FROM carts WHERE total_price > 50 AND status = 'act...\n                      ^\n"
    },
    {
      "NL": "What is the total amount spent by customers who have accumulated more than 1000 loyalty points, have a loyalty program tier level of 'gold', have not had any chargeback requests, have made a payment using the same billing and shipping address, have purchased at least one item with a price per unit greater than $50, and have a customer feedback engagement score greater than 4, and what is the average number of loyalty points earned by these customers, considering only orders with a total amount greater than $500 and a delivery date within the last 3 months?",
      "Expected": "SELECT SUM(O.total_amount), AVG(C.accumulated_loyalty_points_balance) FROM orders O INNER JOIN transactions_and_payments T ON O.order_id = T.linked_order_reference_identifier INNER JOIN customers_loyalty_program C ON T.corresponding_customer_reference_identifier = C.associated_customer_reference_id INNER JOIN order_items I ON O.order_id = I.order_id WHERE C.accumulated_loyalty_points_balance > 1000 AND C.loyalty_program_tier_level = 'gold' AND T.chargeback_request_status = FALSE AND T.billing_address_street = T.shipping_address_street AND T.billing_address_city = T.shipping_address_city AND T.billing_address_state = T.shipping_address_state AND T.billing_address_country = T.shipping_address_country AND T.billing_address_zip_code = T.shipping_address_zip_code AND I.price_per_unit > 50 AND C.customer_feedback_engagement_score > 4 AND O.total_amount > 500 AND O.delivery_date > NOW() - INTERVAL '3 month'",
      "Actual": "SELECT AVG(loyalty_points) FROM customers WHERE loyalty_points > 1000 AND loyalty_program_tier = 'gold' AND chargebacks = FALSE AND billing_address = shipping_address AND price_per_unit > 50 AND customer_feedback_engagement_score > 4 AND orders.total_amount > 500 AND orders.delivery_date >= NOW() - INTERVAL '3 months'",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT AVG(loyalty_points) FROM customers WHERE loyalty_poin...\n                                        ^\n"
    },
    {
      "NL": "Get the total number of orders, total transaction amount, and average loyalty points earned per order for customers who have made a purchase in the last 30 days, have a premium account, and have a total of at least 2 wishlist items, along with the average scroll depth percentage and click count for these customers",
      "Expected": "SELECT COUNT(DISTINCT t.linked_order_reference_identifier), SUM(t.total_transaction_amount), AVG(t.associated_loyalty_points_earned), AVG(e.scroll_depth_percentage), AVG(e.click_count) FROM customerinfo c JOIN transactions_and_payments t ON c.person_customer_id = t.corresponding_customer_reference_identifier JOIN events e ON c.person_customer_id = e.person_customer_id WHERE c.person_is_premium = TRUE AND t.transaction_date_and_time > NOW() - INTERVAL '30 day' AND c.preferences_wishlist_items >= 2 GROUP BY c.person_customer_id",
      "Actual": "SELECT COUNT(o.id) AS total_orders, SUM(t.amount) AS total_transaction_amount, AVG(lp.points) AS avg_loyalty_points, AVG(s.scroll_depth) AS avg_scroll_depth, AVG(c.click_count) AS avg_click_count FROM orders o JOIN customers c ON o.customer_id = c.id JOIN transactions t ON o.id = t.order_id JOIN loyalty_points lp ON o.id = lp.order_id JOIN wishlist w ON c.id = w.customer_id WHERE t.date > NOW() - INTERVAL '30 days' AND c.premium_account = TRUE AND w.id > 1 GROUP BY c.id",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...lick_count) AS avg_click_count FROM orders o JOIN customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total revenue generated by each campaign along with the number of total conversions and the number of products added to wishlists during the campaign period.",
      "Expected": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, SUM(c.conversions) AS total_conversions, COUNT(w.id) AS total_wishlist_additions FROM campaigns c LEFT JOIN wishlist w ON w.added_at BETWEEN c.start_date AND c.end_date GROUP BY c.campaign_name;",
      "Actual": "SELECT campaign_id, SUM(revenue) AS total_revenue, COUNT(conversion_id) AS total_conversions, COUNT(wishlist_product_id) AS wishlist_products FROM campaign WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE GROUP BY campaign_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"campaign\" does not exist\nLINE 1: ...NT(wishlist_product_id) AS wishlist_products FROM campaign W...\n                                                             ^\n"
    },
    {
      "NL": "What are the total amounts of orders made by each customer who has left a review?",
      "Expected": "SELECT T1.total_amount FROM orders AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier",
      "Actual": "SELECT SUM(o.total_amount) FROM orders o JOIN reviews r ON o.customer_id = r.customer_id GROUP BY r.customer_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT SUM(o.total_amount) FROM orders o JOIN reviews r ON o...\n                                                      ^\n"
    },
    {
      "NL": "List all products that have been added to a wishlist with a priority level of high and are currently out of stock, along with the customer's notes and the product's detailed description, considering only products that have a standard retail price less than $50 and are from a specific brand.",
      "Expected": "SELECT p.product_display_name, p.detailed_product_description, w.notes FROM wishlist w JOIN products p ON w.fk_product_id = p.unique_product_identifier JOIN inventory i ON p.unique_product_identifier = i.referenced_product_id WHERE w.priority_level = 'high' AND i.quantity = 0 AND p.standard_retail_price_including_tax < 50 AND p.global_brand_affiliation = 'Specific Brand'",
      "Actual": "SELECT t2.notes, t2.description, t1.priority FROM wishlist AS t1 INNER JOIN products AS t2 ON t1.product_id = t2.product_id WHERE t2.retail_price < 50 AND t2.brand = 'BrandX' AND t1.priority = 'High' AND t2.stock_status = 'Out of Stock';",
      "Expected_Error": null,
      "Actual_Error": "column t1.product_id does not exist\nLINE 1: ... FROM wishlist AS t1 INNER JOIN products AS t2 ON t1.product...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t1.fk_product_id\".\n"
    },
    {
      "NL": "Retrieve all reviews that have been flagged as inappropriate and the customer's first and last name.",
      "Expected": "SELECT pr.textual_review_feedback, ci.person_first_name, ci.person_last_name FROM product_reviews_and_ratings pr JOIN customerinfo ci ON pr.reviewing_customer_identifier = ci.person_customer_id WHERE pr.flagged_as_inappropriate = TRUE;",
      "Actual": "SELECT t1.customer_first_name, t1.customer_last_name, t2.review FROM reviews t2 JOIN customers t1 ON t2.customer_id = t1.customer_id WHERE t2.flagged = 'true'",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ...first_name, t1.customer_last_name, t2.review FROM reviews t2...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the product display name and the average review star rating for all products that have received at least 5 reviews.",
      "Expected": "SELECT p.product_display_name, AVG(pr.submitted_review_star_rating) AS average_rating FROM products p JOIN product_reviews_and_ratings pr ON p.unique_product_identifier = pr.referenced_product_identifier GROUP BY p.product_display_name HAVING COUNT(pr.review_unique_identifier) >= 5;",
      "Actual": "SELECT T1.product_display_name, AVG(T2.review_star_rating) FROM products AS T1 INNER JOIN reviews AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING COUNT(T2.review_id) >= 5",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ...eview_star_rating) FROM products AS T1 INNER JOIN reviews AS...\n                                                             ^\n"
    },
    {
      "NL": "Get the total discount amount redeemed by customers in the loyalty program.",
      "Expected": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program;",
      "Actual": "SELECT SUM(t2.discount_amount) FROM customers AS t1 INNER JOIN loyalty_program AS t2 ON t1.customer_id = t2.customer_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT SUM(t2.discount_amount) FROM customers AS t1 INNER JO...\n                                            ^\n"
    },
    {
      "NL": "Find the number of reviews and ratings where the review was flagged as inappropriate.",
      "Expected": "SELECT COUNT(*) FROM product_reviews_and_ratings WHERE flagged_as_inappropriate = TRUE;",
      "Actual": "SELECT COUNT(r.id) FROM reviews r JOIN ratings ON r.id = ratings.review_id WHERE r.flagged = 'true';",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT COUNT(r.id) FROM reviews r JOIN ratings ON r.id = rat...\n                                ^\n"
    },
    {
      "NL": "Retrieve the average star rating for products that have received more than 50 helpful votes.",
      "Expected": "SELECT AVG(submitted_review_star_rating) FROM product_reviews_and_ratings WHERE number_of_helpful_votes_received > 50;",
      "Actual": "SELECT AVG(star_rating) FROM products WHERE helpful_votes > 50;",
      "Expected_Error": null,
      "Actual_Error": "column \"star_rating\" does not exist\nLINE 1: SELECT AVG(star_rating) FROM products WHERE helpful_votes > ...\n                   ^\n"
    },
    {
      "NL": "For all the customers who have both placed an order and added at least one item to their wishlist, display the customer's name, order count, wishlist count, and average order total amount.",
      "Expected": "SELECT T1.person_customer_id, COUNT(T1.order_id), COUNT(T2.id), AVG(T1.total_amount) FROM orders AS T1 INNER JOIN wishlist AS T2 ON T1.person_customer_id = T2.fk_user_id GROUP BY T1.person_customer_id HAVING COUNT(T1.order_id) > 0 AND COUNT(T2.id) > 0;",
      "Actual": "SELECT name, count(order_id) AS order_count, count(wishlist_id) AS wishlist_count, AVG(total_amount) AS avg_order_total FROM customers JOIN orders ON customers.customer_id = orders.customer_id JOIN wishlist_items ON customers.customer_id = wishlist_items.customer_id GROUP BY customers.customer_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ..._count, AVG(total_amount) AS avg_order_total FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the transaction details of all fraudulent transactions.",
      "Expected": "SELECT * FROM transactions_and_payments WHERE is_transaction_fraudulent = TRUE;",
      "Actual": "SELECT * FROM transactions WHERE amount < 0 OR (amount > 1000 AND status = 'fraudulent')",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT * FROM transactions WHERE amount < 0 OR (amount > 100...\n                      ^\n"
    },
    {
      "NL": "What is the average amount spent per order for customers with a premium account?",
      "Expected": "SELECT AVG(preferences_avg_spent_per_order) FROM customerinfo WHERE person_is_premium = True",
      "Actual": "SELECT AVG(total_amount) FROM orders WHERE customer_id IN (SELECT customer_id FROM customers WHERE account_type = 'premium')",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...ers WHERE customer_id IN (SELECT customer_id FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of loyalty points accumulated by customers who have redeemed more than 100 loyalty points and have at least one product in their cart with a promotional discount of more than 20%.",
      "Expected": "SELECT SUM(clp.accumulated_loyalty_points_balance) FROM customers_loyalty_program clp JOIN cart c ON clp.associated_customer_reference_id = c.fk_user_id JOIN products p ON c.fk_product_id = p.unique_product_identifier WHERE clp.lifetime_loyalty_points_redeemed > 100 AND p.percentage_discount_applied > 20;",
      "Actual": "SELECT COUNT(*) FROM customers JOIN orders ON customers.id = orders.customer_id JOIN order_items ON orders.id = order_items.order_id JOIN products ON order_items.product_id = products.id WHERE products.discount > 20 AND orders.loyalty_points > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers JOIN orders ON customers.id =...\n                             ^\n"
    },
    {
      "NL": "Find all reviews with a rating of 5 and the customer has edited the review at least once.",
      "Expected": "SELECT * FROM product_reviews_and_ratings WHERE submitted_review_star_rating = 5 AND user_has_edited_review = TRUE AND total_number_of_edits_made > 0",
      "Actual": "SELECT * FROM reviews WHERE rating = 5 AND id IN (SELECT review_id FROM review_edits WHERE customer_id = reviews.customer_id)",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT * FROM reviews WHERE rating = 5 AND id IN (SELECT rev...\n                      ^\n"
    },
    {
      "NL": "Retrieve the shipping details for all orders where the shipping status is 'delivered', along with the total price of items in those orders.",
      "Expected": "SELECT s.id, s.estimated_delivery, s.shipped_date, s.shipping_cost, s.shipping_address, s.shipping_city, s.shipping_state, s.shipping_zipcode, s.shipping_country, s.shipping_status, s.tracking_number, s.carrier, SUM(oi.total_price) AS total_order_price FROM shipping s JOIN order_items oi ON s.fk_order_id = oi.order_id WHERE s.shipping_status = 'delivered' GROUP BY s.id, s.estimated_delivery, s.shipped_date, s.shipping_cost, s.shipping_address, s.shipping_city, s.shipping_state, s.shipping_zipcode, s.shipping_country, s.shipping_status, s.tracking_number, s.carrier;",
      "Actual": "SELECT T1.order_id, T1.shipping_status, T1.total_price, T2.shipping_address, T2.shipping_city, T2.shipping_state, T2.shipping_zip FROM orders AS T1 INNER JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.shipping_status = 'delivered'",
      "Expected_Error": null,
      "Actual_Error": "column t1.shipping_status does not exist\nLINE 1: SELECT T1.order_id, T1.shipping_status, T1.total_price, T2.s...\n                            ^\n"
    },
    {
      "NL": "Find the customer information and transaction details of all customers who have applied for a refund, along with the refund amount and the product they purchased, also including the shipping address and the estimated delivery date. Ensure that the customer is not a premium customer and the transaction amount is greater than 100.",
      "Expected": "SELECT T1.person_first_name, T1.person_last_name, T1.address_street, T2.linked_order_reference_identifier, T2.transaction_unique_identifier, T2.total_transaction_amount, T3.fk_product_id, T3.refund_amount, T4.shipping_city, T4.shipping_zipcode, T4.shipping_address, T4.estimated_delivery FROM customerinfo AS T1 INNER JOIN transactions_and_payments AS T2 ON T2.corresponding_customer_reference_identifier = T1.person_customer_id INNER JOIN refunds_returns AS T3 ON T3.fk_user_id = T1.person_customer_id INNER JOIN shipping AS T4 ON T4.fk_order_id = T3.fk_order_id WHERE T1.person_is_premium = FALSE AND T2.total_transaction_amount > 100 AND T3.is_refundable = TRUE",
      "Actual": "SELECT c.*, t.*, r.refund_amount, p.product_name, s.shipping_address, s.estimated_delivery_date FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN refund_requests r ON t.transaction_id = r.transaction_id JOIN products p ON t.product_id = p.product_id JOIN shipping_addresses s ON t.shipping_address_id = s.shipping_address_id WHERE c.is_premium = FALSE AND t.transaction_amount > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ....shipping_address, s.estimated_delivery_date FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total amount of transactions for customers who have placed an order with a total amount greater than 100, have a loyalty program status with a balance greater than 100, and have made a transaction in the last 30 days. Also, include the customer's name and order status in the results.",
      "Expected": "SELECT SUM(tp.total_transaction_amount), ci.person_first_name, ci.person_last_name, o.order_status FROM transactions_and_payments tp INNER JOIN orders o ON tp.linked_order_reference_identifier = o.order_id INNER JOIN customerinfo ci ON tp.corresponding_customer_reference_identifier = ci.person_customer_id WHERE o.total_amount > 100 AND ci.account_account_balance > 100 AND tp.transaction_date_and_time >= NOW() - INTERVAL '30 day' GROUP BY ci.person_first_name, ci.person_last_name, o.order_status",
      "Actual": "SELECT SUM(t.total_amount) ,  c.name ,  o.status FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN transactions t ON o.order_id = t.order_id WHERE t.transaction_date >= NOW() - INTERVAL '30 days' AND o.total_amount > 100 AND c.loyalty_balance > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ..._amount) ,  c.name ,  o.status FROM orders o JOIN customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find all products that have an average customer review rating greater than or equal to 4.5, and are supplied by a supplier with an average supplier rating greater than or equal to 4.5, and have a standard retail price including tax less than or equal to $100, and are flagged as environmentally sustainable, and are featured products, and have a total number of verified reviews greater than or equal to 1000, and have a shipping weight measurement in kilograms less than or equal to 5 kilograms.",
      "Expected": "SELECT p.* FROM products p INNER JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE p.aggregate_customer_review_rating >= 4.5 AND s.average_supplier_rating >= 4.5 AND p.standard_retail_price_including_tax <= 100 AND p.environmentally_sustainable_product = TRUE AND p.featured_product_flag = TRUE AND p.total_number_of_verified_reviews >= 1000 AND p.shipping_weight_measurement_in_kilograms <= 5",
      "Actual": "SELECT * FROM products WHERE avg_rating >= 4.5 AND avg_supplier_rating >= 4.5 AND retail_price <= 100 AND is_sustainable = TRUE AND is_featured = TRUE AND total_reviews >= 1000 AND shipping_weight <= 5",
      "Expected_Error": null,
      "Actual_Error": "column \"avg_rating\" does not exist\nLINE 1: SELECT * FROM products WHERE avg_rating >= 4.5 AND avg_suppl...\n                                     ^\n"
    },
    {
      "NL": "Retrieve the total transaction amount for each transaction where the transaction status is 'completed' and the fraud detection flagged is false.",
      "Expected": "SELECT SUM(total_transaction_amount) FROM transactions_and_payments WHERE transaction_status = 'completed' AND fraud_detection_flagged = false;",
      "Actual": "SELECT SUM(amount) FROM transactions WHERE status = 'completed' AND fraud_detection_flagged = false;",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT SUM(amount) FROM transactions WHERE status = 'complet...\n                                ^\n"
    },
    {
      "NL": "Find the total number of products supplied by each supplier, and the average rating of each supplier, and the total number of verified reviews for each product supplied by each supplier, and the average retail price of each product supplied by each supplier, and the total number of transactions made for each product supplied by each supplier.",
      "Expected": "SELECT t1.supplier_unique_identifier, COUNT(DISTINCT t2.unique_product_identifier), AVG(t1.average_supplier_rating), AVG(t2.total_number_of_verified_reviews), AVG(t2.standard_retail_price_including_tax), COUNT(DISTINCT t3.transaction_unique_identifier) FROM suppliers AS t1 INNER JOIN products AS t2 ON t1.supplier_unique_identifier = t2.associated_supplier_reference_id INNER JOIN transactions_and_payments AS t3 ON t3.linked_order_reference_identifier = t2.unique_product_identifier GROUP BY t1.supplier_unique_identifier",
      "Actual": "SELECT supplier_id, COUNT(DISTINCT product_id) AS total_products, AVG(rating) AS avg_rating, SUM(verified_reviews) AS total_verified_reviews, AVG(retail_price) AS avg_retail_price, SUM(transactions) AS total_transactions FROM orders JOIN products ON orders.product_id = products.product_id JOIN suppliers ON products.supplier_id = suppliers.supplier_id GROUP BY supplier_id",
      "Expected_Error": null,
      "Actual_Error": "column orders.product_id does not exist\nLINE 1: ...S total_transactions FROM orders JOIN products ON orders.pro...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of premium customers who have made more than 10 orders and have a loyalty points balance greater than 500.",
      "Expected": "SELECT COUNT(*) FROM customerinfo WHERE person_is_premium = true AND preferences_total_orders > 10 AND person_loyalty_points > 500;",
      "Actual": "SELECT COUNT(*) FROM customers WHERE customer_type = 'premium' AND orders_count > 10 AND loyalty_points > 500",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers WHERE customer_type = 'premiu...\n                             ^\n"
    },
    {
      "NL": "Find all customers who have initiated a refund and have a transaction status of 'Completed'.",
      "Expected": "SELECT DISTINCT corresponding_customer_reference_identifier FROM transactions_and_payments WHERE refund_initiation_date IS NOT NULL AND transaction_status = 'Completed'",
      "Actual": "SELECT * FROM customers WHERE id IN (SELECT customer_id FROM refunds WHERE status = 'Initiated') AND id IN (SELECT customer_id FROM transactions WHERE status = 'Completed')",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT * FROM customers WHERE id IN (SELECT customer_id FROM...\n                      ^\n"
    },
    {
      "NL": "Find the total number of customers who have an active subscription and are over 30 years old.",
      "Expected": "SELECT COUNT(*) FROM customerinfo WHERE account_has_active_subscription = true AND DATE_PART('year', AGE(person_date_of_birth)) > 30;",
      "Actual": "SELECT COUNT(*) FROM customers WHERE active = 't' AND age > 30",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers WHERE active = 't' AND age > ...\n                             ^\n"
    },
    {
      "NL": "Retrieve the average star rating of reviews for products that have received more than 50 helpful votes and were submitted by premium customers who have made more than 10 purchases, along with the customer's first name and last name, filtering out reviews that are flagged as inappropriate and sorting the results by the customer's last name in descending order.",
      "Expected": "SELECT AVG(prar.submitted_review_star_rating) AS average_star_rating, ci.person_first_name, ci.person_last_name FROM product_reviews_and_ratings prar JOIN customerinfo ci ON prar.reviewing_customer_identifier = ci.person_customer_id WHERE prar.number_of_helpful_votes_received > 50 AND ci.person_is_premium = TRUE AND ci.preferences_total_orders > 10 AND prar.flagged_as_inappropriate = FALSE GROUP BY ci.person_first_name, ci.person_last_name ORDER BY ci.person_last_name DESC;",
      "Actual": "SELECT AVG(r.rating) ,  p.first_name ,  p.last_name FROM reviews r JOIN customers c ON r.customer_id = c.customer_id JOIN products p ON r.product_id = p.product_id WHERE r.helpful_votes > 50 AND c.premium_customer = TRUE AND c.purchases > 10 AND r.appropriate = TRUE GROUP BY p.first_name ,  p.last_name ORDER BY p.last_name DESC",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ...AVG(r.rating) ,  p.first_name ,  p.last_name FROM reviews r ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of orders placed by customers who are premium members and have an active subscription.",
      "Expected": "SELECT COUNT(*) FROM orders INNER JOIN customerinfo ON orders.person_customer_id = customerinfo.person_customer_id WHERE customerinfo.person_is_premium = true AND customerinfo.account_has_active_subscription = true;",
      "Actual": "SELECT COUNT(*) FROM customers WHERE membership_type = 'premium' AND subscription_status = 'active';",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers WHERE membership_type = 'prem...\n                             ^\n"
    },
    {
      "NL": "What is the number of customers who are eligible for special promotions and have accumulated more than 1000 loyalty points, along with the total discount amount redeemed and the total number of helpful votes received by reviews submitted by these customers, grouped by the loyalty program tier level?",
      "Expected": "SELECT T1.loyalty_program_tier_level, COUNT(DISTINCT T1.associated_customer_reference_id), SUM(T1.total_discount_amount_redeemed), SUM(T2.number_of_helpful_votes_received) FROM customers_loyalty_program AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.associated_customer_reference_id = T2.reviewing_customer_identifier WHERE T1.accumulated_loyalty_points_balance > 1000 AND T1.eligible_for_special_promotions = TRUE GROUP BY T1.loyalty_program_tier_level",
      "Actual": "SELECT COUNT(DISTINCT c.customer_id) AS num_customers, SUM(d.discount_amount) AS total_discount, SUM(r.helpful_votes) AS total_votes FROM customers c JOIN loyalty_programs lp ON c.customer_id = lp.customer_id JOIN loyalty_points lp2 ON c.customer_id = lp2.customer_id JOIN promotions p ON lp2.promotion_id = p.promotion_id JOIN discounts d ON p.promotion_id = d.promotion_id JOIN reviews r ON c.customer_id = r.customer_id WHERE lp2.loyalty_points > 1000 GROUP BY lp.tier_level",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...iscount, SUM(r.helpful_votes) AS total_votes FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the number of orders shipped in the past 24 hours, grouped by shipping status.",
      "Expected": "SELECT shipping_status, COUNT(*) FROM shipping WHERE shipped_date >= NOW() - INTERVAL '24 hours' GROUP BY shipping_status",
      "Actual": "SELECT COUNT(*) ,  shipping_status FROM orders WHERE created_at > NOW() - INTERVAL '24 hour' GROUP BY shipping_status",
      "Expected_Error": null,
      "Actual_Error": "column \"shipping_status\" does not exist\nLINE 1: SELECT COUNT(*) ,  shipping_status FROM orders WHERE created...\n                           ^\n"
    },
    {
      "NL": "Find all non-premium customers who have not placed any orders this year and have a subscription, list their email, phone number, and last login date.",
      "Expected": "SELECT ci.person_email, ci.person_phone_number, ci.person_last_login FROM customerinfo ci LEFT JOIN orders o ON ci.person_customer_id = o.person_customer_id WHERE ci.person_is_premium = FALSE AND ci.account_has_active_subscription = TRUE AND (o.order_date IS NULL OR EXTRACT(YEAR FROM o.order_date) != EXTRACT(YEAR FROM CURRENT_DATE))",
      "Actual": "SELECT email, phone, last_login FROM customers WHERE subscription = 'true' AND last_order_date < CURRENT_DATE AND premium = 'false'",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT email, phone, last_login FROM customers WHERE subscri...\n                                             ^\n"
    },
    {
      "NL": "What is the average shipping cost for orders that have been shipped and have a shipping status of 'delivered'?",
      "Expected": "SELECT AVG(shipping_cost) FROM shipping WHERE shipping_status = 'delivered' AND shipped_date IS NOT NULL",
      "Actual": "SELECT AVG(shipping_cost) FROM orders WHERE shipping_status = 'delivered'",
      "Expected_Error": null,
      "Actual_Error": "column \"shipping_cost\" does not exist\nLINE 1: SELECT AVG(shipping_cost) FROM orders WHERE shipping_status ...\n                   ^\n"
    },
    {
      "NL": "What are the order IDs and shipping costs for orders that have been shipped and have a shipping status of 'delivered'?",
      "Expected": "SELECT o.order_id, s.shipping_cost FROM orders o JOIN shipping s ON o.order_id = s.fk_order_id WHERE s.shipping_status = 'delivered' AND s.shipped_date IS NOT NULL",
      "Actual": "SELECT order_id, shipping_cost FROM orders WHERE shipping_status = 'delivered'",
      "Expected_Error": null,
      "Actual_Error": "column \"shipping_cost\" does not exist\nLINE 1: SELECT order_id, shipping_cost FROM orders WHERE shipping_st...\n                         ^\n"
    },
    {
      "NL": "Find the total revenue generated for each campaign along with the total shipping cost for the corresponding orders",
      "Expected": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, SUM(s.shipping_cost) AS total_shipping_cost FROM campaigns c JOIN shipping s ON c.campaign_id = s.fk_order_id GROUP BY c.campaign_name",
      "Actual": "SELECT SUM(o.total_amount - s.shipping_cost) AS total_revenue, SUM(s.shipping_cost) AS total_shipping_cost FROM orders o JOIN campaign_orders co ON o.id = co.order_id JOIN campaigns c ON co.campaign_id = c.id JOIN shipping s ON o.id = s.order_id GROUP BY c.id",
      "Expected_Error": null,
      "Actual_Error": "relation \"campaign_orders\" does not exist\nLINE 1: ...g_cost) AS total_shipping_cost FROM orders o JOIN campaign_o...\n                                                             ^\n"
    },
    {
      "NL": "List all customers who have a newsletter subscription and their wishlist items.",
      "Expected": "SELECT person_email, product_name FROM customerinfo JOIN wishlist ON customerinfo.person_customer_id = wishlist.fk_user_id WHERE preferences_newsletter_subscription = true;",
      "Actual": "SELECT c.*, w.* FROM customers c JOIN wishlist w ON c.customer_id = w.customer_id WHERE w.newsletter_subscription = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT c.*, w.* FROM customers c JOIN wishlist w ON c.custom...\n                             ^\n"
    },
    {
      "NL": "Find the total number of loyalty points for customers with free shipping eligibility and the average supplier rating of their suppliers.",
      "Expected": "SELECT SUM(clpb.accumulated_loyalty_points_balance) AS total_loyalty_points, AVG(s.average_supplier_rating) AS average_supplier_rating FROM customers_loyalty_program clpb JOIN order_items oi ON clpb.associated_customer_reference_id = oi.order_id JOIN suppliers s ON oi.product_id = s.supplier_unique_identifier WHERE clpb.free_shipping_eligibility = TRUE",
      "Actual": "SELECT COUNT(*) ,  AVG(s.rating) FROM customers c JOIN supplier_ratings sr ON c.id = sr.customer_id JOIN suppliers s ON sr.supplier_id = s.id WHERE s.free_shipping = 'true'",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) ,  AVG(s.rating) FROM customers c JOIN suppl...\n                                              ^\n"
    },
    {
      "NL": "Find all reviews that have a sentiment analysis score greater than or equal to 0.8, and are from customers who have made at least 5 previous purchases, and have a review approval moderation status of 'Approved', and have a review moderator note containing the word 'Excellent', and are associated with products that have a standard retail price including tax greater than $50, and are from suppliers with an average supplier rating greater than or equal to 4.5, and are flagged as environmentally sustainable, and have a total number of verified reviews greater than or equal to 500.",
      "Expected": "SELECT prr.* FROM product_reviews_and_ratings prr INNER JOIN products p ON prr.referenced_product_identifier = p.unique_product_identifier INNER JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE prr.sentiment_analysis_score >= 0.8 AND prr.previous_product_purchases_count >= 5 AND prr.review_approval_moderation_status = 'Approved' AND prr.review_moderator_notes LIKE '%Excellent%' AND p.standard_retail_price_including_tax > 50 AND s.average_supplier_rating >= 4.5 AND p.environmentally_sustainable_product = TRUE AND p.total_number_of_verified_reviews >= 500",
      "Actual": "SELECT reviews.* FROM reviews JOIN customers ON reviews.customer_id = customers.id JOIN purchases ON reviews.review_id = purchases.review_id JOIN products ON purchases.product_id = products.id JOIN suppliers ON products.supplier_id = suppliers.id WHERE reviews.sentiment_score >= 0.8 AND customers.num_purchases >= 5 AND reviews.approval_status = 'Approved' AND reviews.moderator_note LIKE '%Excellent%' AND products.standard_price > 50 AND suppliers.avg_rating >= 4.5 AND reviews.is_sustainable = 'Yes' AND reviews.verified_reviews >= 500",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT reviews.* FROM reviews JOIN customers ON reviews.cust...\n                              ^\n"
    },
    {
      "NL": "What is the average supplier rating?",
      "Expected": "SELECT AVG(average_supplier_rating) FROM suppliers",
      "Actual": "SELECT AVG(supplier_rating) FROM suppliers",
      "Expected_Error": null,
      "Actual_Error": "column \"supplier_rating\" does not exist\nLINE 1: SELECT AVG(supplier_rating) FROM suppliers\n                   ^\n"
    },
    {
      "NL": "Get the total amount of all refunds where the refund status is 'approved' and the refund method is 'credit'.",
      "Expected": "SELECT SUM(refund_amount) FROM refunds_returns WHERE refund_status = 'approved' AND refund_method = 'credit';",
      "Actual": "SELECT SUM(amount) FROM refunds WHERE status = 'approved' AND method = 'credit';",
      "Expected_Error": null,
      "Actual_Error": "relation \"refunds\" does not exist\nLINE 1: SELECT SUM(amount) FROM refunds WHERE status = 'approved' AN...\n                                ^\n"
    },
    {
      "NL": "What is the average revenue generated per campaign?",
      "Expected": "SELECT AVG(revenue_generated) FROM campaigns",
      "Actual": "SELECT AVG(revenue) FROM campaigns",
      "Expected_Error": null,
      "Actual_Error": "column \"revenue\" does not exist\nLINE 1: SELECT AVG(revenue) FROM campaigns\n                   ^\n"
    },
    {
      "NL": "Find all unique product identifiers where the standard retail price is greater than the promotional price, and the percentage discount is greater than 0.",
      "Expected": "SELECT unique_product_identifier FROM products WHERE standard_retail_price_including_tax > promotional_discounted_price AND percentage_discount_applied > 0",
      "Actual": "SELECT DISTINCT product_id FROM products WHERE retail_price > promotional_price AND discount_percentage > 0",
      "Expected_Error": null,
      "Actual_Error": "column \"product_id\" does not exist\nLINE 1: SELECT DISTINCT product_id FROM products WHERE retail_price ...\n                        ^\n"
    },
    {
      "NL": "List the shipping details for orders with a shipping status of 'shipped' in the last 30 days.",
      "Expected": "SELECT s.shipping_address, s.shipping_city, s.shipping_state, s.shipping_zipcode, s.shipping_country, s.shipping_status, s.tracking_number FROM shipping s JOIN orders o ON s.fk_order_id = o.order_id WHERE s.shipping_status = 'shipped' AND o.shipping_date >= NOW() - INTERVAL '30 days'",
      "Actual": "SELECT * FROM orders WHERE created_at >= NOW() - INTERVAL '30 days' AND status = 'shipped'",
      "Expected_Error": null,
      "Actual_Error": "column \"status\" does not exist\nLINE 1: ...HERE created_at >= NOW() - INTERVAL '30 days' AND status = '...\n                                                             ^\n"
    },
    {
      "NL": "Get the total discount amount redeemed and the last loyalty point update date for customers who have an accumulated loyalty points balance greater than 500 and are eligible for special promotions.",
      "Expected": "SELECT total_discount_amount_redeemed, last_loyalty_point_update_date FROM customers_loyalty_program WHERE accumulated_loyalty_points_balance > 500 AND eligible_for_special_promotions = TRUE;",
      "Actual": "SELECT SUM(discount_amount) ,  max(last_update_date) FROM customer JOIN loyalty_points ON customer.id = loyalty_points.customer_id WHERE loyalty_points.balance > 500 AND customer.promotion_status = 'active'",
      "Expected_Error": null,
      "Actual_Error": "relation \"customer\" does not exist\nLINE 1: ...UM(discount_amount) ,  max(last_update_date) FROM customer J...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the total number of loyalty points earned by customers who have made more than 5 orders and have free shipping eligibility.",
      "Expected": "SELECT SUM(l.lifetime_loyalty_points_earned) FROM customers_loyalty_program l JOIN customerinfo c ON l.associated_customer_reference_id = c.person_customer_id WHERE c.preferences_total_orders > 5 AND l.free_shipping_eligibility = TRUE;",
      "Actual": "SELECT COUNT(*) FROM customers JOIN orders ON customers.customer_id = orders.customer_id WHERE orders.order_count > 5 AND customers.free_shipping_eligibility = true",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers JOIN orders ON customers.cust...\n                             ^\n"
    },
    {
      "NL": "Find the total number of transactions for each customer.",
      "Expected": "SELECT corresponding_customer_reference_identifier, COUNT(transaction_unique_identifier) AS total_transactions FROM transactions_and_payments GROUP BY corresponding_customer_reference_identifier;",
      "Actual": "SELECT COUNT(*) ,  customer_id FROM transactions GROUP BY customer_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT COUNT(*) ,  customer_id FROM transactions GROUP BY cu...\n                                            ^\n"
    },
    {
      "NL": "Retrieve the average time spent on the events related to orders that have a payment method of 'Credit Card' and occurred in the year 2022, grouped by the event type.",
      "Expected": "SELECT e.event_type, AVG(e.time_spent_seconds) AS avg_time_spent FROM events e JOIN orders o ON e.order_id = o.order_id WHERE o.payment_method = 'Credit Card' AND e.event_timestamp BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY e.event_type;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve a comprehensive report for each customer, which includes the total time spent on the site, average cart value, number of unique sessions, the most common device platform, and the average review rating. Additionally, for each customer, calculate the total amount spent on orders, the average shipping fee per item, and the average tax amount per item. This report should be ordered by the total time spent in descending order.",
      "Expected": "SELECT e.person_customer_id, SUM(e.time_spent_seconds) AS total_time_spent, AVG(e.cart_value) AS avg_cart_value, COUNT(DISTINCT e.session_id) AS unique_sessions, MODE() WITHIN GROUP (ORDER BY e.device_platform) AS most_common_device_platform, AVG(e.review_rating) AS avg_review_rating, COALESCE(SUM(oi.total_price), 0) AS total_amount_spent, COALESCE(AVG(oi.shipping_fee), 0) AS avg_shipping_fee_per_item, COALESCE(AVG(oi.tax_amount), 0) AS avg_tax_amount_per_item FROM events e LEFT JOIN order_items oi ON e.order_id = oi.order_id GROUP BY e.person_customer_id ORDER BY total_time_spent DESC;",
      "Actual": "SELECT c.customer_id, c.customer_name, SUM(o.total_time_spent) AS total_time_spent, AVG(o.total_cart_value) AS avg_cart_value, COUNT(DISTINCT s.session_id) AS unique_sessions, s.most_common_device AS most_common_device, AVG(r.review_rating) AS avg_review_rating, SUM(o.total_amount_spent) AS total_amount_spent, AVG(o.shipping_fee_per_item) AS avg_shipping_fee, AVG(o.tax_amount_per_item) AS avg_tax_amount FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN sessions s ON o.order_id = s.order_id JOIN reviews r ON o.order_id = r.order_id GROUP BY c.customer_id, c.customer_name ORDER BY SUM(o.total_time_spent) DESC",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...AVG(o.tax_amount_per_item) AS avg_tax_amount FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total transaction amount and the review approval moderation status for transactions that have been flagged as fraudulent and have a review approval moderation status of 'approved'.",
      "Expected": "SELECT T2.total_transaction_amount, T1.review_approval_moderation_status FROM product_reviews_and_ratings AS T1 INNER JOIN transactions_and_payments AS T2 ON T1.referenced_product_identifier = T2.linked_order_reference_identifier WHERE T2.is_transaction_fraudulent = TRUE AND T1.review_approval_moderation_status = 'approved'",
      "Actual": "SELECT SUM(amount), approval_status FROM transactions WHERE flagged_fraud = TRUE AND approval_status = 'approved'",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT SUM(amount), approval_status FROM transactions WHERE ...\n                                                 ^\n"
    },
    {
      "NL": "Find all female customers above 40 years old with more than 1000 loyalty points.",
      "Expected": "SELECT * FROM customerinfo WHERE person_gender = 'F' AND EXTRACT(YEAR FROM AGE(CURRENT_DATE, person_date_of_birth)) > 40 AND person_loyalty_points > 1000",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all transactions where the customer has made a purchase using a digital wallet and the product is currently in stock, also find the quantity of the product in the inventory.",
      "Expected": "SELECT t.transaction_unique_identifier, t.digital_wallet_used, i.quantity FROM transactions_and_payments t JOIN inventory i ON t.linked_order_reference_identifier = i.referenced_product_id WHERE t.digital_wallet_used IS NOT NULL AND i.stock_status = 'In Stock'",
      "Actual": "SELECT t.* ,  i.quantity FROM transactions t JOIN inventory i ON t.product_id = i.product_id WHERE t.payment_method = 'digital wallet' AND i.quantity > 0",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT t.* ,  i.quantity FROM transactions t JOIN inventory ...\n                                      ^\n"
    },
    {
      "NL": "Analyze the engagement of customers by calculating the average time spent on the website, the total number of clicks, and the number of reviews they have provided, for customers who have placed an order in the past year and have a loyalty tier level of 'Gold'. The results should be grouped by city and ordered by the number of reviews in descending order.",
      "Expected": "SELECT e.location_city, AVG(e.time_spent_seconds) AS avg_time_spent, SUM(e.click_count) AS total_clicks, COUNT(e.review_rating) AS total_reviews FROM events e JOIN customerinfo c ON e.person_customer_id = c.person_customer_id JOIN customers_loyalty_program cl ON c.person_customer_id = cl.associated_customer_reference_id WHERE e.event_timestamp > NOW() - INTERVAL '1 year' AND cl.loyalty_program_tier_level = 'Gold' GROUP BY e.location_city ORDER BY total_reviews DESC;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all columns for the orders table",
      "Expected": "SELECT * FROM information_schema.columns WHERE table_name = 'orders'",
      "Actual": "SELECT column_name FROM information_schema.columns WHERE table_name = 'orders';",
      "Expected_Signature": "59b6789935c10c0f7deef23ab3a33791",
      "Actual_Signature": "3a32709073af2336c06069edf8c54937",
      "Expected_Shape": [
        22,
        44
      ],
      "Actual_Shape": [
        22,
        1
      ]
    },
    {
      "NL": "Find all orders where the order status is 'pending' and the shipping address city is 'New York'.",
      "Expected": "SELECT * FROM orders WHERE order_status = 'pending' AND shipping_address_city = 'New York';",
      "Actual": "SELECT * FROM orders WHERE status = 'pending' AND city = 'New York';",
      "Expected_Error": null,
      "Actual_Error": "column \"status\" does not exist\nLINE 1: SELECT * FROM orders WHERE status = 'pending' AND city = 'Ne...\n                                   ^\n"
    },
    {
      "NL": "Get the details of all wishlist items that have been added by customers who have made at least one purchase with a total transaction amount greater than $100.",
      "Expected": "SELECT w.* FROM wishlist w JOIN cart c ON w.fk_user_id = c.fk_user_id JOIN transactions_and_payments t ON c.id = t.linked_order_reference_identifier WHERE t.total_transaction_amount > 100",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the total number of customers who are eligible for special promotions and have an accumulated loyalty points balance greater than 1000.",
      "Expected": "SELECT COUNT(*) FROM customers_loyalty_program WHERE eligible_for_special_promotions = true AND accumulated_loyalty_points_balance > 1000;",
      "Actual": "SELECT COUNT(*) FROM customers WHERE loyalty_points > 1000 AND is_eligible_for_promotions = 'true';",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers WHERE loyalty_points > 1000 A...\n                             ^\n"
    },
    {
      "NL": "Calculate the total quantity of inventory that is past the expiry date for all products.",
      "Expected": "SELECT SUM(i.quantity) AS total_expired_quantity FROM inventory i WHERE i.expiry_date < CURRENT_DATE;",
      "Actual": "SELECT SUM(quantity) FROM inventory WHERE expiry_date < CURRENT_DATE",
      "Expected_Signature": "89c7fe467a45a21fa48d8774a840899a",
      "Actual_Signature": "e5bef615386790f4cc1646c8366f7377",
      "Expected_Shape": [
        1,
        1
      ],
      "Actual_Shape": [
        1,
        1
      ]
    },
    {
      "NL": "Retrieve all the columns from the customerinfo table where the customer's preferred language is 'English'.",
      "Expected": "SELECT * FROM customerinfo WHERE person_preferred_language = 'English';",
      "Actual": "SELECT * FROM customerinfo WHERE language = 'English';",
      "Expected_Error": null,
      "Actual_Error": "column \"language\" does not exist\nLINE 1: SELECT * FROM customerinfo WHERE language = 'English';\n                                         ^\n"
    },
    {
      "NL": "Find the total amount of all orders shipped to the city of New York and their corresponding product names",
      "Expected": "SELECT SUM(T1.total_amount), T3.product_name FROM orders AS T1 INNER JOIN wishlist AS T3 ON T1.person_customer_id = T3.fk_user_id WHERE T1.shipping_address_city = 'New York' GROUP BY T3.product_name",
      "Actual": "SELECT SUM(total_amount) ,  product_name FROM orders JOIN shipments ON orders.id = shipments.order_id JOIN cities ON shipments.city_id = cities.id WHERE cities.name = 'New York'",
      "Expected_Error": null,
      "Actual_Error": "relation \"shipments\" does not exist\nLINE 1: ...UM(total_amount) ,  product_name FROM orders JOIN shipments ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of products in each cart for users who have opened their email and have a review rating greater than 3",
      "Expected": "SELECT COUNT(DISTINCT c.fk_product_id) FROM cart c JOIN events e ON c.fk_user_id = e.person_customer_id WHERE e.email_opened = TRUE AND e.review_rating > 3 GROUP BY c.fk_user_id",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the product details and the average review rating for products that have been purchased by customers who have also opened an email.",
      "Expected": "SELECT p.product_display_name, p.aggregate_customer_review_rating FROM products p JOIN events e ON p.unique_product_identifier = e.order_item_id WHERE e.email_opened = TRUE;",
      "Actual": "SELECT T1.product_id, T1.product_name, T1.price, T2.average_rating FROM products AS T1 INNER JOIN reviews AS T2 ON T1.product_id = T2.product_id INNER JOIN purchase_history AS T3 ON T1.product_id = T3.product_id INNER JOIN email_opened AS T4 ON T3.customer_id = T4.customer_id GROUP BY T1.product_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ... T2.average_rating FROM products AS T1 INNER JOIN reviews AS...\n                                                             ^\n"
    },
    {
      "NL": "What are the total transaction amounts for each payment method used and the corresponding total billed amounts?",
      "Expected": "SELECT payment_method_used, SUM(total_transaction_amount) as total_transaction_amount, SUM(final_billed_amount) as total_billed_amount FROM transactions_and_payments GROUP BY payment_method_used",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all customers who have a total loyalty points value greater than 1000 and are subscribed to the newsletter.",
      "Expected": "SELECT person_first_name, person_last_name, person_loyalty_points, preferences_newsletter_subscription FROM customerinfo WHERE person_loyalty_points > 1000 AND preferences_newsletter_subscription = true;",
      "Actual": "SELECT * FROM customers WHERE total_loyalty_points > 1000 AND newsletter_subscription = 'true';",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT * FROM customers WHERE total_loyalty_points > 1000 AN...\n                      ^\n"
    },
    {
      "NL": "Find all loyalty members who have never participated in exclusive beta testing but are eligible for special promotions.",
      "Expected": "SELECT * FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = 'f' AND eligible_for_special_promotions = 't'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve a comprehensive list of products that have received reviews with a sentiment analysis score higher than 3.5, along with the average number of verified reviews and the total number of edits made to those reviews. Additionally, provide the product display name, primary material composition, and the estimated production cost per unit, considering only those products that have been reviewed more than 100 times.",
      "Expected": "SELECT p.product_display_name, p.primary_material_composition, p.estimated_production_cost_per_unit, AVG(prr.sentiment_analysis_score) AS avg_sentiment_score, SUM(prr.total_number_of_edits_made) AS total_edits_made FROM product_reviews_and_ratings prr JOIN products p ON prr.referenced_product_identifier = p.unique_product_identifier WHERE prr.sentiment_analysis_score > 3.5 GROUP BY p.unique_product_identifier HAVING COUNT(prr.review_unique_identifier) > 100;",
      "Actual": "SELECT display_name, primary_material, estimated_production_cost, AVG(verified_reviews) AS avg_verified_reviews, COUNT(verified_reviews) AS total_verified_reviews, COUNT(edits) FROM reviews GROUP BY display_name, primary_material, estimated_production_cost HAVING COUNT(verified_reviews) > 100 AND AVG(sentiment_analysis_score) > 3.5",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ...ews) AS total_verified_reviews, COUNT(edits) FROM reviews GR...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of transactions for each campaign and the total revenue generated for each campaign.",
      "Expected": "SELECT T2.campaign_name, COUNT(T1.linked_order_reference_identifier), SUM(T1.final_billed_amount) FROM transactions_and_payments T1 INNER JOIN campaigns T2 ON T1.linked_order_reference_identifier = T2.campaign_id GROUP BY T2.campaign_name",
      "Actual": "SELECT COUNT(*) AS total_transactions, SUM(revenue) AS total_revenue FROM transactions GROUP BY campaign",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: ..._transactions, SUM(revenue) AS total_revenue FROM transactio...\n                                                             ^\n"
    },
    {
      "NL": "Get the customer birthday special discount status and the order date for customers who have placed orders with a payment status of 'paid' and have participated in exclusive beta testing.",
      "Expected": "SELECT cltp.customer_birthday_special_discount, ord.order_date FROM customers_loyalty_program cltp JOIN orders ord ON cltp.associated_customer_reference_id = ord.person_customer_id WHERE ord.payment_status = 'paid' AND cltp.participation_in_exclusive_beta_testing = TRUE",
      "Actual": "SELECT T1.birthday_special_discount_status, T2.order_date FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.payment_status = 'paid' AND T1.exclusive_beta_testing = TRUE;",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...thday_special_discount_status, T2.order_date FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find all premium customers who have an active subscription and a wishlist with more than 1 item.",
      "Expected": "SELECT ci.person_customer_id, ci.person_first_name, ci.person_last_name, w.id AS wishlist_id, COUNT(w.fk_product_id) AS item_count FROM customerinfo ci JOIN wishlist w ON ci.person_customer_id = w.fk_user_id WHERE ci.person_is_premium = true AND ci.account_has_active_subscription = true GROUP BY ci.person_customer_id, ci.person_first_name, ci.person_last_name, w.id HAVING COUNT(w.fk_product_id) > 1;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of reviews left by customers who have a non-premium account.",
      "Expected": "SELECT COUNT(*) AS total_reviews FROM product_reviews_and_ratings pr INNER JOIN customerinfo c ON pr.reviewing_customer_identifier = c.person_customer_id WHERE c.person_is_premium = FALSE;",
      "Actual": "SELECT COUNT(*) FROM reviews WHERE customer_id IN (SELECT customer_id FROM customers WHERE account_type != 'premium');",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT COUNT(*) FROM reviews WHERE customer_id IN (SELECT cu...\n                             ^\n"
    },
    {
      "NL": "What are the total amounts and shipping fees for orders placed by customers who have made previous purchases at least five times, and what are the associated review scores of the orders, grouped by the customer's identifier and the order's delivery date?",
      "Expected": "SELECT SUM(total_amount) AS total_order_amount, SUM(shipping_fee) AS total_shipping_fee, AVG(sentiment_analysis_score) AS average_review_score, T1.person_customer_id, T1.delivery_date FROM orders AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier WHERE T2.previous_product_purchases_count >= 5 GROUP BY T1.person_customer_id, T1.delivery_date",
      "Actual": "SELECT SUM(total_amount), SUM(shipping_fee), AVG(review_score) FROM orders WHERE customer_id IN (SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(*) >= 5) GROUP BY customer_id, delivery_date",
      "Expected_Error": null,
      "Actual_Error": "column \"review_score\" does not exist\nLINE 1: SELECT SUM(total_amount), SUM(shipping_fee), AVG(review_scor...\n                                                         ^\n"
    },
    {
      "NL": "Find the total number of customers who have more than 1000 accumulated loyalty points balance and are eligible for special promotions.",
      "Expected": "SELECT COUNT(*) FROM customers_loyalty_program WHERE accumulated_loyalty_points_balance > 1000 AND eligible_for_special_promotions = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total quantity of products with a fragile item indicator of true and an available stock quantity greater than 1000?",
      "Expected": "SELECT SUM(i.quantity) FROM inventory i INNER JOIN products p ON i.referenced_product_id = p.unique_product_identifier WHERE p.fragile_item_indicator = true AND p.available_stock_quantity_in_units > 1000",
      "Actual": "SELECT SUM(quantity) FROM products WHERE fragile = TRUE AND stock_quantity > 1000;",
      "Expected_Error": null,
      "Actual_Error": "column \"quantity\" does not exist\nLINE 1: SELECT SUM(quantity) FROM products WHERE fragile = TRUE AND ...\n                   ^\n"
    },
    {
      "NL": "Get the details of all customers who have active subscription and are premium.",
      "Expected": "SELECT * FROM customerinfo WHERE account_has_active_subscription = TRUE AND person_is_premium = TRUE",
      "Actual": "SELECT * FROM customers WHERE subscription_status = 'active' AND premium = 'true';",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT * FROM customers WHERE subscription_status = 'active'...\n                      ^\n"
    },
    {
      "NL": "Identify the top 5 products with the highest total refund amounts, considering only completed refund requests.",
      "Expected": "SELECT p.unique_product_identifier, p.product_display_name, SUM(r.refund_amount) as total_refund_amount FROM products p JOIN refunds_returns r ON p.unique_product_identifier = r.fk_product_id WHERE r.status = 'completed' GROUP BY p.unique_product_identifier, p.product_display_name ORDER BY total_refund_amount DESC LIMIT 5;",
      "Actual": "SELECT product_id, SUM(refund_amount) FROM refund_requests WHERE status = 'completed' GROUP BY product_id ORDER BY SUM(refund_amount) DESC LIMIT 5;",
      "Expected_Error": null,
      "Actual_Error": "relation \"refund_requests\" does not exist\nLINE 1: SELECT product_id, SUM(refund_amount) FROM refund_requests W...\n                                                   ^\n"
    },
    {
      "NL": "What are the campaign names and the total amount of each order for all the orders?",
      "Expected": "SELECT T1.campaign_name, T2.total_amount FROM campaigns AS T1 INNER JOIN orders AS T2 ON T1.campaign_id = T2.campaign_id",
      "Actual": "SELECT campaign_name, SUM(total_amount) FROM orders GROUP BY campaign_name",
      "Expected_Error": null,
      "Actual_Error": "column \"campaign_name\" does not exist\nLINE 1: SELECT campaign_name, SUM(total_amount) FROM orders GROUP BY...\n               ^\n"
    },
    {
      "NL": "Find the total revenue generated from campaigns that have generated more than $1000 in revenue and also list the average shipping cost for orders placed under these campaigns.",
      "Expected": "SELECT c.campaign_name, SUM(o.total_amount) AS total_revenue, AVG(s.shipping_cost) AS average_shipping_cost FROM campaigns c JOIN orders o ON c.campaign_id = o.campaign_id JOIN shipping s ON o.order_id = s.fk_order_id WHERE c.revenue_generated > 1000 GROUP BY c.campaign_name",
      "Actual": "SELECT SUM(c.revenue), AVG(o.shipping_cost) FROM campaigns c JOIN orders o ON c.id = o.campaign_id WHERE c.revenue > 1000",
      "Expected_Error": null,
      "Actual_Error": "column c.id does not exist\nLINE 1: ....shipping_cost) FROM campaigns c JOIN orders o ON c.id = o.c...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the average sentiment analysis score of reviews for products that have had a promotional discount applied and were added to the wishlist within the last 90 days. Additionally, include the total number of reviews for these products and the average esthetic rating given by customers.",
      "Expected": "SELECT p.product_display_name, AVG(prr.sentiment_analysis_score) AS average_sentiment, COUNT(prr.review_unique_identifier) AS total_reviews, AVG(prr.submitted_review_star_rating) AS average_rating FROM product_reviews_and_ratings prr JOIN products p ON prr.referenced_product_identifier = p.unique_product_identifier JOIN wishlist w ON p.unique_product_identifier = w.fk_product_id WHERE p.percentage_discount_applied > 0 AND w.added_at >= CURRENT_DATE - INTERVAL '90 days' GROUP BY p.product_display_name;",
      "Actual": "SELECT AVG(s.sentiment) ,  COUNT(r.id) ,  AVG(e.rating) FROM reviews r JOIN products p ON r.product_id = p.id JOIN esthetics e ON r.product_id = e.product_id JOIN sentiment s ON r.product_id = s.product_id WHERE p.discount_applied = TRUE AND r.added_to_wishlist > NOW() - INTERVAL '90 days'",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ...s.sentiment) ,  COUNT(r.id) ,  AVG(e.rating) FROM reviews r ...\n                                                             ^\n"
    },
    {
      "NL": "What are the product names and their corresponding prices in the wishlist where the billing address city is 'New York' in the transactions table?",
      "Expected": "SELECT w.product_name, w.price_at_addition FROM wishlist w JOIN transactions_and_payments tp ON w.fk_user_id = tp.corresponding_customer_reference_identifier WHERE tp.billing_address_city = 'New York'",
      "Actual": "SELECT T1.product_name, T1.price FROM transactions AS T1 INNER JOIN wishlist AS T2 ON T1.id = T2.transaction_id WHERE T2.city = 'New York';",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT T1.product_name, T1.price FROM transactions AS T1 INN...\n                                              ^\n"
    },
    {
      "NL": "Retrieve the average price per unit of products in orders, along with the average discount applied per order item, for those items that have a return period of more than 30 days.",
      "Expected": "SELECT AVG(price_per_unit) as avg_price_per_unit, AVG(discount_applied) as avg_discount_applied FROM order_items WHERE return_period > 30;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the top 5 customers based on the total amount spent on orders, along with the number of orders and the average order value, filtering for orders placed on a desktop device.",
      "Expected": "SELECT e.person_customer_id, COUNT(o.order_id) AS number_of_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS average_order_value FROM events e JOIN orders o ON e.order_id = o.order_id WHERE e.device_type = 'desktop' GROUP BY e.person_customer_id ORDER BY total_spent DESC LIMIT 5;",
      "Actual": "SELECT customers.name, SUM(orders.total_amount) AS total_spent, COUNT(orders.id) AS num_orders, AVG(orders.total_amount) AS avg_order_value FROM customers JOIN orders ON customers.id = orders.customer_id WHERE orders.device = 'desktop' GROUP BY customers.name ORDER BY SUM(orders.total_amount) DESC LIMIT 5;",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ... AVG(orders.total_amount) AS avg_order_value FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the total transaction amount and final billed amount for all transactions where the transaction is marked as fraudulent and the total transaction amount is greater than 1000.",
      "Expected": "SELECT total_transaction_amount, final_billed_amount FROM transactions_and_payments WHERE is_transaction_fraudulent = true AND total_transaction_amount > 1000;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all order IDs and their corresponding shipping costs where the delivery date is after '2020-01-01' and the shipping status is 'delivered'.",
      "Expected": "SELECT T1.order_id, T2.shipping_cost FROM orders AS T1 INNER JOIN shipping AS T2 ON T1.order_id = T2.fk_order_id WHERE T1.delivery_date > '2020-01-01' AND T2.shipping_status = 'delivered';",
      "Actual": "SELECT order_id, shipping_cost FROM orders WHERE delivery_date > '2020-01-01' AND shipping_status = 'delivered'",
      "Expected_Error": null,
      "Actual_Error": "column \"shipping_cost\" does not exist\nLINE 1: SELECT order_id, shipping_cost FROM orders WHERE delivery_da...\n                         ^\n"
    },
    {
      "NL": "Retrieve the total number of transactions, the total transaction amount, and the average transaction amount for each supplier's transactions.",
      "Expected": "SELECT s.official_supplier_business_name, COUNT(t.transaction_unique_identifier) AS total_transactions, SUM(t.total_transaction_amount) AS total_transaction_amount, AVG(t.total_transaction_amount) AS average_transaction_amount FROM transactions_and_payments t, suppliers s WHERE t.linked_order_reference_identifier = s.supplier_unique_identifier GROUP BY s.official_supplier_business_name;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average income of customers who have a wishlist and have ordered a product at least once.",
      "Expected": "SELECT AVG(T1.person_income) AS average_income FROM customerinfo AS T1 INNER JOIN cart AS T2 ON T1.person_customer_id = T2.fk_user_id WHERE T1.preferences_wishlist_items > 0 AND T1.preferences_total_orders > 0",
      "Actual": "SELECT AVG(t2.income) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.customer_id = t2.customer_id WHERE t1.wishlist IS NOT NULL",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT AVG(t2.income) FROM customers AS t1 INNER JOIN orders...\n                                   ^\n"
    },
    {
      "NL": "Retrieve the total quantity of each product in the inventory with a stock status of 'available' and a stock threshold greater than or equal to 10.",
      "Expected": "SELECT referenced_product_id, SUM(quantity) AS total_quantity FROM inventory WHERE stock_status = 'available' AND stock_threshold >= 10 GROUP BY referenced_product_id;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the total prices and product names of the order items for a specific order?",
      "Expected": "SELECT oi.total_price, p.product_display_name FROM order_items oi JOIN products p ON oi.product_id = p.unique_product_identifier WHERE oi.order_id = 1;",
      "Actual": "SELECT SUM(price), product_name FROM order_items WHERE order_id = 1",
      "Expected_Error": null,
      "Actual_Error": "column \"price\" does not exist\nLINE 1: SELECT SUM(price), product_name FROM order_items WHERE order...\n                   ^\n"
    },
    {
      "NL": "Find the total revenue generated by all campaigns and the total cost per acquisition",
      "Expected": "SELECT SUM(revenue_generated) AS total_revenue, SUM(cost_per_acquisition) AS total_cost_per_acquisition FROM campaigns",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total cart value and the event type for each cart status where the cart status is 'active' and the event type is 'checkout'",
      "Expected": "SELECT SUM(c.total_price), e.event_type FROM cart c JOIN events e ON c.id = e.order_id WHERE c.cart_status = 'active' AND e.event_type = 'checkout' GROUP BY e.event_type",
      "Actual": "SELECT SUM(total_amount) ,  event_type FROM carts WHERE status = 'active' AND event_type = 'checkout' GROUP BY status",
      "Expected_Error": null,
      "Actual_Error": "relation \"carts\" does not exist\nLINE 1: SELECT SUM(total_amount) ,  event_type FROM carts WHERE stat...\n                                                    ^\n"
    },
    {
      "NL": "List the details of all cart items that have a total price of more than $100.",
      "Expected": "SELECT * FROM cart WHERE total_price > 100;",
      "Actual": "SELECT * FROM cart_items WHERE total_price > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"cart_items\" does not exist\nLINE 1: SELECT * FROM cart_items WHERE total_price > 100\n                      ^\n"
    },
    {
      "NL": "Show all products in the cart for the user with user id 123.",
      "Expected": "SELECT id, fk_product_id, price_per_unit, quantity, total_price FROM cart WHERE fk_user_id = 123;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "For each product in the cart, list the product display name, price per unit in the cart, and the total number of units ordered, along with the customer's review sentiment score if available.",
      "Expected": "SELECT p.product_display_name, c.price_per_unit, c.quantity, r.sentiment_analysis_score FROM cart c JOIN products p ON c.fk_product_id = p.unique_product_identifier LEFT JOIN product_reviews_and_ratings r ON p.unique_product_identifier = r.referenced_product_identifier;",
      "Actual": "SELECT p.display_name, c.price_per_unit, c.units_ordered, COALESCE(r.sentiment_score, 0) FROM cart c JOIN product p ON c.product_id = p.id LEFT JOIN review r ON c.product_id = r.product_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"product\" does not exist\nLINE 1: ..., COALESCE(r.sentiment_score, 0) FROM cart c JOIN product p ...\n                                                             ^\n"
    },
    {
      "NL": "What is the total discount amount redeemed by all customers who are eligible for special promotions and have accumulated more than 1000 loyalty points?",
      "Expected": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program WHERE eligible_for_special_promotions = TRUE AND accumulated_loyalty_points_balance > 1000",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all the users whose cart status is not 'abandoned' and who have more than one item in their cart with the same product ID. For these users, calculate the total price of the items in their cart and the total price of the items in their wishlist, as well as the average price per unit of the items in their cart. Also, find the average price per unit of the items in their wishlist and the number of wishlist items that are currently in stock.",
      "Expected": "WITH cart_data AS ( SELECT fk_user_id, fk_product_id, sum(total_price) AS total_cart_price, avg(price_per_unit) AS avg_cart_price FROM cart WHERE cart_status != 'abandoned' GROUP BY fk_user_id, fk_product_id HAVING count(fk_product_id) > 1 ), wishlist_data AS ( SELECT fk_user_id, avg(price_at_addition) AS avg_wishlist_price, sum(CASE WHEN stock_status_at_addition = true THEN 1 ELSE 0 END) AS in_stock_wishlist_items, sum(price_at_addition) AS total_wishlist_price FROM wishlist GROUP BY fk_user_id ) SELECT cd.fk_user_id, cd.avg_cart_price, cd.total_cart_price, wd.avg_wishlist_price, wd.in_stock_wishlist_items, wd.total_wishlist_price FROM cart_data cd JOIN wishlist_data wd ON cd.fk_user_id = wd.fk_user_id",
      "Actual": "SELECT u.id, u.name, SUM(c.total_price) AS cart_total, SUM(wl.total_price) AS wishlist_total, AVG(c.total_price / c.quantity) AS cart_avg_price, AVG(wl.total_price / wl.quantity) AS wishlist_avg_price, COUNT(CASE WHEN wl.in_stock THEN 1 ELSE NULL END) AS wishlist_in_stock FROM users u LEFT JOIN carts c ON u.id = c.user_id LEFT JOIN wishlist_items wl ON u.id = wl.user_id GROUP BY u.id, u.name HAVING COUNT(DISTINCT c.product_id) > 1 AND c.cart_status != 'abandoned'",
      "Expected_Error": null,
      "Actual_Error": "relation \"users\" does not exist\nLINE 1: ...k THEN 1 ELSE NULL END) AS wishlist_in_stock FROM users u LE...\n                                                             ^\n"
    },
    {
      "NL": "What are the total loyalty points earned by loyalty members who enrolled after '2020-01-01', and what is their average spending threshold?",
      "Expected": "SELECT SUM(lifetime_loyalty_points_earned) AS total_points, AVG(annual_loyalty_spending_threshold) AS avg_spending FROM customers_loyalty_program WHERE initial_enrollment_date > '2020-01-01'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the details of all campaigns that have a target audience of 'young adults' and also find the names of suppliers who have supplied products in these campaigns with the quantity supplied.",
      "Expected": "SELECT c.campaign_name, c.target_audience, s.official_supplier_business_name, ca.quantity FROM campaigns c JOIN cart ca ON c.campaign_id = ca.fk_product_id JOIN suppliers s ON ca.fk_user_id = s.supplier_unique_identifier WHERE c.target_audience = 'young adults'",
      "Actual": "SELECT c.name, c.target_audience, c.id, s.name AS supplier_name, s.quantity_supplied FROM campaigns c JOIN campaign_suppliers cs ON c.id = cs.campaign_id JOIN suppliers s ON cs.supplier_id = s.id WHERE c.target_audience = 'young adults'",
      "Expected_Error": null,
      "Actual_Error": "relation \"campaign_suppliers\" does not exist\nLINE 1: ...r_name, s.quantity_supplied FROM campaigns c JOIN campaign_s...\n                                                             ^\n"
    },
    {
      "NL": "What is the total reach of each campaign and the total number of reviews submitted by each customer?",
      "Expected": "SELECT SUM(c.total_reach) AS total_campaign_reach, COUNT(prar.review_unique_identifier) AS total_customer_reviews FROM campaigns c JOIN product_reviews_and_ratings prar ON c.campaign_id = prar.referenced_product_identifier GROUP BY prar.reviewing_customer_identifier",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the order ids, customer ids, customer names, customer emails, customer phone numbers, order dates, total prices, discounts applied, tax amounts, shipping fees, estimated delivery dates, and cart statuses of customers who have made orders with total prices greater than 100, discounts applied greater than 10, tax amounts greater than 5, shipping fees greater than 10, and estimated delivery dates within the next 30 days, who are also eligible for special promotions, have loyalty points greater than 1000, have active subscriptions, are not premium, have a gender of 'M', an income greater than 50000, and an average spent per order greater than 100?",
      "Expected": "SELECT T1.id, T2.person_customer_id, T2.person_first_name, T2.person_last_name, T2.person_email, T2.person_phone_number, T1.last_activity_timestamp, T1.total_price, T1.discount_applied, T1.tax_amount, T1.shipping_fee, T1.estimated_delivery_date, T1.cart_status FROM cart AS T1 INNER JOIN customerinfo AS T2 ON T1.fk_user_id = T2.person_customer_id INNER JOIN customers_loyalty_program AS T3 ON T2.person_customer_id = T3.associated_customer_reference_id WHERE T1.total_price > 100 AND T1.discount_applied > 10 AND T1.tax_amount > 5 AND T1.shipping_fee > 10 AND T1.estimated_delivery_date > NOW() AND T1.estimated_delivery_date < NOW() + INTERVAL '30 day' AND T3.eligible_for_special_promotions = TRUE AND T3.accumulated_loyalty_points_balance > 1000 AND T2.account_has_active_subscription = TRUE AND T2.person_is_premium = FALSE AND T2.person_gender = 'M' AND T2.person_income > 50000 AND T2.preferences_avg_spent_per_order > 100",
      "Actual": "SELECT o.order_id, c.customer_id, c.customer_name, c.customer_email, c.customer_phone, o.order_date, o.total_price, o.discount, o.tax_amount, o.shipping_fee, o.estimated_delivery_date, c.cart_status FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.total_price > 100 AND o.discount > 10 AND o.tax_amount > 5 AND o.shipping_fee > 10 AND o.estimated_delivery_date BETWEEN NOW() + INTERVAL '30 days' AND NOW() + INTERVAL '30 days' AND c.is_eligible_for_promotions = TRUE AND c.loyalty_points > 1000 AND c.is_active_subscription = TRUE AND c.is_premium = FALSE AND c.gender = 'M' AND c.income > 50000 AND c.average_spent_per_order > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...d_delivery_date, c.cart_status FROM orders o JOIN customers ...\n                                                             ^\n"
    },
    {
      "NL": "Get the order id, total amount, and shipping address for orders where the order status is 'shipped' and the payment status is 'paid'.",
      "Expected": "SELECT order_id, total_amount, shipping_address_street FROM orders WHERE order_status = 'shipped' AND payment_status = 'paid';",
      "Actual": "SELECT order_id, total_amount, shipping_address FROM orders WHERE status = 'shipped' AND payment_status = 'paid';",
      "Expected_Error": null,
      "Actual_Error": "column \"shipping_address\" does not exist\nLINE 1: SELECT order_id, total_amount, shipping_address FROM orders ...\n                                       ^\n"
    },
    {
      "NL": "List all events where the device browser is 'Chrome' and the event type is 'purchase'.",
      "Expected": "SELECT * FROM events WHERE device_browser = 'Chrome' AND event_type = 'purchase'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the order ID, order date, and total amount for orders where the shipping fee is greater than 10 and the order status is 'completed'.",
      "Expected": "SELECT order_id, order_date, total_amount FROM orders WHERE shipping_fee > 10 AND order_status = 'completed';",
      "Actual": "SELECT order_id, order_date, total_amount FROM orders WHERE shipping_fee > 10 AND status = 'completed'",
      "Expected_Error": null,
      "Actual_Error": "column \"status\" does not exist\nLINE 1: ...al_amount FROM orders WHERE shipping_fee > 10 AND status = '...\n                                                             ^\n"
    },
    {
      "NL": "What is the total wishlist quantity for each customer with their loyalty points and preferred language?",
      "Expected": "SELECT SUM(w.quantity), c.person_loyalty_points, c.person_preferred_language FROM wishlist w FULL OUTER JOIN customerinfo c ON w.fk_user_id = c.person_customer_id GROUP BY c.person_loyalty_points, c.person_preferred_language",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all refunds that have been initiated by the customer.",
      "Expected": "SELECT * FROM refunds_returns WHERE refund_initiated_by = 'customer';",
      "Actual": "SELECT * FROM refunds WHERE customer_id IN (SELECT id FROM customers WHERE is_customer = TRUE)",
      "Expected_Error": null,
      "Actual_Error": "relation \"refunds\" does not exist\nLINE 1: SELECT * FROM refunds WHERE customer_id IN (SELECT id FROM c...\n                      ^\n"
    },
    {
      "NL": "Find the total revenue generated from orders placed in the last 30 days.",
      "Expected": "SELECT SUM(total_amount) FROM orders WHERE order_date >= NOW() - INTERVAL '30 days';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the average total amount spent on orders for each campaign type, along with the campaign name, and sort by average total amount in descending order.",
      "Expected": "SELECT c.campaign_type, c.campaign_name, AVG(o.total_amount) AS avg_total_amount FROM orders o JOIN campaigns c ON o.campaign_id = c.campaign_id GROUP BY c.campaign_type, c.campaign_name ORDER BY avg_total_amount DESC",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the transaction details of customers who have earned more than 100 bonus loyalty points last month.",
      "Expected": "SELECT T1.* FROM transactions_and_payments AS T1 INNER JOIN customers_loyalty_program AS T2 ON T1.corresponding_customer_reference_identifier = T2.associated_customer_reference_id WHERE T2.bonus_loyalty_points_last_month > 100;",
      "Actual": "SELECT t.* FROM transactions t JOIN customers c ON t.customer_id = c.id WHERE EXTRACT(MONTH FROM t.transaction_date) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM t.transaction_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 AND c.loyalty_points > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT t.* FROM transactions t JOIN customers c ON t.custome...\n                        ^\n"
    },
    {
      "NL": "Find the shipping carrier for the order with the highest shipping cost, along with the product name and total price for each order item in that order, and also include the customer notes and refund status for any refunds or returns related to those order items.",
      "Expected": "SELECT T3.carrier, T1.product_name, T1.total_price, T4.customer_notes, T4.refund_status FROM order_items AS T1 INNER JOIN shipping AS T3 ON T1.order_id = T3.fk_order_id INNER JOIN refunds_returns AS T4 ON T1.order_item_id = T4.fk_product_id WHERE T3.shipping_cost = ( SELECT MAX(shipping_cost) FROM shipping )",
      "Actual": "SELECT T1.carrier, T2.product_name, T2.price, T3.customer_notes, T3.refund_status FROM orders AS T1 INNER JOIN order_items AS T2 ON T1.id = T2.order_id INNER JOIN order_items_refunds AS T3 ON T2.id = T3.order_item_id ORDER BY T1.shipping_cost DESC LIMIT 1",
      "Expected_Error": null,
      "Actual_Error": "column t1.id does not exist\nLINE 1: ...FROM orders AS T1 INNER JOIN order_items AS T2 ON T1.id = T2...\n                                                             ^\n"
    },
    {
      "NL": "Find all customers who have made a purchase in the last 30 days, have a premium account, and have spent an average of more than $50 per order. Also, include details of their most recent event interaction, including the type of event, the device used, and the location of the event.",
      "Expected": "SELECT ci.*, e.event_type, e.device_platform, e.location_city, e.location_country FROM customerinfo ci JOIN events e ON ci.person_customer_id = e.person_customer_id WHERE ci.account_has_active_subscription = true AND ci.person_is_premium = true AND ci.preferences_avg_spent_per_order > 50 AND e.event_timestamp >= CURRENT_DATE - INTERVAL '30 days'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the average total price of all carts?",
      "Expected": "SELECT AVG(total_price) FROM cart",
      "Actual": "SELECT AVG(total_price) FROM carts",
      "Expected_Error": null,
      "Actual_Error": "relation \"carts\" does not exist\nLINE 1: SELECT AVG(total_price) FROM carts\n                                     ^\n"
    },
    {
      "NL": "What is the total price of the order items where the item status is 'delivered' and the return period is greater than 30 days?",
      "Expected": "SELECT SUM(total_price) FROM order_items WHERE item_status = 'delivered' AND return_period > 30",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average supplier rating and the supplier's country of operation for suppliers who have supplied more than 1000 products",
      "Expected": "SELECT average_supplier_rating, supplier_country_of_operation FROM suppliers WHERE total_number_of_products_supplied > 1000",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the names and email addresses of all customers who have placed more than one order, along with the shipping address and carrier for their most recent order",
      "Expected": "SELECT c.person_first_name, c.person_last_name, c.person_email, s.shipping_address, s.carrier FROM customerinfo c JOIN orders o ON c.person_customer_id = o.person_customer_id JOIN shipping s ON o.order_id = s.fk_order_id WHERE c.preferences_total_orders > 1 ORDER BY o.order_date DESC LIMIT 1",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the average review rating for each product, including only those with more than 10 reviews.",
      "Expected": "SELECT p.unique_product_identifier, AVG(prar.submitted_review_star_rating) AS avg_rating FROM product_reviews_and_ratings AS prar JOIN products AS p ON prar.referenced_product_identifier = p.unique_product_identifier GROUP BY p.unique_product_identifier HAVING COUNT(prar.review_unique_identifier) > 10;",
      "Actual": "SELECT AVG(rating) FROM reviews GROUP BY product_id HAVING COUNT(*) > 10",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT AVG(rating) FROM reviews GROUP BY product_id HAVING C...\n                                ^\n"
    },
    {
      "NL": "List the review unique identifier, review submission date, and submitted review star rating for reviews that have more than 5 helpful votes and are verified.",
      "Expected": "SELECT review_unique_identifier, customer_review_submission_date, submitted_review_star_rating FROM product_reviews_and_ratings WHERE number_of_helpful_votes_received > 5 AND verification_status_of_reviewer = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total amount of refund made by each person with the corresponding wishlist status.",
      "Expected": "SELECT SUM(T1.refund_amount), T2.wishlist_status FROM refunds_returns AS T1 INNER JOIN wishlist AS T2 ON T1.fk_user_id = T2.fk_user_id GROUP BY T2.wishlist_status",
      "Actual": "SELECT SUM(CASE WHEN wishlist_status = 'approved' THEN refund_amount ELSE 0 END) AS total_refund, person_id FROM refund_table GROUP BY person_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"refund_table\" does not exist\nLINE 1: ...mount ELSE 0 END) AS total_refund, person_id FROM refund_tab...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the average final billed amount for transactions that are not fraudulent.",
      "Expected": "SELECT AVG(final_billed_amount) AS avg_final_billed_amount FROM transactions_and_payments WHERE is_transaction_fraudulent = false;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the names and email addresses of customers whose loyalty membership will expire within the next 30 days and who have not made any loyalty point redemptions in the last 6 months.",
      "Expected": "SELECT c.person_first_name, c.person_last_name, c.person_email FROM customerinfo c JOIN customers_loyalty_program clp ON c.person_customer_id = clp.associated_customer_reference_id WHERE clp.expiration_date_of_loyalty_points BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days' AND (clp.last_redemption_date IS NULL OR clp.last_redemption_date < CURRENT_DATE - INTERVAL '6 months');",
      "Actual": "SELECT T1.name, T1.email FROM customers AS T1 INNER JOIN loyalty_memberships AS T2 ON T1.id = T2.customer_id WHERE T2.expiration_date - INTERVAL '30 days' <= CURRENT_DATE AND T2.redemption_date IS NULL",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT T1.name, T1.email FROM customers AS T1 INNER JOIN loy...\n                                      ^\n"
    },
    {
      "NL": "Get the total amount spent by each customer in the transactions_and_payments table, grouping by customer reference id.",
      "Expected": "SELECT corresponding_customer_reference_identifier, SUM(final_billed_amount) AS total_amount_spent FROM transactions_and_payments GROUP BY corresponding_customer_reference_identifier;",
      "Actual": "SELECT SUM(amount) AS total_spent FROM transactions_and_payments GROUP BY customer_reference_id",
      "Expected_Error": null,
      "Actual_Error": "column \"amount\" does not exist\nLINE 1: SELECT SUM(amount) AS total_spent FROM transactions_and_paym...\n                   ^\n"
    },
    {
      "NL": "Get the official business name of each supplier, the average rating of each supplier, and the number of products supplied by each supplier for suppliers that have products which were ordered by customers who have opened an email, sorted by the total number of products supplied in descending order.",
      "Expected": "SELECT T1.official_supplier_business_name, T1.average_supplier_rating, T1.total_number_of_products_supplied FROM suppliers AS T1 INNER JOIN events AS T2 ON T1.supplier_unique_identifier = T2.order_id WHERE T2.event_type = 'email_opened' GROUP BY T1.official_supplier_business_name, T1.average_supplier_rating, T1.total_number_of_products_supplied ORDER BY T1.total_number_of_products_supplied DESC",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total amount spent in transaction currency code EUR and the total number of transactions for the customers who have ordered more than 5 times, and calculate the average amount spent for each order. Also, get the total number of transactions for each customer and the average amount spent for each order. Additionally, get the details of the orders that were refunded and the reason for the refund, along with the details of the customers who have ordered the most, including the total amount spent and the average amount spent for each order.",
      "Expected": "WITH refund_info AS ( SELECT T1.transaction_unique_identifier, T1.corresponding_customer_reference_identifier, T1.refund_amount, T1.chargeback_dispute_reason FROM transactions_and_payments T1 WHERE T1.refund_status = TRUE AND T1.transaction_currency_code = 'EUR' ), customer_info AS ( SELECT T1.corresponding_customer_reference_identifier, COUNT(T1.transaction_unique_identifier) AS transaction_count, SUM(T1.final_billed_amount) AS total_spent, AVG(T1.final_billed_amount) AS avg_spent FROM transactions_and_payments T1 WHERE T1.transaction_currency_code = 'EUR' GROUP BY T1.corresponding_customer_reference_identifier HAVING COUNT(T1.transaction_unique_identifier) > 5 ) SELECT T2.corresponding_customer_reference_identifier, T2.transaction_count, T2.total_spent, T2.avg_spent, T1.refund_amount, T1.chargeback_dispute_reason FROM refund_info T1 INNER JOIN customer_info T2 ON T1.corresponding_customer_reference_identifier = T2.corresponding_customer_reference_identifier ORDER BY T2.transaction_count DESC LIMIT 1",
      "Actual": "SELECT SUM(t.amount) AS total_spent, COUNT(t.id) AS total_transactions, AVG(o.amount) AS avg_amount_spent, COUNT(o.id) AS total_orders, AVG(o.amount) AS avg_order_amount, COALESCE(r.refund_amount, 0) AS refund_amount, COALESCE(r.refund_reason, '') AS refund_reason, c.total_orders, c.total_spent, c.avg_order_amount FROM orders o JOIN customers c ON o.customer_id = c.id JOIN transactions t ON o.id = t.order_id WHERE t.currency_code = 'EUR' AND c.total_orders > 5 GROUP BY c.id, r.id ORDER BY c.total_orders DESC LIMIT 1",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...otal_spent, c.avg_order_amount FROM orders o JOIN customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the average standard retail price including tax for products from suppliers in the UK, who have at least 100 products supplied, and who have an average supplier rating of at least 4.0. Also, find the total number of such suppliers.",
      "Expected": "SELECT AVG(T2.standard_retail_price_including_tax) AS AVG_PRICE, COUNT(T1.supplier_unique_identifier) AS TOTAL_SUPPLIERS FROM suppliers AS T1 INNER JOIN products AS T2 ON T1.supplier_unique_identifier = T2.associated_supplier_reference_id WHERE T1.supplier_country_of_operation = 'UK' AND T1.total_number_of_products_supplied >= 100 AND T1.average_supplier_rating >= 4.0",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total transaction amount for each customer who has made at least one transaction using a digital wallet.",
      "Expected": "SELECT SUM(total_transaction_amount) FROM transactions_and_payments WHERE digital_wallet_used IS NOT NULL GROUP BY corresponding_customer_reference_identifier",
      "Actual": "SELECT SUM(t.amount) FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE t.payment_method = 'digital'",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT SUM(t.amount) FROM transactions t JOIN customers c ON...\n                                  ^\n"
    },
    {
      "NL": "Find the total amount spent and average supplier rating for each order with its corresponding supplier information.",
      "Expected": "SELECT SUM(o.total_amount), AVG(s.average_supplier_rating) FROM orders o LEFT JOIN suppliers s ON o.campaign_id = s.supplier_unique_identifier GROUP BY s.supplier_unique_identifier",
      "Actual": "SELECT SUM(o.total_amount), AVG(s.rating) , o.order_id, s.supplier_name, s.rating FROM orders o JOIN supplier_ratings sr ON o.order_id = sr.order_id JOIN suppliers s ON sr.supplier_id = s.supplier_id GROUP BY o.order_id",
      "Expected_Error": null,
      "Actual_Error": "relation \"supplier_ratings\" does not exist\nLINE 1: ..._id, s.supplier_name, s.rating FROM orders o JOIN supplier_r...\n                                                             ^\n"
    },
    {
      "NL": "List all carts along with the product quantity and total discounted price for each cart where the cart was added more than 30 days ago.",
      "Expected": "SELECT id, fk_product_id, quantity, discounted_total_price FROM cart WHERE added_at < NOW() - INTERVAL '30 days';",
      "Actual": "SELECT c.id, c.product_id, p.name, c.quantity, p.price, p.price * c.quantity - (p.price * c.quantity * 0.1) AS total_discounted_price FROM carts c JOIN products p ON c.product_id = p.id WHERE c.added_at < NOW() - INTERVAL '30 days';",
      "Expected_Error": null,
      "Actual_Error": "relation \"carts\" does not exist\nLINE 1: ... c.quantity * 0.1) AS total_discounted_price FROM carts c JO...\n                                                             ^\n"
    },
    {
      "NL": "What is the total amount spent on all campaigns?",
      "Expected": "SELECT SUM(actual_spent) FROM campaigns",
      "Actual": "SELECT SUM(total_spent) FROM campaigns",
      "Expected_Error": null,
      "Actual_Error": "column \"total_spent\" does not exist\nLINE 1: SELECT SUM(total_spent) FROM campaigns\n                   ^\nHINT:  Perhaps you meant to reference the column \"campaigns.actual_spent\".\n"
    },
    {
      "NL": "Find the total number of orders and total amount spent for each month in 2022.",
      "Expected": "SELECT CAST(EXTRACT(MONTH FROM order_date) AS TEXT) AS month, COUNT(order_id) AS total_orders, SUM(total_amount) AS total_amount FROM orders WHERE CAST(EXTRACT(YEAR FROM order_date) AS TEXT) = '2022' GROUP BY month",
      "Actual": "SELECT EXTRACT(YEAR FROM o.order_date) AS year, EXTRACT(MONTH FROM o.order_date) AS month, COUNT(o.id) AS total_orders, SUM(o.total_amount) AS total_amount FROM orders o WHERE EXTRACT(YEAR FROM o.order_date) = 2022 GROUP BY EXTRACT(YEAR FROM o.order_date), EXTRACT(MONTH FROM o.order_date)",
      "Expected_Error": null,
      "Actual_Error": "column o.id does not exist\nLINE 1: ... EXTRACT(MONTH FROM o.order_date) AS month, COUNT(o.id) AS t...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of reviews and the average review sentiment score for each product, ordered by the total number of reviews in descending order.",
      "Expected": "SELECT p.product_display_name, COUNT(pr.review_unique_identifier) AS total_reviews, AVG(pr.sentiment_analysis_score) AS average_sentiment FROM products p JOIN product_reviews_and_ratings pr ON p.unique_product_identifier = pr.referenced_product_identifier GROUP BY p.product_display_name ORDER BY total_reviews DESC;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Calculate the average total amount of orders placed within the campaigns that generated more than $500 in revenue, along with the campaign name.",
      "Expected": "SELECT c.campaign_name, AVG(o.total_amount) AS average_total_amount FROM orders o JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE c.revenue_generated > 500 GROUP BY c.campaign_name;",
      "Actual": "SELECT AVG(T1.total_amount) ,  T2.campaign_name FROM orders AS T1 JOIN campaigns AS T2 ON T1.campaign_id = T2.id WHERE T2.revenue > 500",
      "Expected_Error": null,
      "Actual_Error": "column t2.id does not exist\nLINE 1: ...rs AS T1 JOIN campaigns AS T2 ON T1.campaign_id = T2.id WHER...\n                                                             ^\n"
    },
    {
      "NL": "Find the total shipping cost for all orders shipped to the city of New York.",
      "Expected": "SELECT SUM(shipping_cost) FROM shipping WHERE shipping_city = 'New York'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of wishlist records for each user, along with the total number of products supplied by each supplier, and also find the total reach and revenue generated for each campaign that has a higher budget than the average budget of all campaigns, and also find the shipping cost and shipping status for each shipping record where the shipping address is in the same city as the registered business address of the supplier with the highest average supplier rating, and also find the average supplier rating and official business name for each supplier who operates in the same country as the supplier with the highest average supplier rating.",
      "Expected": "WITH ranked_suppliers AS (SELECT supplier_unique_identifier, total_number_of_products_supplied, average_supplier_rating, official_supplier_business_name, supplier_country_of_operation, registered_business_address, ROW_NUMBER() OVER (ORDER BY average_supplier_rating DESC) AS rank FROM suppliers), top_supplier AS (SELECT supplier_country_of_operation, registered_business_address FROM ranked_suppliers WHERE rank = 1), campaign_stats AS (SELECT campaign_id, total_reach, revenue_generated, budget FROM campaigns WHERE budget > (SELECT AVG(budget) FROM campaigns)), shipping_stats AS (SELECT shipping_cost, shipping_status FROM shipping WHERE shipping_city IN (SELECT registered_business_address FROM top_supplier)), wishlist_stats AS (SELECT fk_user_id, COUNT(*) AS total_wishlist_records FROM wishlist GROUP BY fk_user_id) SELECT ws.fk_user_id, ws.total_wishlist_records, s.total_number_of_products_supplied, cs.total_reach, cs.revenue_generated, ss.shipping_cost, ss.shipping_status, s.average_supplier_rating, s.official_supplier_business_name FROM wishlist_stats ws JOIN suppliers s ON 1 = 1 JOIN top_supplier ts ON s.supplier_country_of_operation = ts.supplier_country_of_operation JOIN campaign_stats cs ON 1 = 1 JOIN shipping_stats ss ON 1 = 1",
      "Actual": "SELECT COUNT(*) AS wishlist_count, COUNT(*) AS supplier_count, SUM(reach) AS total_reach, SUM(revenue) AS total_revenue, SUM(shipping_cost) AS total_shipping_cost, shipping_status, AVG(rating) AS avg_rating, business_name FROM (SELECT user_id FROM wishlist GROUP BY user_id) AS wishlist JOIN product ON wishlist.user_id = product.user_id JOIN supplier ON product.supplier_id = supplier.id JOIN campaign ON supplier.id = campaign.supplier_id WHERE campaign.budget > (SELECT AVG(budget) FROM campaign) GROUP BY campaign.id JOIN shipping ON shipping.campaign_id = shipping.campaign_id JOIN supplier_business ON shipping.supplier_id = supplier_business.supplier_id WHERE shipping.city = (SELECT city FROM supplier_business WHERE country = (SELECT country FROM supplier WHERE rating = (SELECT MAX(rating) FROM supplier)))",
      "Expected_Error": null,
      "Actual_Error": "syntax error at or near \"JOIN\"\nLINE 1: ...T AVG(budget) FROM campaign) GROUP BY campaign.id JOIN shipp...\n                                                             ^\n"
    },
    {
      "NL": "Provide the loyalty tier level and preferred language of customers who have purchased products from the wishlist with a total discount amount redeemed of more than $10.",
      "Expected": "SELECT T2.loyalty_program_tier_level, T1.person_preferred_language FROM customerinfo AS T1 INNER JOIN customers_loyalty_program AS T2 ON T1.person_customer_id = T2.associated_customer_reference_id INNER JOIN wishlist AS T3 ON T1.person_customer_id = T3.fk_user_id WHERE T2.total_discount_amount_redeemed > 10",
      "Actual": "SELECT T1.loyalty_tier_level, T1.preferred_language FROM customers AS T1 INNER JOIN wishlist AS T2 ON T1.customer_id = T2.customer_id INNER JOIN order_details AS T3 ON T2.order_id = T3.order_id WHERE T3.discount_amount > 10",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...T1.loyalty_tier_level, T1.preferred_language FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "List all the order items that are returnable and have a quantity greater than 1, along with the product name and the order id.",
      "Expected": "SELECT product_name, order_id FROM order_items WHERE is_returnable = TRUE AND quantity > 1;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average order value and total orders for customers who have placed at least one order in the last 30 days, and have a loyalty program status with a balance greater than 100. Also, include the customer's name and occupation in the results.",
      "Expected": "SELECT AVG(o.total_amount), COUNT(o.order_id), ci.person_first_name, ci.person_last_name, ci.person_occupation FROM orders o INNER JOIN customerinfo ci ON o.person_customer_id = ci.person_customer_id WHERE o.order_date >= NOW() - INTERVAL '30 day' AND ci.account_account_balance > 100 GROUP BY ci.person_first_name, ci.person_last_name, ci.person_occupation",
      "Actual": "SELECT AVG(o.order_value) ,  COUNT(o.order_id) ,  c.name ,  c.occupation FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date >= NOW() - INTERVAL '30 days' AND c.loyalty_program_status = 'active' AND c.loyalty_balance > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ..._id) ,  c.name ,  c.occupation FROM orders o JOIN customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the customer's name and total loyalty points earned from all transactions for customers who have more than 100 loyalty points.",
      "Expected": "SELECT T1.person_first_name, T1.person_last_name, COALESCE(SUM(T2.associated_loyalty_points_earned), 0) FROM customerinfo AS T1 LEFT JOIN transactions_and_payments AS T2 ON T1.person_customer_id = T2.corresponding_customer_reference_identifier WHERE T1.person_loyalty_points > 100 GROUP BY T1.person_first_name, T1.person_last_name",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of loyalty points for customers who have participated in exclusive beta testing and have a loyalty program tier level of 'Platinum'.",
      "Expected": "SELECT SUM(c.person_loyalty_points) FROM customerinfo c JOIN customers_loyalty_program clp ON c.person_customer_id = clp.associated_customer_reference_id WHERE clp.participation_in_exclusive_beta_testing = true AND clp.loyalty_program_tier_level = 'Platinum';",
      "Actual": "SELECT COUNT(*) FROM customers JOIN loyalty_program ON customers.id = loyalty_program.customer_id WHERE loyalty_program.tier_level = 'Platinum' AND loyalty_program.exclusive_beta_tester = TRUE;",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers JOIN loyalty_program ON custo...\n                             ^\n"
    },
    {
      "NL": "List all customers who have made more than 10 orders with their email addresses and total orders count.",
      "Expected": "SELECT person_email, preferences_total_orders FROM customerinfo WHERE preferences_total_orders > 10;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of verified reviews written by premium customers who have made more than 5 purchases and have an account balance greater than $500.",
      "Expected": "SELECT COUNT(*) FROM product_reviews_and_ratings AS prr JOIN customerinfo AS ci ON prr.reviewing_customer_identifier = ci.person_customer_id WHERE prr.verification_status_of_reviewer = TRUE AND ci.person_is_premium = TRUE AND ci.preferences_total_orders > 5 AND ci.account_account_balance > 500;",
      "Actual": "SELECT COUNT(*) FROM reviews AS r JOIN customers AS c ON r.customer_id = c.customer_id WHERE c.premium = TRUE AND c.purchases > 5 AND c.balance > 500",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT COUNT(*) FROM reviews AS r JOIN customers AS c ON r.c...\n                             ^\n"
    },
    {
      "NL": "Get the names of the campaigns with a budget greater than $10,000, along with the names of the suppliers who supply products with a quantity greater than 50 and have an average rating greater than 3, and the total revenue generated by these campaigns.",
      "Expected": "SELECT T3.campaign_name, T5.official_supplier_business_name, SUM(T3.revenue_generated) FROM campaigns AS T1 INNER JOIN campaigns AS T3 ON T1.campaign_id = T3.campaign_id INNER JOIN inventory AS T4 ON T3.campaign_id = T4.referenced_product_id INNER JOIN suppliers AS T5 ON T4.supplier_id = T5.supplier_unique_identifier WHERE T3.budget > 10000 AND T4.quantity > 50 AND T5.average_supplier_rating > 3 GROUP BY T3.campaign_name, T5.official_supplier_business_name",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the names of the suppliers who supply products with a quantity greater than 100 and have an average rating greater than 4, along with the product names and their current stock status.",
      "Expected": "SELECT T3.official_supplier_business_name, T2.referenced_product_id, T2.stock_status FROM inventory AS T1 INNER JOIN inventory AS T2 ON T1.id = T2.id INNER JOIN suppliers AS T3 ON T2.supplier_id = T3.supplier_unique_identifier WHERE T2.quantity > 100 AND T3.average_supplier_rating > 4",
      "Actual": "SELECT T1.name, T2.name, T2.current_stock FROM suppliers AS T1 INNER JOIN product_suppliers AS T2 ON T1.id = T2.supplier_id INNER JOIN products AS T3 ON T2.product_id = T3.id WHERE T3.quantity > 100 AND T3.average_rating > 4",
      "Expected_Error": null,
      "Actual_Error": "relation \"product_suppliers\" does not exist\nLINE 1: ... T2.current_stock FROM suppliers AS T1 INNER JOIN product_su...\n                                                             ^\n"
    },
    {
      "NL": "Find the loyalty program tier level and the total number of verified reviews for products purchased by customers who have a loyalty membership unique identifier greater than 1000 and have made a transaction with a total transaction amount greater than 500.",
      "Expected": "SELECT c.loyalty_program_tier_level, p.total_number_of_verified_reviews FROM customers_loyalty_program c JOIN transactions_and_payments t ON c.associated_customer_reference_id = t.corresponding_customer_reference_identifier JOIN products p ON t.linked_order_reference_identifier = p.unique_product_identifier WHERE c.loyalty_membership_unique_identifier > 1000 AND t.total_transaction_amount > 500",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the order status and total amount for all orders with shipping address in California.",
      "Expected": "SELECT order_status, SUM(total_amount) AS total_amount FROM orders WHERE shipping_address_state = 'California' GROUP BY order_status",
      "Actual": "SELECT order_status, SUM(total_amount) FROM orders WHERE shipping_address IN ('California', 'CA') GROUP BY order_status",
      "Expected_Error": null,
      "Actual_Error": "column \"shipping_address\" does not exist\nLINE 1: ...order_status, SUM(total_amount) FROM orders WHERE shipping_a...\n                                                             ^\n"
    },
    {
      "NL": "Fetch all items in the wishlist for the user with user id 123.",
      "Expected": "SELECT id, fk_product_id, price_at_addition, discount_at_addition, quantity FROM wishlist WHERE fk_user_id = 123;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the top 5 campaigns by revenue generated?",
      "Expected": "SELECT campaign_name, revenue_generated FROM campaigns ORDER BY revenue_generated DESC LIMIT 5",
      "Actual": "SELECT campaign, SUM(revenue) FROM campaigns GROUP BY campaign ORDER BY SUM(revenue) DESC LIMIT 5;",
      "Expected_Error": null,
      "Actual_Error": "column \"campaign\" does not exist\nLINE 1: SELECT campaign, SUM(revenue) FROM campaigns GROUP BY campai...\n               ^\nHINT:  Perhaps you meant to reference the column \"campaigns.campaign_id\".\n"
    },
    {
      "NL": "Get the total number of products, along with their names, and the quantity in stock for products with a stock status of 'in stock'.",
      "Expected": "SELECT T2.product_display_name, T1.quantity, COUNT(T1.referenced_product_id) FROM inventory AS T1 INNER JOIN products AS T2 ON T1.referenced_product_id = T2.unique_product_identifier WHERE T1.stock_status = 'in stock' GROUP BY T2.product_display_name, T1.quantity",
      "Actual": "SELECT COUNT(*) ,  name ,  quantity FROM products WHERE status = 'in stock'",
      "Expected_Error": null,
      "Actual_Error": "column \"name\" does not exist\nLINE 1: SELECT COUNT(*) ,  name ,  quantity FROM products WHERE stat...\n                           ^\n"
    },
    {
      "NL": "What is the total number of helpful votes received by each product and the total price of each order item for the product?",
      "Expected": "SELECT SUM(prar.number_of_helpful_votes_received) AS total_helpful_votes, SUM(oi.total_price) AS total_order_item_price FROM product_reviews_and_ratings prar JOIN order_items oi ON prar.referenced_product_identifier = oi.product_id GROUP BY oi.product_id",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the customer ID, first name, and last name of customers who have initiated a refund and the refund status is 'pending'.",
      "Expected": "SELECT ci.person_customer_id, ci.person_first_name, ci.person_last_name FROM customerinfo ci JOIN refunds_returns rr ON ci.person_customer_id = rr.fk_user_id WHERE rr.refund_initiated_by = 'customer' AND rr.refund_status = 'pending';",
      "Actual": "SELECT customer_id, first_name, last_name FROM customers WHERE refund_status = 'pending' AND refund_initiated = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT customer_id, first_name, last_name FROM customers WHE...\n                                                       ^\n"
    },
    {
      "NL": "Get the list of customers who have earned the most loyalty points in the last year, along with their total spending, average order value, and the number of orders they have placed, considering only customers who have made at least 5 purchases and have a loyalty tier level of 'Gold' or higher.",
      "Expected": "SELECT cl.associated_customer_reference_id, SUM(o.total_amount), AVG(o.total_amount), COUNT(DISTINCT o.order_id) FROM orders o JOIN customers_loyalty_program cl ON o.person_customer_id = cl.associated_customer_reference_id JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE cl.loyalty_program_tier_level IN ('Gold', 'Platinum') AND o.order_date > NOW() - INTERVAL '1 year' GROUP BY cl.associated_customer_reference_id HAVING COUNT(DISTINCT o.order_id) >= 5 ORDER BY SUM(cl.accumulated_loyalty_points_balance) DESC",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the number of orders that have been cancelled or returned, along with the total amount of discounts applied to these orders, and the average review rating for these orders. Include only orders made by customers who have also completed a survey. Group the results by the customer ID.",
      "Expected": "SELECT o.person_customer_id, COUNT(o.order_id), SUM(o.discount_applied), AVG(e.review_rating) FROM orders o INNER JOIN events e ON o.order_id = e.order_id INNER JOIN refunds_returns rr ON o.order_id = rr.fk_order_id WHERE o.order_status IN ('Cancelled', 'Returned') AND e.event_type = 'Survey Completed' GROUP BY o.person_customer_id",
      "Actual": "SELECT COUNT(o.id) AS cancelled_orders, SUM(d.amount) AS total_discounts, AVG(r.rating) AS avg_review_rating FROM orders o JOIN customer_survey cs ON o.customer_id = cs.customer_id JOIN order_discount d ON o.id = d.order_id JOIN order_review r ON o.id = r.order_id WHERE o.status IN ('cancelled', 'returned')",
      "Expected_Error": null,
      "Actual_Error": "relation \"customer_survey\" does not exist\nLINE 1: ...r.rating) AS avg_review_rating FROM orders o JOIN customer_s...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve detailed product information for all items that have been part of orders shipped after January 1, 2023, with a promotional discount greater than 20%, and which have a shipping status indicating they are delivered, grouping the results by product category and listing the count of such products in each category.",
      "Expected": "SELECT p.product_category_primary, COUNT(*) as product_count FROM products p JOIN order_items oi ON p.unique_product_identifier = oi.product_id JOIN shipping s ON oi.order_id = s.fk_order_id WHERE s.shipped_date > '2023-01-01' AND p.promotional_discounted_price > 0.20 AND s.shipping_status = 'Delivered' GROUP BY p.product_category_primary;",
      "Actual": "SELECT COUNT(*) ,  product_category FROM orders JOIN order_items ON orders.id = order_items.order_id JOIN products ON order_items.product_id = products.id WHERE order_items.shipping_status = 'delivered' AND order_items.discount > 20 AND orders.shipped_date > '2023-01-01' GROUP BY product_category",
      "Expected_Error": null,
      "Actual_Error": "column orders.id does not exist\nLINE 1: ... product_category FROM orders JOIN order_items ON orders.id ...\n                                                             ^\n"
    },
    {
      "NL": "Find the average refund amount for all orders that have been fully refunded and have a status of 'approved' in the refunds_returns table.",
      "Expected": "SELECT AVG(rr.refund_amount) FROM refunds_returns rr JOIN orders o ON rr.fk_order_id = o.order_id WHERE rr.status = 'approved' AND rr.refund_amount > 0",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total discount amount redeemed by customers who have a lifetime loyalty points earned greater than 1000 and have an anniversary reward voucher status of True?",
      "Expected": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program WHERE lifetime_loyalty_points_earned > 1000 AND anniversary_reward_voucher_status = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the name and phone number of each customer who has placed an order with a total amount greater than 100, along with the order date and total amount?",
      "Expected": "SELECT T1.person_first_name, T1.person_last_name, T1.person_phone_number, T2.order_date, T2.total_amount FROM customerinfo AS T1 INNER JOIN orders AS T2 ON T1.person_customer_id = T2.person_customer_id WHERE T2.total_amount > 100",
      "Actual": "SELECT T1.name, T1.phone, T2.order_date, T2.total_amount FROM customers AS T1 INNER JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.total_amount > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...me, T1.phone, T2.order_date, T2.total_amount FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Get the list of customer names, loyalty program tier levels, and total amount spent by customers who have participated in exclusive beta testing and have made orders with a total amount greater than 100",
      "Expected": "SELECT ci.person_first_name, ci.person_last_name, clp.loyalty_program_tier_level, SUM(o.total_amount) FROM customers_loyalty_program clp JOIN customerinfo ci ON clp.associated_customer_reference_id = ci.person_customer_id JOIN orders o ON ci.person_customer_id = o.person_customer_id WHERE clp.participation_in_exclusive_beta_testing = TRUE AND o.total_amount > 100 GROUP BY ci.person_first_name, ci.person_last_name, clp.loyalty_program_tier_level",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List the product identifiers and review submission dates of reviews with more than 10 helpful votes.",
      "Expected": "SELECT T1.referenced_product_identifier, T1.customer_review_submission_date FROM product_reviews_and_ratings AS T1 WHERE T1.number_of_helpful_votes_received > 10",
      "Actual": "SELECT product_id, review_submission_date FROM reviews WHERE helpful_votes > 10",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT product_id, review_submission_date FROM reviews WHERE...\n                                                       ^\n"
    },
    {
      "NL": "What are the total impressions and clicks for each campaign name where the campaign has a start date after '2020-01-01' and there is at least one order item with a matching product id in the inventory table?",
      "Expected": "SELECT c.campaign_name, SUM(c.impressions), SUM(c.clicks) FROM campaigns c JOIN inventory i ON c.campaign_id = i.referenced_product_id WHERE c.start_date > '2020-01-01' GROUP BY c.campaign_name",
      "Actual": "SELECT SUM(i.clicks), SUM(i.impressions), c.name FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN inventory i ON oi.product_id = i.id JOIN campaigns c ON o.campaign_id = c.id WHERE c.start_date > '2020-01-01' GROUP BY c.name",
      "Expected_Error": null,
      "Actual_Error": "column o.id does not exist\nLINE 1: ...ons), c.name FROM orders o JOIN order_items oi ON o.id = oi....\n                                                             ^\n"
    },
    {
      "NL": "Get the first name and last name of customers who have at least one item in their wishlist",
      "Expected": "SELECT DISTINCT T1.person_first_name, T1.person_last_name FROM customerinfo AS T1 INNER JOIN wishlist AS T2 ON T1.person_customer_id = T2.fk_user_id",
      "Actual": "SELECT first_name, last_name FROM customers WHERE id IN (SELECT customer_id FROM wishlist GROUP BY customer_id HAVING COUNT(*) > 0)",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT first_name, last_name FROM customers WHERE id IN (SEL...\n                                          ^\n"
    },
    {
      "NL": "What is the average amount spent per order by customers who have more than 100 loyalty points?",
      "Expected": "SELECT AVG(preferences_avg_spent_per_order) FROM customerinfo WHERE person_loyalty_points > 100",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all reviews where the review's star rating is above 4 and the review is flagged as inappropriate, showing the review text, product identifier, and customer identifier.",
      "Expected": "SELECT textual_review_feedback, referenced_product_identifier, reviewing_customer_identifier FROM product_reviews_and_ratings WHERE submitted_review_star_rating > 4 AND flagged_as_inappropriate = true;",
      "Actual": "SELECT review_text, product_identifier, customer_identifier FROM reviews WHERE star_rating > 4 AND flagged_inappropriate",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ...ext, product_identifier, customer_identifier FROM reviews WH...\n                                                             ^\n"
    },
    {
      "NL": "Select all shipping information for orders shipped in the last 30 days.",
      "Expected": "SELECT * FROM shipping WHERE shipped_date >= (CURRENT_DATE - INTERVAL '30 days');",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all transactions made by customers who have purchased a product that is currently in stock and has a low inventory turnover rate, and also show the corresponding shipping details for those transactions, including the estimated delivery date and shipping cost.",
      "Expected": "SELECT t.transaction_unique_identifier, t.corresponding_customer_reference_identifier, t.transaction_date_and_time, s.estimated_delivery, s.shipping_cost FROM transactions_and_payments t JOIN shipping s ON t.linked_order_reference_identifier = s.fk_order_id JOIN inventory i ON t.linked_order_reference_identifier = i.referenced_product_id WHERE i.inventory_turnover_rate < 0.5 AND i.stock_status = 'In Stock'",
      "Actual": "SELECT t.id, t.customer_id, t.product_id, t.quantity, t.inventory_turnover_rate, t.shipping_cost, t.estimated_delivery_date, s.shipping_address, s.shipping_city, s.shipping_state, s.shipping_zip, s.shipping_country, s.shipping_provider FROM transactions t JOIN products p ON t.product_id = p.id JOIN inventory i ON p.id = i.product_id JOIN shipping s ON t.shipping_id = s.id WHERE p.current_stock = TRUE AND t.inventory_turnover_rate < 10 AND s.shipping_cost > 0",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: ...zip, s.shipping_country, s.shipping_provider FROM transactio...\n                                                             ^\n"
    },
    {
      "NL": "Which events have been triggered by customers who have placed an order with a total amount greater than $100 and what is the average time spent by these customers during the events?",
      "Expected": "SELECT T3.event_type, AVG(T3.time_spent_seconds) FROM orders AS T1 INNER JOIN customerinfo AS T2 ON T1.person_customer_id = T2.person_customer_id INNER JOIN events AS T3 ON T2.person_customer_id = T3.person_customer_id WHERE T1.total_amount > 100 GROUP BY T3.event_type",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average conversion rate and ROI of all campaigns that had a positive review sentiment score (greater than 0.5) for at least one of their associated products. Also, include the campaign name and status in the results.",
      "Expected": "SELECT c.campaign_name, c.campaign_status, AVG(c.conversions * 1.0 / c.clicks) AS avg_conversion_rate, AVG(c.roi) AS avg_roi FROM campaigns c JOIN product_reviews_and_ratings prr ON c.campaign_id = prr.referenced_product_identifier WHERE prr.sentiment_analysis_score > 0.5 GROUP BY c.campaign_name, c.campaign_status;",
      "Actual": "SELECT AVG(CASE WHEN SUM(CASE WHEN product_sentiment_score > 0.5 THEN 1 ELSE 0 END) > 0 THEN product_sentiment_score ELSE NULL END) AS avg_conversion_rate, AVG(CASE WHEN SUM(CASE WHEN product_sentiment_score > 0.5 THEN 1 ELSE 0 END) > 0 THEN product_revenue ELSE NULL END) AS avg_roi, campaign_name, status FROM campaigns",
      "Expected_Error": null,
      "Actual_Error": "column \"product_sentiment_score\" does not exist\nLINE 1: SELECT AVG(CASE WHEN SUM(CASE WHEN product_sentiment_score >...\n                                           ^\n"
    },
    {
      "NL": "Find the total revenue generated by transactions for premium customers between January 1, 2023, and December 31, 2023.",
      "Expected": "SELECT SUM(tp.final_billed_amount) FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier WHERE ci.person_is_premium = TRUE AND tp.transaction_date_and_time BETWEEN '2023-01-01' AND '2023-12-31';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total revenue generated across all campaigns?",
      "Expected": "SELECT SUM(revenue_generated) FROM campaigns;",
      "Actual": "SELECT SUM(total_revenue) FROM campaigns",
      "Expected_Error": null,
      "Actual_Error": "column \"total_revenue\" does not exist\nLINE 1: SELECT SUM(total_revenue) FROM campaigns\n                   ^\n"
    },
    {
      "NL": "Find all the orders whose shipment status is not shipped and their respective customers' total wishlist value exceeds 1000, for each customer display their name, order id, order date, and total wishlist value.",
      "Expected": "SELECT DISTINCT T2.order_id, T2.order_date, T1.fk_user_id, SUM(T1.price_at_addition) FROM wishlist AS T1 INNER JOIN orders AS T2 ON T1.fk_user_id = T2.person_customer_id INNER JOIN shipping AS T3 ON T2.order_id = T3.fk_order_id WHERE T3.shipping_status != 'shipped' GROUP BY T2.order_id, T1.fk_user_id HAVING SUM(T1.price_at_addition) > 1000;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total number of orders and total spent for customers who have a newsletter subscription",
      "Expected": "SELECT SUM(preferences_total_orders), SUM(preferences_avg_spent_per_order) FROM customerinfo WHERE preferences_newsletter_subscription = TRUE",
      "Actual": "SELECT COUNT(*) ,  SUM(total_amount) FROM orders JOIN customers ON orders.customer_id = customers.customer_id WHERE customers.newsletter_subscription = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...CT COUNT(*) ,  SUM(total_amount) FROM orders JOIN customers ...\n                                                             ^\n"
    },
    {
      "NL": "Get the total number of orders for customers who have more than 100 loyalty points.",
      "Expected": "SELECT COUNT(person_customer_id) FROM customerinfo WHERE person_loyalty_points > 100",
      "Actual": "SELECT COUNT(*) FROM orders WHERE customer_id IN (SELECT customer_id FROM loyalty_points WHERE points > 100)",
      "Expected_Error": null,
      "Actual_Error": "relation \"loyalty_points\" does not exist\nLINE 1: ...ers WHERE customer_id IN (SELECT customer_id FROM loyalty_po...\n                                                             ^\n"
    },
    {
      "NL": "Find the total accumulated loyalty points for customers who have participated in exclusive beta testing and have ordered products with a promotional discount greater than 10%.",
      "Expected": "SELECT clp.associated_customer_reference_id, SUM(clp.accumulated_loyalty_points_balance) AS total_loyalty_points \nFROM customers_loyalty_program clp\nJOIN cart c ON clp.associated_customer_reference_id = c.fk_user_id\nJOIN products p ON c.fk_product_id = p.unique_product_identifier\nWHERE clp.participation_in_exclusive_beta_testing = TRUE AND p.percentage_discount_applied > 10\nGROUP BY clp.associated_customer_reference_id;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the names of all the products that have a standard retail price greater than $100?",
      "Expected": "SELECT product_display_name FROM products WHERE standard_retail_price_including_tax > 100;",
      "Actual": "SELECT name FROM products WHERE retail_price > 100;",
      "Expected_Error": null,
      "Actual_Error": "column \"name\" does not exist\nLINE 1: SELECT name FROM products WHERE retail_price > 100;\n               ^\n"
    },
    {
      "NL": "Find the total number of wishlist items for all customers who have  purchased a product with the category 'Fashion', along with the number of order items for each customer.",
      "Expected": "SELECT SUM(T1.preferences_wishlist_items), COUNT(T3.order_id) FROM customerinfo T1 INNER JOIN order_items T2 ON T1.person_customer_id = T2.order_id INNER JOIN events T3 ON T3.person_customer_id = T1.person_customer_id WHERE T2.product_name = 'Fashion'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all products that have a higher standard retail price and are also perishable, along with their corresponding inventory quantities and last restock dates.",
      "Expected": "SELECT p.standard_retail_price_including_tax, p.perishable_product_flag, i.quantity, i.last_restock_date FROM products p JOIN inventory i ON p.unique_product_identifier = i.referenced_product_id WHERE p.perishable_product_flag = TRUE AND p.standard_retail_price_including_tax > (SELECT AVG(standard_retail_price_including_tax) FROM products)",
      "Actual": "SELECT p.name, i.quantity, i.last_restock FROM products p JOIN inventory i ON p.id = i.product_id WHERE p.standard_retail_price > p.list_price AND p.perishable = TRUE",
      "Expected_Error": null,
      "Actual_Error": "column p.id does not exist\nLINE 1: ....last_restock FROM products p JOIN inventory i ON p.id = i.p...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"i.id\".\n"
    },
    {
      "NL": "Find the average star rating of reviews for each customer who has submitted more than 5 reviews.",
      "Expected": "SELECT c.person_customer_id, c.person_first_name, c.person_last_name, AVG(pr.submitted_review_star_rating) AS average_star_rating FROM product_reviews_and_ratings pr JOIN customerinfo c ON pr.reviewing_customer_identifier = c.person_customer_id GROUP BY c.person_customer_id HAVING COUNT(pr.review_unique_identifier) > 5;",
      "Actual": "SELECT AVG(r.rating) FROM reviews r JOIN customers c ON r.customer_id = c.customer_id GROUP BY c.customer_id HAVING COUNT(r.review_id) > 5",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT AVG(r.rating) FROM reviews r JOIN customers c ON r.cu...\n                                  ^\n"
    },
    {
      "NL": "Find all reviews with a rating of 5 and a verification status of true, along with the corresponding product identifier and review submission date.",
      "Expected": "SELECT referenced_product_identifier, customer_review_submission_date FROM product_reviews_and_ratings WHERE submitted_review_star_rating = 5 AND verification_status_of_reviewer = TRUE",
      "Actual": "SELECT product_id, submission_date FROM reviews WHERE rating = 5 AND verified = true",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT product_id, submission_date FROM reviews WHERE rating...\n                                                ^\n"
    },
    {
      "NL": "Find the total amount of all orders where the order status is 'delivered' and the customer has clicked on a push notification.",
      "Expected": "SELECT SUM(o.total_amount) FROM orders o JOIN events e ON o.order_id = e.order_id WHERE o.order_status = 'delivered' AND e.push_notification_clicked = TRUE",
      "Actual": "SELECT SUM(total_amount) FROM orders WHERE status = 'delivered' AND push_notification_clicked = TRUE;",
      "Expected_Error": null,
      "Actual_Error": "column \"status\" does not exist\nLINE 1: SELECT SUM(total_amount) FROM orders WHERE status = 'deliver...\n                                                   ^\n"
    },
    {
      "NL": "What is the email address and preferred payment method of each customer who has placed an order with a payment status of 'paid'?",
      "Expected": "SELECT T1.person_email, T1.account_preferred_payment_method FROM customerinfo AS T1 INNER JOIN orders AS T2 ON T1.person_customer_id = T2.person_customer_id WHERE T2.payment_status = 'paid'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the list of products that have been added to a user's wishlist more than 5 times and have a low stock status, including the product's name, the supplier's business name, and the last updated stock date.",
      "Expected": "SELECT p.product_display_name, s.official_supplier_business_name, i.last_updated FROM products p JOIN inventory i ON p.unique_product_identifier = i.referenced_product_id JOIN suppliers s ON i.supplier_id = s.supplier_unique_identifier JOIN wishlist w ON p.unique_product_identifier = w.fk_product_id WHERE i.stock_status = 'Low' GROUP BY p.product_display_name, s.official_supplier_business_name, i.last_updated HAVING COUNT(w.fk_product_id) > 5;",
      "Actual": "SELECT T1.name, T2.business_name, T1.last_updated_stock_date FROM products AS T1 INNER JOIN supplier AS T2 ON T1.supplier_id = T2.id WHERE T1.id IN (SELECT T3.id FROM wishlist AS T4 INNER JOIN products AS T3 ON T4.product_id = T3.id GROUP BY T3.id HAVING COUNT(T3.id) > 5) AND T1.stock_status = 'Low'",
      "Expected_Error": null,
      "Actual_Error": "relation \"supplier\" does not exist\nLINE 1: ...updated_stock_date FROM products AS T1 INNER JOIN supplier A...\n                                                             ^\n"
    },
    {
      "NL": "What is the product name and the actual_spent of the campaigns for products with total_reach greater than 100?",
      "Expected": "SELECT T2.product_display_name, T1.actual_spent FROM campaigns AS T1 INNER JOIN products AS T2 ON T1.target_audience = T2.product_category_primary WHERE T1.total_reach > 100;",
      "Actual": "SELECT T1.product_name, T2.actual_spent FROM campaigns AS T1 INNER JOIN product_campaigns AS T2 ON T1.id = T2.campaign_id WHERE T2.total_reach > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"product_campaigns\" does not exist\nLINE 1: ..., T2.actual_spent FROM campaigns AS T1 INNER JOIN product_ca...\n                                                             ^\n"
    },
    {
      "NL": "List all suppliers who have supplied more than 500 products and have an average supplier rating greater than 4.5.",
      "Expected": "SELECT official_supplier_business_name, total_number_of_products_supplied, average_supplier_rating FROM suppliers WHERE total_number_of_products_supplied > 500 AND average_supplier_rating > 4.5;",
      "Actual": "SELECT supplier_name FROM suppliers WHERE total_supplied > 500 AND avg_rating > 4.5",
      "Expected_Error": null,
      "Actual_Error": "column \"supplier_name\" does not exist\nLINE 1: SELECT supplier_name FROM suppliers WHERE total_supplied > 5...\n               ^\n"
    },
    {
      "NL": "What are the business names of suppliers from the USA?",
      "Expected": "SELECT official_supplier_business_name FROM suppliers WHERE supplier_country_of_operation = 'USA'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all customers who are eligible for special promotions and have accumulated more than 1000 loyalty points, along with their first and last names and email addresses.",
      "Expected": "SELECT clp.eligible_for_special_promotions, ci.person_first_name, ci.person_last_name, ci.person_email FROM customers_loyalty_program clp JOIN customerinfo ci ON clp.associated_customer_reference_id = ci.person_customer_id WHERE clp.eligible_for_special_promotions = true AND clp.accumulated_loyalty_points_balance > 1000;",
      "Actual": "SELECT first_name, last_name, email FROM customers WHERE loyalty_points > 1000 AND is_eligible_for_promotions = 'true'",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT first_name, last_name, email FROM customers WHERE loy...\n                                                 ^\n"
    },
    {
      "NL": "Find the average quantity and total price of products in the cart for each product where the cart status is 'Active', and the recommended products are not null, and the wishlist flag is true, and the product id is in the wishlist. Group the result by product id and calculate the standard deviation of the total price for each group.",
      "Expected": "SELECT T2.fk_product_id, AVG(T1.quantity) AS average_quantity, AVG(T1.total_price) AS average_total_price, stddev(T1.total_price) AS std_dev_total_price FROM cart AS T1 INNER JOIN wishlist AS T2 ON T1.fk_product_id = T2.fk_product_id WHERE T1.cart_status = 'Active' AND T1.recommended_products IS NOT NULL AND T1.wishlist_flag = true AND T2.fk_product_id = T1.fk_product_id GROUP BY T2.fk_product_id",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average time spent by customers on the website who have made a purchase and have also completed a survey.",
      "Expected": "SELECT AVG(e.time_spent_seconds) FROM events e JOIN cart c ON e.person_customer_id = c.fk_user_id WHERE e.event_type = 'purchase' AND e.survey_completed = TRUE",
      "Actual": "SELECT AVG(survey_time) FROM customers WHERE purchase_date IS NOT NULL AND survey_id IS NOT NULL",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT AVG(survey_time) FROM customers WHERE purchase_date I...\n                                     ^\n"
    },
    {
      "NL": "Find the average review rating and the sum of cart value for each event type.",
      "Expected": "SELECT event_type, AVG(review_rating) AS avg_review_rating, SUM(cart_value) AS sum_cart_value FROM events GROUP BY event_type",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Give me the total amount of sales made in the last month from the 'orders' table.",
      "Expected": "SELECT SUM(total_amount) AS total_sales FROM orders WHERE order_date >= (CURRENT_DATE - INTERVAL '1 month');",
      "Actual": "SELECT SUM(total_amount) FROM orders WHERE created_at >= NOW() - INTERVAL '1 month';",
      "Expected_Signature": "56bca57b4c4d7455deb1f5078a41b469",
      "Actual_Signature": "ab775ca1e9f41868b2382a0b1758d0d5",
      "Expected_Shape": [
        1,
        1
      ],
      "Actual_Shape": [
        1,
        1
      ]
    },
    {
      "NL": "Get the total quantity of products in the inventory for each order and the order status",
      "Expected": "SELECT SUM(T2.quantity), T1.order_status FROM orders AS T1 INNER JOIN wishlist AS T3 ON T1.person_customer_id = T3.fk_user_id INNER JOIN inventory AS T2 ON T3.fk_product_id = T2.referenced_product_id GROUP BY T1.order_status",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total loyalty points balance and the total discount amount redeemed for customers with a loyalty membership?",
      "Expected": "SELECT SUM(accumulated_loyalty_points_balance) , SUM(total_discount_amount_redeemed) FROM customers_loyalty_program",
      "Actual": "SELECT SUM(loyalty_points), SUM(discount_amount) FROM customers WHERE loyalty_membership IS NOT NULL",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...CT SUM(loyalty_points), SUM(discount_amount) FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find all events for orders where the order status is 'cancelled' and the payment status is 'pending' and the total amount is less than 50, along with the event type, the device platform, and the location city, and also find the campaign name for each order.",
      "Expected": "SELECT e.event_type, e.device_platform, e.location_city, c.campaign_name FROM events e JOIN orders o ON e.order_id = o.order_id JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE o.order_status = 'cancelled' AND o.payment_status = 'pending' AND o.total_amount < 50",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the product name, standard retail price, and expected lead time for products in the 'Electronics' category with a product status of active, an estimated production cost per unit less than 50, and a net weight greater than 1 kilogram.",
      "Expected": "SELECT p.product_display_name, p.standard_retail_price_including_tax, p.expected_lead_time_in_business_days FROM products p WHERE p.product_category_primary = 'Electronics' AND p.active_product_status = true AND p.estimated_production_cost_per_unit < 50 AND p.net_weight_in_kilograms > 1",
      "Actual": "SELECT T1.product_name, T1.standard_retail_price, T2.lead_time FROM products AS T1 INNER JOIN product_details AS T2 ON T1.product_id = T2.product_id WHERE T1.category = 'Electronics' AND T1.product_status = 'active' AND T2.estimated_production_cost < 50 AND T1.net_weight > 1",
      "Expected_Error": null,
      "Actual_Error": "relation \"product_details\" does not exist\nLINE 1: ...rice, T2.lead_time FROM products AS T1 INNER JOIN product_de...\n                                                             ^\n"
    },
    {
      "NL": "List the products with a featured product flag set to true, along with their associated supplier reference id, sorted by their standard retail price in descending order.",
      "Expected": "SELECT unique_product_identifier, associated_supplier_reference_id, standard_retail_price_including_tax FROM products WHERE featured_product_flag = TRUE ORDER BY standard_retail_price_including_tax DESC;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the names and descriptions of products that are currently in the cart of users who have participated in the exclusive beta testing of the loyalty program and have a loyalty membership unique identifier greater than 1000.",
      "Expected": "SELECT p.product_display_name, p.detailed_product_description FROM products p JOIN cart c ON p.unique_product_identifier = c.fk_product_id JOIN customers_loyalty_program clp ON c.fk_user_id = clp.associated_customer_reference_id WHERE clp.participation_in_exclusive_beta_testing = TRUE AND clp.loyalty_membership_unique_identifier > 1000;",
      "Actual": "SELECT T1.name, T1.description FROM products AS T1 INNER JOIN cart AS T2 ON T1.id = T2.product_id INNER JOIN users AS T3 ON T2.user_id = T3.id INNER JOIN loyalty_program AS T4 ON T3.id = T4.user_id WHERE T4.beta_tester = 'true' AND T4.loyalty_membership_id > 1000",
      "Expected_Error": null,
      "Actual_Error": "column t1.id does not exist\nLINE 1: ...tion FROM products AS T1 INNER JOIN cart AS T2 ON T1.id = T2...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"t2.id\".\n"
    },
    {
      "NL": "Show the total number of reviews submitted by customers who have flagged their reviews as inappropriate.",
      "Expected": "SELECT COUNT(*) FROM product_reviews_and_ratings WHERE flagged_as_inappropriate = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List the average star rating of reviews that were submitted by customers who have previously purchased the product more than 3 times.",
      "Expected": "SELECT AVG(submitted_review_star_rating) FROM product_reviews_and_ratings WHERE previous_product_purchases_count > 3;",
      "Actual": "SELECT AVG(r.rating) FROM reviews r JOIN customers c ON r.customer_id = c.customer_id JOIN orders o ON c.customer_id = o.customer_id GROUP BY o.product_id HAVING COUNT(o.order_id) > 3",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT AVG(r.rating) FROM reviews r JOIN customers c ON r.cu...\n                                  ^\n"
    },
    {
      "NL": "Find the average cost per acquisition for all campaigns that have a budget greater than 5000.",
      "Expected": "SELECT AVG(cost_per_acquisition) FROM campaigns WHERE budget > 5000;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the average time spent by customers in seconds on the website who are premium members.",
      "Expected": "SELECT AVG(time_spent_seconds) AS average_time_spent FROM events WHERE person_customer_id IN (SELECT person_customer_id FROM customerinfo WHERE person_is_premium = true)",
      "Actual": "SELECT AVG(t.time_spent) FROM customers c JOIN sessions s ON c.customer_id = s.customer_id JOIN transactions t ON s.session_id = t.session_id WHERE c.is_premium = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT AVG(t.time_spent) FROM customers c JOIN sessions s ON...\n                                      ^\n"
    },
    {
      "NL": "Find the average lifetime loyalty points earned by customers who have exceeded their annual loyalty spending threshold and have a loyalty program tier level of 'gold'",
      "Expected": "SELECT AVG(lifetime_loyalty_points_earned) FROM customers_loyalty_program WHERE annual_loyalty_spending_threshold < lifetime_loyalty_points_earned AND loyalty_program_tier_level = 'gold'",
      "Actual": "SELECT AVG(lifetime_loyalty_points) FROM customers WHERE annual_loyalty_spending > (SELECT threshold FROM loyalty_programs WHERE tier_level = 'gold')",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT AVG(lifetime_loyalty_points) FROM customers WHERE ann...\n                                                 ^\n"
    },
    {
      "NL": "List the email addresses and names of customers who are subscribed to the newsletter and have a balance greater than $1000 in their accounts.",
      "Expected": "SELECT person_email, person_first_name, person_last_name FROM customerinfo WHERE preferences_newsletter_subscription = True AND account_account_balance > 1000",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the order IDs and total amounts of orders placed by customers who have made previous purchases of at least 5 products.",
      "Expected": "SELECT orders.order_id, orders.total_amount FROM orders INNER JOIN product_reviews_and_ratings ON orders.person_customer_id = product_reviews_and_ratings.reviewing_customer_identifier WHERE product_reviews_and_ratings.previous_product_purchases_count >= 5;",
      "Actual": "SELECT order_id ,  sum(total_amount) FROM orders GROUP BY order_id HAVING count(DISTINCT product_id) >= 5",
      "Expected_Error": null,
      "Actual_Error": "column \"product_id\" does not exist\nLINE 1: ...OM orders GROUP BY order_id HAVING count(DISTINCT product_id...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the official business name of suppliers who have supplied products with an inventory turnover rate greater than 1, along with the expected restock date and the last inventory audit date for those products.",
      "Expected": "SELECT s.official_supplier_business_name, i.expected_restock_date, i.last_inventory_audit_date FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id WHERE i.inventory_turnover_rate > 1;",
      "Actual": "SELECT T1.name, T2.restock_date, T2.last_audit_date FROM suppliers AS T1 INNER JOIN orders AS T2 ON T1.id = T2.supplier_id INNER JOIN inventory AS T3 ON T2.id = T3.order_id WHERE T3.turnover_rate > 1",
      "Expected_Error": null,
      "Actual_Error": "column t1.id does not exist\nLINE 1: ...e FROM suppliers AS T1 INNER JOIN orders AS T2 ON T1.id = T2...\n                                                             ^\n"
    },
    {
      "NL": "List the loyalty points balance of all customers who have products in the wishlist with a price greater than $100.",
      "Expected": "SELECT T1.accumulated_loyalty_points_balance FROM customers_loyalty_program AS T1 JOIN wishlist AS T2 ON T1.associated_customer_reference_id = T2.fk_user_id WHERE T2.price_at_addition > 100",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total price of each order in the cart, along with the campaign name, start date, and end date of the corresponding campaign, using the estimated delivery date to join the two tables.",
      "Expected": "SELECT T1.total_price, T2.campaign_name, T2.start_date, T2.end_date FROM cart T1 INNER JOIN campaigns T2 ON T1.estimated_delivery_date BETWEEN T2.start_date AND T2.end_date",
      "Actual": "SELECT T1.total_price, T2.campaign_name, T2.start_date, T2.end_date, T1.estimated_delivery_date FROM orders AS T1 INNER JOIN campaigns AS T2 ON T1.campaign_id = T2.id",
      "Expected_Error": null,
      "Actual_Error": "column t2.id does not exist\nLINE 1: ...s AS T1 INNER JOIN campaigns AS T2 ON T1.campaign_id = T2.id\n                                                                  ^\n"
    },
    {
      "NL": "Get the campaign names and review unique identifiers for campaigns that have a higher conversion rate than the average conversion rate of all campaigns and have a corresponding review with a higher sentiment analysis score than the average sentiment analysis score of all reviews.",
      "Expected": "SELECT T1.campaign_name, T2.review_unique_identifier FROM campaigns AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.campaign_id = T2.referenced_product_identifier WHERE T1.conversions / T1.impressions > (SELECT AVG(conversions / impressions) FROM campaigns) AND T2.sentiment_analysis_score > (SELECT AVG(sentiment_analysis_score) FROM product_reviews_and_ratings)",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the event type, device type, and location city for events where the cart value was greater than 500 and the event occurred in the year 2022",
      "Expected": "SELECT event_type, device_type, location_city FROM events WHERE cart_value > 500 AND EXTRACT(YEAR FROM event_timestamp) = 2022;",
      "Actual": "SELECT event_type, device_type, location_city FROM events WHERE cart_value > 500 AND EXTRACT(YEAR FROM event_date) = 2022",
      "Expected_Error": null,
      "Actual_Error": "column \"event_date\" does not exist\nLINE 1: ...ents WHERE cart_value > 500 AND EXTRACT(YEAR FROM event_date...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"events.event_type\".\n"
    },
    {
      "NL": "Retrieve the event types and the associated customer IDs for events that occurred on the same day as a transaction made by a customer who used a gift card.",
      "Expected": "SELECT e.event_type, e.person_customer_id FROM events e JOIN transactions_and_payments tp ON e.person_customer_id = tp.corresponding_customer_reference_identifier WHERE e.event_timestamp::date = tp.transaction_date_and_time::date AND tp.gift_card_or_store_credit_usage = TRUE;",
      "Actual": "SELECT DISTINCT t2.event_type, t1.customer_id FROM transactions t1 INNER JOIN events t2 ON t1.event_id = t2.event_id WHERE t1.transaction_date = t2.transaction_date AND t1.gift_card_used = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: ...ELECT DISTINCT t2.event_type, t1.customer_id FROM transactio...\n                                                             ^\n"
    },
    {
      "NL": "What are the order details of orders with a total amount greater than 1000 that were shipped from the United States?",
      "Expected": "SELECT o.* FROM orders o JOIN shipping s ON o.order_id = s.fk_order_id WHERE o.total_amount > 1000 AND s.shipping_country = 'United States'",
      "Actual": "SELECT order_details FROM orders WHERE total_amount > 1000 AND country = 'United States'",
      "Expected_Error": null,
      "Actual_Error": "column \"order_details\" does not exist\nLINE 1: SELECT order_details FROM orders WHERE total_amount > 1000 A...\n               ^\n"
    },
    {
      "NL": "Retrieve the list of customers who have added items to their wishlist at least twice, along with the total amount spent by these customers on transactions that included a gift card or store credit usage, along with the average transaction amount and the device platform used for the last event they triggered, filtering for customers who have enabled email notifications and have a loyalty points balance above 1000.",
      "Expected": "SELECT ci.person_customer_id, ci.person_first_name, ci.person_last_name, ci.securityemail_notifications, ci.person_loyalty_points, SUM(tp.final_billed_amount) AS total_spent_with_gifts, AVG(tp.final_billed_amount) AS average_transaction_amount, e.device_platform, e.event_timestamp AS last_event_time FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier JOIN events e ON ci.person_customer_id = e.person_customer_id JOIN wishlist w ON ci.person_customer_id = w.fk_user_id WHERE ci.securityemail_notifications = TRUE AND ci.person_loyalty_points > 1000 AND tp.gift_card_or_store_credit_usage = TRUE GROUP BY ci.person_customer_id, ci.person_first_name, ci.person_last_name, ci.securityemail_notifications, ci.person_loyalty_points, e.device_platform, e.event_timestamp HAVING COUNT(w.id) >= 2 ORDER BY total_spent_with_gifts DESC;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total number of transactions made by first-time customers in the year 2022?",
      "Expected": "SELECT COUNT(transaction_unique_identifier) FROM transactions_and_payments WHERE EXTRACT(YEAR FROM transaction_date_and_time) = 2022 AND first_time_customer_transaction = true",
      "Actual": "SELECT COUNT(*) FROM customers WHERE created_at >= '2022-01-01' AND created_at < '2023-01-01' AND is_first_time_customer = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers WHERE created_at >= '2022-01-...\n                             ^\n"
    },
    {
      "NL": "Find the product id, quantity, and total price for all order items in orders where the product name contains the word 'Laptop', the order status is 'Pending', and the shipping address is located in a city that starts with the letter 'N'. Also, find the total number of products supplied by suppliers who are located in the same city and country of operation as the shipping address. Order the results in descending order of total price.",
      "Expected": "WITH order_items_filtered AS ( SELECT order_item_id, product_id, quantity, total_price, order_id FROM order_items WHERE product_name LIKE '%Laptop%' ), orders_filtered AS ( SELECT order_id, shipping_address_city, shipping_address_country FROM orders WHERE order_status = 'Pending' AND shipping_address_city LIKE 'N%' ), suppliers_filtered AS ( SELECT total_number_of_products_supplied, registered_business_address, supplier_country_of_operation FROM suppliers ) SELECT order_items_filtered.product_id, order_items_filtered.quantity, order_items_filtered.total_price, SUM(suppliers_filtered.total_number_of_products_supplied) AS total_products_supplied FROM order_items_filtered INNER JOIN orders_filtered ON orders_filtered.order_id = order_items_filtered.order_id INNER JOIN suppliers_filtered ON suppliers_filtered.registered_business_address LIKE orders_filtered.shipping_address_city AND suppliers_filtered.supplier_country_of_operation = orders_filtered.shipping_address_country GROUP BY order_items_filtered.product_id, order_items_filtered.quantity, order_items_filtered.total_price ORDER BY order_items_filtered.total_price DESC;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of active subscriptions and the average loyalty points of customers who have an active subscription and a premium account, grouped by city.",
      "Expected": "SELECT address_city, COUNT(account_has_active_subscription) AS total_active_subscriptions, AVG(person_loyalty_points) AS avg_loyalty_points FROM customerinfo WHERE account_has_active_subscription = TRUE AND person_is_premium = TRUE GROUP BY address_city;",
      "Actual": "SELECT COUNT(*) ,  AVG(loyalty_points) FROM customers JOIN subscriptions ON customers.id = subscriptions.customer_id JOIN accounts ON subscriptions.account_id = accounts.id WHERE accounts.premium = TRUE AND subscriptions.active = TRUE GROUP BY accounts.city",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) ,  AVG(loyalty_points) FROM customers JOIN s...\n                                                    ^\n"
    },
    {
      "NL": "Find the names of all suppliers who have supplied products to campaigns with a budget greater than 1000 and also find the campaign names and their start dates.",
      "Expected": "SELECT s.official_supplier_business_name, c.campaign_name, c.start_date FROM suppliers s JOIN cart ca ON s.supplier_unique_identifier = ca.fk_user_id JOIN campaigns c ON ca.fk_product_id = c.campaign_id WHERE c.budget > 1000",
      "Actual": "SELECT T1.name, T2.name, T2.start_date FROM suppliers AS T1 INNER JOIN campaign_suppliers AS T2 ON T1.id = T2.supplier_id INNER JOIN campaigns AS T3 ON T2.campaign_id = T3.id WHERE T3.budget > 1000",
      "Expected_Error": null,
      "Actual_Error": "relation \"campaign_suppliers\" does not exist\nLINE 1: ...me, T2.start_date FROM suppliers AS T1 INNER JOIN campaign_s...\n                                                             ^\n"
    },
    {
      "NL": "Find the average shipping cost for orders that have been shipped from the city of New York.",
      "Expected": "SELECT AVG(shipping_cost) FROM shipping WHERE shipping_city = 'New York' AND shipped_date IS NOT NULL",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all events that occurred on orders which have been shipped to the United States, including the event timestamp and the shipping date.",
      "Expected": "SELECT e.event_timestamp, s.shipped_date FROM events e JOIN shipping s ON e.order_id = s.fk_order_id WHERE s.shipping_country = 'United States';",
      "Actual": "SELECT e.event_timestamp, o.shipping_date FROM orders o JOIN events e ON o.order_id = e.order_id WHERE o.country = 'United States';",
      "Expected_Error": null,
      "Actual_Error": "column o.country does not exist\nLINE 1: ... o JOIN events e ON o.order_id = e.order_id WHERE o.country ...\n                                                             ^\n"
    },
    {
      "NL": "Which customers initiated a refund for their order and how much was the refund amount?",
      "Expected": "SELECT T1.person_customer_id, T2.refund_amount FROM orders AS T1 INNER JOIN refunds_returns AS T2 ON T1.order_id = T2.fk_order_id WHERE T2.refund_initiated_by = 'customer'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total price of all order items with a warranty period of more than 30 days?",
      "Expected": "SELECT SUM(total_price) FROM order_items WHERE warranty_period > 30",
      "Actual": "SELECT SUM(t2.price * t1.quantity) FROM orders AS t1 INNER JOIN order_items AS t2 ON t1.id = t2.order_id WHERE t2.warranty_period > 30;",
      "Expected_Error": null,
      "Actual_Error": "column t1.id does not exist\nLINE 1: ...FROM orders AS t1 INNER JOIN order_items AS t2 ON t1.id = t2...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of reviews and the average rating for products that have been discontinued.",
      "Expected": "SELECT p.product_display_name, COUNT(prar.review_unique_identifier) AS total_reviews, AVG(prar.submitted_review_star_rating) AS avg_rating FROM product_reviews_and_ratings AS prar JOIN products AS p ON prar.referenced_product_identifier = p.unique_product_identifier WHERE p.official_product_discontinuation_date IS NOT NULL GROUP BY p.product_display_name;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of products supplied by each supplier and the average supplier rating, along with the inventory details for the products they supply where the quantity is less than the stock threshold.",
      "Expected": "SELECT s.supplier_unique_identifier, s.total_number_of_products_supplied, s.average_supplier_rating, i.referenced_product_id, i.quantity, i.stock_threshold FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id WHERE i.quantity < i.stock_threshold;",
      "Actual": "SELECT supplier_id, COUNT(*) AS total_products, AVG(rating) AS avg_rating, SUM(CASE WHEN quantity < stock_threshold THEN 1 ELSE 0 END) AS low_stock_count FROM products JOIN suppliers ON products.supplier_id = suppliers.supplier_id GROUP BY supplier_id",
      "Expected_Error": null,
      "Actual_Error": "column products.supplier_id does not exist\nLINE 1: ...S low_stock_count FROM products JOIN suppliers ON products.s...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of orders that have a payment status of paid and were created in the year 2022.",
      "Expected": "SELECT COUNT(order_id) FROM orders WHERE EXTRACT(YEAR FROM created_at) = 2022 AND payment_status = 'paid'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the product names and quantities of items in orders where the transaction status is 'success'?",
      "Expected": "SELECT oi.product_name, oi.quantity FROM order_items oi JOIN transactions_and_payments tp ON oi.order_id = tp.linked_order_reference_identifier WHERE tp.transaction_status = 'success'",
      "Actual": "SELECT T1.product_name, T2.quantity FROM orders AS T1 INNER JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.transaction_status = 'success'",
      "Expected_Error": null,
      "Actual_Error": "column t1.product_name does not exist\nLINE 1: SELECT T1.product_name, T2.quantity FROM orders AS T1 INNER ...\n               ^\nHINT:  Perhaps you meant to reference the column \"t2.product_name\".\n"
    },
    {
      "NL": "Retrieve the total amount spent by customers in the past year, grouped by their preferred language.",
      "Expected": "SELECT person_preferred_language, SUM(T.total_transaction_amount) FROM customerinfo AS C INNER JOIN transactions_and_payments AS T ON C.person_customer_id = T.corresponding_customer_reference_identifier WHERE T.transaction_date_and_time > NOW() - INTERVAL '1 year' GROUP BY C.person_preferred_language",
      "Actual": "SELECT SUM(t2.amount) ,  t1.language FROM customers AS t1 JOIN transactions AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.transaction_date BETWEEN NOW() - INTERVAL '1 year' AND NOW() GROUP BY t1.language",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT SUM(t2.amount) ,  t1.language FROM customers AS t1 JO...\n                                                  ^\n"
    },
    {
      "NL": "Retrieve the product names from order items along with the order date for those orders that have a promotional offer applied and the payment method used is 'Credit Card'.",
      "Expected": "SELECT oi.product_name, o.order_date FROM order_items oi JOIN orders o ON oi.order_id = o.order_id JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE t.promotional_offer_applied = true AND t.payment_method_used = 'Credit Card';",
      "Actual": "SELECT T1.product_name, T2.order_date FROM order_items AS T1 JOIN orders AS T2 ON T1.order_id = T2.order_id WHERE T2.promo_offer IS NOT NULL AND T2.payment_method = 'Credit Card'",
      "Expected_Error": null,
      "Actual_Error": "column t2.promo_offer does not exist\nLINE 1: ...N orders AS T2 ON T1.order_id = T2.order_id WHERE T2.promo_o...\n                                                             ^\n"
    },
    {
      "NL": "Get the total number of transactions where the chargeback request status is true.",
      "Expected": "SELECT COUNT(*) FROM transactions_and_payments WHERE chargeback_request_status = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total revenue generated and campaign name from the campaigns table and the shipping cost from the shipping table where the campaign status is 'active' and the shipping status is 'shipped'.",
      "Expected": "SELECT c.revenue_generated, c.campaign_name, s.shipping_cost FROM campaigns c JOIN shipping s ON c.campaign_id = s.fk_order_id WHERE c.campaign_status = 'active' AND s.shipping_status = 'shipped'",
      "Actual": "SELECT SUM(c.revenue), c.name, s.cost FROM campaigns c JOIN shipping s ON c.id = s.campaign_id WHERE c.status = 'active' AND s.status = 'shipped'",
      "Expected_Error": null,
      "Actual_Error": "column c.id does not exist\nLINE 1: ....name, s.cost FROM campaigns c JOIN shipping s ON c.id = s.c...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"s.id\".\n"
    },
    {
      "NL": "Find the total number of units ordered and the estimated production cost for each product listed in the order_items table, joining with the products table to include the cost.",
      "Expected": "SELECT SUM(order_items.quantity) AS total_units_ordered, products.estimated_production_cost_per_unit FROM order_items JOIN products ON order_items.product_id = products.unique_product_identifier GROUP BY products.estimated_production_cost_per_unit;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the supplier names and their total number of products supplied, ordered by the number of products in descending order.",
      "Expected": "SELECT official_supplier_business_name, total_number_of_products_supplied FROM suppliers ORDER BY total_number_of_products_supplied DESC;",
      "Actual": "SELECT supplier_name ,  COUNT(*) FROM supplier_product GROUP BY supplier_name ORDER BY COUNT(*) DESC",
      "Expected_Error": null,
      "Actual_Error": "relation \"supplier_product\" does not exist\nLINE 1: SELECT supplier_name ,  COUNT(*) FROM supplier_product GROUP...\n                                              ^\n"
    },
    {
      "NL": "What is the average accumulated loyalty points balance across all customers who have participated in exclusive beta testing?",
      "Expected": "SELECT AVG(accumulated_loyalty_points_balance) FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = TRUE",
      "Actual": "SELECT AVG(loyalty_points) FROM customers WHERE beta_tester = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT AVG(loyalty_points) FROM customers WHERE beta_tester ...\n                                        ^\n"
    },
    {
      "NL": "Get the shipping address, shipping city, shipping state, shipping zipcode, and estimated delivery date for each order that has a total discount amount redeemed greater than 100, and has a free shipping eligibility as true, and the order's shipping record has a shipping status as 'shipped', and the order's shipping record has a tracking number that starts with 'ABC', and the order's shipping record has a shipping cost greater than 20",
      "Expected": "SELECT T3.shipping_address, T3.shipping_city, T3.shipping_state, T3.shipping_zipcode, T3.estimated_delivery FROM customers_loyalty_program AS T1 INNER JOIN shipping AS T3 ON T1.associated_customer_reference_id = T3.fk_order_id WHERE T1.total_discount_amount_redeemed > 100 AND T1.free_shipping_eligibility IS TRUE AND T3.shipping_status = 'shipped' AND T3.tracking_number LIKE 'ABC%' AND T3.shipping_cost > 20",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all refunds along with their processing dates, refund amounts, and reasons, where the refund amount is greater than $100.",
      "Expected": "SELECT processed_date, refund_amount, reason FROM refunds_returns WHERE refund_amount > 100;",
      "Actual": "SELECT * FROM refunds WHERE refund_amount > 100",
      "Expected_Error": null,
      "Actual_Error": "relation \"refunds\" does not exist\nLINE 1: SELECT * FROM refunds WHERE refund_amount > 100\n                      ^\n"
    },
    {
      "NL": "Select the final billed amount for transactions where the transaction status is 'completed'.",
      "Expected": "SELECT final_billed_amount FROM transactions_and_payments WHERE transaction_status = 'completed';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all customers who have more than 1000 lifetime loyalty points earned and have a loyalty program tier level of 'Gold'.",
      "Expected": "SELECT * FROM customers_loyalty_program WHERE lifetime_loyalty_points_earned > 1000 AND loyalty_program_tier_level = 'Gold';",
      "Actual": "SELECT * FROM customers WHERE lifetime_loyalty_points > 1000 AND loyalty_program_tier_level = 'Gold';",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT * FROM customers WHERE lifetime_loyalty_points > 1000...\n                      ^\n"
    },
    {
      "NL": "Calculate the total discount applied and the total tax amount for orders placed in the year 2022, with a refund status of true in the transactions_and_payments table.",
      "Expected": "SELECT SUM(o.discount_applied) AS total_discount_applied, SUM(o.tax_amount) AS total_tax_amount FROM orders o JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE EXTRACT(YEAR FROM o.order_date) = 2022 AND t.refund_status = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the average shipping costs for transactions from the 'new customer campaign'?",
      "Expected": "SELECT AVG(T2.shipping_cost) FROM transactions_and_payments T1 INNER JOIN shipping T2 ON T1.linked_order_reference_identifier = T2.fk_order_id INNER JOIN campaigns T3 ON T1.linked_order_reference_identifier = T3.campaign_id WHERE T3.campaign_name = 'new customer campaign'",
      "Actual": "SELECT AVG(t2.shipping_cost) FROM transactions t1 INNER JOIN transaction_details t2 ON t1.id = t2.transaction_id WHERE t1.campaign_name = 'new customer campaign';",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT AVG(t2.shipping_cost) FROM transactions t1 INNER JOIN...\n                                          ^\n"
    },
    {
      "NL": "Find the names of customers who have an active subscription and are located in New York City, along with the total number of products supplied by their preferred supplier.",
      "Expected": "SELECT ci.person_first_name, ci.person_last_name, s.total_number_of_products_supplied FROM customerinfo ci JOIN inventory i ON ci.securitytwo_factor_enabled = true JOIN suppliers s ON i.supplier_id = s.supplier_unique_identifier WHERE ci.account_has_active_subscription = true AND ci.address_city = 'New York City'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all customers who have made a transaction using cryptocurrency.",
      "Expected": "SELECT DISTINCT c.person_first_name, c.person_last_name FROM customerinfo c JOIN transactions_and_payments t ON c.person_customer_id = t.corresponding_customer_reference_identifier WHERE t.cryptocurrency_payment_flag = true;",
      "Actual": "SELECT * FROM customers JOIN transactions ON customers.customer_id = transactions.customer_id WHERE transactions.transaction_type = 'cryptocurrency'",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT * FROM customers JOIN transactions ON customers.custo...\n                      ^\n"
    },
    {
      "NL": "Find the total number of products supplied by each supplier that has a stock threshold above 100 in the inventory.",
      "Expected": "SELECT s.official_supplier_business_name, SUM(i.quantity) AS total_products_supplied FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id WHERE i.stock_threshold > 100 GROUP BY s.official_supplier_business_name;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the exclusive coupon codes assigned to customers in the loyalty program at the platinum level?",
      "Expected": "SELECT exclusive_coupon_codes_assigned FROM customers_loyalty_program WHERE loyalty_program_tier_level = 'Platinum'",
      "Actual": "SELECT DISTINCT coupon_code FROM loyalty_program WHERE customer_id IN (SELECT customer_id FROM loyalty_program WHERE level = 'platinum')",
      "Expected_Error": null,
      "Actual_Error": "relation \"loyalty_program\" does not exist\nLINE 1: SELECT DISTINCT coupon_code FROM loyalty_program WHERE custo...\n                                         ^\n"
    },
    {
      "NL": "What is the average total price of carts that have a discounted total price greater than 100 and a cart status of 'Checked Out'?",
      "Expected": "SELECT AVG(discounted_total_price) FROM cart WHERE discounted_total_price > 100 AND cart_status = 'Checked Out'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the campaign name, target audience, and total price for all campaigns where the campaign type is 'email' and the cart status is 'checkedout'.",
      "Expected": "SELECT c.campaign_name, c.target_audience, ct.total_price FROM campaigns c JOIN cart ct ON c.campaign_id = ct.fk_product_id WHERE c.campaign_type = 'email' AND ct.cart_status = 'checkedout'",
      "Actual": "SELECT campaign_name, target_audience, total_price FROM campaigns WHERE campaign_type = 'email' AND cart_status = 'checkedout';",
      "Expected_Error": null,
      "Actual_Error": "column \"total_price\" does not exist\nLINE 1: SELECT campaign_name, target_audience, total_price FROM camp...\n                                               ^\n"
    },
    {
      "NL": "Retrieve the total amount and delivery date of orders that were shipped after '2023-01-01' and have a discount applied greater than 0.",
      "Expected": "SELECT total_amount, delivery_date FROM orders WHERE shipping_date > '2023-01-01' AND discount_applied > 0;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the shipping details of all orders that have a budget greater than $10,000 and list the supplier details of the product shipped.",
      "Expected": "SELECT sh.id, sh.fk_order_id, sh.estimated_delivery, sh.shipped_date, sh.shipping_cost, sh.shipping_address, sh.shipping_city, sh.shipping_state, sh.shipping_zipcode, sh.shipping_country, sh.shipping_status, sh.tracking_number, sh.carrier, s.supplier_unique_identifier, s.total_number_of_products_supplied, s.average_supplier_rating, s.official_supplier_business_name, s.registered_business_address, s.primary_contact_person_name, s.primary_contact_phone_number, s.primary_contact_email_address, s.supplier_country_of_operation, s.supplier_tax_identification_number, s.preferred_payment_terms_description FROM shipping sh JOIN campaigns c ON sh.fk_order_id = c.campaign_id JOIN suppliers s ON c.campaign_id = s.supplier_unique_identifier WHERE c.budget > 10000;",
      "Actual": "SELECT o.order_id, o.budget, s.supplier_name, s.supplier_address FROM orders o JOIN shipments s ON o.order_id = s.order_id WHERE o.budget > 10000",
      "Expected_Error": null,
      "Actual_Error": "relation \"shipments\" does not exist\nLINE 1: ...plier_name, s.supplier_address FROM orders o JOIN shipments ...\n                                                             ^\n"
    },
    {
      "NL": "What are the details of suppliers from the United States who supplied products for orders with a total amount greater than 500?",
      "Expected": "SELECT s.* FROM suppliers s JOIN orders o ON s.supplier_unique_identifier = o.campaign_id JOIN shipping sh ON o.order_id = sh.fk_order_id WHERE sh.shipping_country = 'United States' AND o.total_amount > 500",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the order IDs, order dates, and shipping addresses of orders for which refunds have been initiated, along with the corresponding refund amounts and return conditions, for customers who have not opened emails and have a review rating of 5 in their events?",
      "Expected": "SELECT o.order_id, o.order_date, o.shipping_address_street, o.shipping_address_city, o.shipping_address_state, o.shipping_address_country, o.shipping_address_postalcode, rr.refund_amount, rr.return_condition FROM orders o JOIN refunds_returns rr ON o.order_id = rr.fk_order_id JOIN events e ON o.order_id = e.order_id WHERE e.email_opened = false AND e.review_rating = 5",
      "Actual": "SELECT o.order_id, o.order_date, o.shipping_address, r.refund_amount, r.return_condition FROM orders o JOIN refunds r ON o.order_id = r.order_id JOIN customers c ON o.customer_id = c.customer_id JOIN event_ratings er ON c.customer_id = er.customer_id WHERE r.refund_initiated = TRUE AND c.email_opened = FALSE AND er.rating = 5",
      "Expected_Error": null,
      "Actual_Error": "relation \"refunds\" does not exist\nLINE 1: ...und_amount, r.return_condition FROM orders o JOIN refunds r ...\n                                                             ^\n"
    },
    {
      "NL": "Get the product details of products with available stock quantity greater than 50 and estimated replenishment date within the next 7 days",
      "Expected": "SELECT * FROM products WHERE available_stock_quantity_in_units > 50 AND estimated_replenishment_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "How many devices have a device_type of mobile and device_platform of android?",
      "Expected": "SELECT COUNT(device_type) FROM events WHERE device_type = 'mobile' AND device_platform = 'android'",
      "Actual": "SELECT COUNT(*) FROM devices WHERE device_type = 'mobile' AND device_platform = 'android';",
      "Expected_Error": null,
      "Actual_Error": "relation \"devices\" does not exist\nLINE 1: SELECT COUNT(*) FROM devices WHERE device_type = 'mobile' AN...\n                             ^\n"
    },
    {
      "NL": "Retrieve the total number of products supplied by each supplier along with their average rating.",
      "Expected": "SELECT total_number_of_products_supplied, average_supplier_rating FROM suppliers;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average total transaction amount for each order that has a review with a star rating of 5.",
      "Expected": "SELECT o.order_id, AVG(t.total_transaction_amount) AS average_transaction_amount FROM orders o JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier JOIN product_reviews_and_ratings r ON o.order_id = r.referenced_product_identifier WHERE r.submitted_review_star_rating = 5 GROUP BY o.order_id;",
      "Actual": "SELECT AVG(T2.total_amount) FROM orders AS T1 INNER JOIN reviews AS T2 ON T1.id = T2.order_id WHERE T2.star_rating = 5",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ...AVG(T2.total_amount) FROM orders AS T1 INNER JOIN reviews AS...\n                                                             ^\n"
    },
    {
      "NL": "Find the loyalty program tier and total spent for all customers who have ever purchased a product from the 'Electronics' category and have a lifetime loyalty points balance greater than 1000",
      "Expected": "SELECT T1.loyalty_program_tier_level, SUM(T2.total_price) FROM customers_loyalty_program AS T1 INNER JOIN order_items AS T2 ON T1.associated_customer_reference_id = T2.order_id INNER JOIN products AS T3 ON T2.product_id = T3.unique_product_identifier WHERE T3.product_category_primary = 'Electronics' AND T1.lifetime_loyalty_points_earned > 1000 GROUP BY T1.loyalty_program_tier_level",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the count of customers from the customerinfo table who have more than 100 loyalty points and the average spent per order is greater than 1000.",
      "Expected": "SELECT COUNT(person_customer_id) FROM customerinfo WHERE person_loyalty_points > 100 AND preferences_avg_spent_per_order > 1000;",
      "Actual": "SELECT COUNT(*) FROM customerinfo WHERE loyalty_points > 100 AND avg_spent_per_order > 1000",
      "Expected_Error": null,
      "Actual_Error": "column \"loyalty_points\" does not exist\nLINE 1: SELECT COUNT(*) FROM customerinfo WHERE loyalty_points > 100...\n                                                ^\n"
    },
    {
      "NL": "What are the review ratings, customer review submission dates and review approval moderation statuses for all reviews with helpful votes received greater than 10?",
      "Expected": "SELECT submitted_review_star_rating, customer_review_submission_date, review_approval_moderation_status FROM product_reviews_and_ratings WHERE number_of_helpful_votes_received > 10",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all suppliers based in 'United States' with an average supplier rating above 4.5.",
      "Expected": "SELECT official_supplier_business_name, average_supplier_rating FROM suppliers WHERE supplier_country_of_operation = 'United States' AND average_supplier_rating > 4.5;",
      "Actual": "SELECT * FROM suppliers WHERE country='United States' AND avg_rating > 4.5",
      "Expected_Error": null,
      "Actual_Error": "column \"country\" does not exist\nLINE 1: SELECT * FROM suppliers WHERE country='United States' AND av...\n                                      ^\n"
    },
    {
      "NL": "What are the reviews for products with a high aggregate customer review rating and what is the shipping status for orders of these products?",
      "Expected": "SELECT T1.textual_review_feedback, T2.shipping_status FROM product_reviews_and_ratings AS T1 INNER JOIN products AS T3 ON T1.referenced_product_identifier = T3.unique_product_identifier INNER JOIN shipping AS T2 ON T2.fk_order_id = T1.review_unique_identifier WHERE T3.aggregate_customer_review_rating > 4",
      "Actual": "SELECT r.review, o.shipping_status FROM reviews r JOIN orders o ON r.product_id = o.product_id GROUP BY r.review HAVING AVG(r.rating) > 4",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT r.review, o.shipping_status FROM reviews r JOIN order...\n                                                ^\n"
    },
    {
      "NL": "Find the average loyalty points earned by customers who have active subscriptions and are premium members.",
      "Expected": "SELECT AVG(person_loyalty_points) FROM customerinfo WHERE account_has_active_subscription = TRUE AND person_is_premium = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of products supplied by the supplier with the highest average rating, along with the supplier's official business name.",
      "Expected": "SELECT s.total_number_of_products_supplied, s.official_supplier_business_name FROM suppliers s ORDER BY s.average_supplier_rating DESC LIMIT 1;",
      "Actual": "SELECT COUNT(*) ,  ( SELECT name FROM supplier WHERE id = ( SELECT supplier_id FROM product GROUP BY supplier_id ORDER BY AVG(rating) DESC LIMIT 1 ) );",
      "Expected_Error": null,
      "Actual_Error": "relation \"supplier\" does not exist\nLINE 1: SELECT COUNT(*) ,  ( SELECT name FROM supplier WHERE id = ( ...\n                                              ^\n"
    },
    {
      "NL": "List the total transaction amount and corresponding customer reference for transactions that are flagged as fraudulent.",
      "Expected": "SELECT total_transaction_amount, corresponding_customer_reference_identifier FROM transactions_and_payments WHERE is_transaction_fraudulent = TRUE;",
      "Actual": "SELECT SUM(amount), customer_reference FROM transactions WHERE is_fraudulent = TRUE",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: SELECT SUM(amount), customer_reference FROM transactions WHE...\n                                                    ^\n"
    },
    {
      "NL": "Find the total transaction amount for customers who are eligible for special promotions and have made transactions with a total transaction amount greater than 1000.",
      "Expected": "SELECT SUM(t.total_transaction_amount) FROM transactions_and_payments t JOIN customers_loyalty_program c ON t.corresponding_customer_reference_identifier = c.associated_customer_reference_id WHERE c.eligible_for_special_promotions = TRUE AND t.total_transaction_amount > 1000",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total number of verified reviews and the aggregate customer review rating for the product with the highest rating.",
      "Expected": "SELECT total_number_of_verified_reviews, aggregate_customer_review_rating FROM products ORDER BY aggregate_customer_review_rating DESC LIMIT 1;",
      "Actual": "SELECT COUNT(*) ,  AVG(rating) FROM reviews WHERE verified = 'true' AND product_id = (SELECT product_id FROM reviews GROUP BY product_id ORDER BY AVG(rating) DESC LIMIT 1);",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: SELECT COUNT(*) ,  AVG(rating) FROM reviews WHERE verified =...\n                                            ^\n"
    },
    {
      "NL": "Find the total number of reviews submitted by premium customers.",
      "Expected": "SELECT COUNT(*) FROM product_reviews_and_ratings pr JOIN customerinfo ci ON pr.reviewing_customer_identifier = ci.person_customer_id WHERE ci.person_is_premium = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average sentiment score of reviews for products that have received more than 10 helpful votes and are verified.",
      "Expected": "SELECT AVG(sentiment_analysis_score) FROM product_reviews_and_ratings WHERE verification_status_of_reviewer = true AND number_of_helpful_votes_received > 10;",
      "Actual": "SELECT AVG(T2.sentiment_score) FROM products AS T1 INNER JOIN reviews AS T2 ON T1.id = T2.product_id WHERE T1.verified = TRUE AND T2.helpful_votes > 10",
      "Expected_Error": null,
      "Actual_Error": "relation \"reviews\" does not exist\nLINE 1: ...2.sentiment_score) FROM products AS T1 INNER JOIN reviews AS...\n                                                             ^\n"
    },
    {
      "NL": "Find all orders where shipping status is 'shipped' and order status is 'delivered' along with shipping details.",
      "Expected": "SELECT o.*, s.* FROM orders o JOIN shipping s ON o.order_id = s.fk_order_id WHERE s.shipping_status = 'shipped' AND o.order_status = 'delivered'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List the names of products purchased by customers who are eligible for special promotions and have a loyalty tier level of 'Silver' or higher.",
      "Expected": "SELECT DISTINCT oi.product_name FROM order_items oi JOIN customers_loyalty_program clp ON oi.order_id = clp.associated_customer_reference_id WHERE clp.eligible_for_special_promotions = TRUE AND clp.loyalty_program_tier_level IN ('Silver', 'Gold', 'Platinum')",
      "Actual": "SELECT DISTINCT T1.name FROM products AS T1 INNER JOIN orders AS T2 ON T1.id = T2.product_id INNER JOIN customers AS T3 ON T3.id = T2.customer_id WHERE T3.loyalty_tier_level IN ('Silver', 'Gold', 'Platinum')",
      "Expected_Error": null,
      "Actual_Error": "column t1.id does not exist\nLINE 1: ...me FROM products AS T1 INNER JOIN orders AS T2 ON T1.id = T2...\n                                                             ^\n"
    },
    {
      "NL": "Find the top 5 customers who have made the highest total cart value in events, considering only those with an active subscription and their last order was made within the last 6 months, and also include the product categories they frequently purchase.",
      "Expected": "SELECT ci.person_first_name, ci.person_last_name, ci.preferences_favorite_category, SUM(e.cart_value) AS total_cart_value FROM events e JOIN customerinfo ci ON e.person_customer_id = ci.person_customer_id JOIN products p ON e.order_item_id = p.unique_product_identifier WHERE ci.account_has_active_subscription = true AND ci.preferences_last_order_date >= current_date - INTERVAL '6 months' GROUP BY ci.person_first_name, ci.person_last_name, ci.preferences_favorite_category ORDER BY total_cart_value DESC LIMIT 5;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the average number of edits made to reviews for customers who have an engagement score above 8, have submitted reviews that contain multimedia content, and those reviews were flagged as inappropriate. Also, include the count of such reviews for each customer and filter the results to only include customers who have redeemed more than 100 loyalty points. Further, sort the results by the total number of edits made in descending order.",
      "Expected": "SELECT pr.reviewing_customer_identifier, AVG(pr.total_number_of_edits_made) AS average_edits, COUNT(pr.review_unique_identifier) AS review_count FROM product_reviews_and_ratings pr JOIN customers_loyalty_program clp ON pr.reviewing_customer_identifier = clp.associated_customer_reference_id WHERE clp.customer_feedback_engagement_score > 8 AND pr.contains_multimedia_content = true AND pr.flagged_as_inappropriate = true AND clp.lifetime_loyalty_points_redeemed > 100 GROUP BY pr.reviewing_customer_identifier ORDER BY average_edits DESC;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the product names and quantities of all order items with a price per unit greater than $50?",
      "Expected": "SELECT product_name, quantity FROM order_items WHERE price_per_unit > 50;",
      "Actual": "SELECT T1.product_name, T2.quantity FROM order_items AS T1 INNER JOIN orders AS T2 ON T1.order_id = T2.order_id WHERE T1.price_per_unit > 50",
      "Expected_Error": null,
      "Actual_Error": "column t2.quantity does not exist\nLINE 1: SELECT T1.product_name, T2.quantity FROM order_items AS T1 I...\n                                ^\nHINT:  Perhaps you meant to reference the column \"t1.quantity\".\n"
    },
    {
      "NL": "Get the total transaction amount, payment method used, and transaction date and time for transactions that occurred within the last 30 days and corresponding order status is 'delivered', and not cancelled or pending. The transaction method used should be either 'Credit Card' or 'PayPal', and the total transaction amount should be greater than $100.00.",
      "Expected": "SELECT T1.total_transaction_amount, T1.payment_method_used, T1.transaction_date_and_time FROM transactions_and_payments AS T1 INNER JOIN orders AS T2 ON T1.linked_order_reference_identifier = T2.order_id WHERE T1.transaction_date_and_time >= NOW() - INTERVAL '30 days' AND T2.order_status = 'delivered' AND T2.order_status NOT IN ('cancelled', 'pending') AND T1.payment_method_used IN ('Credit Card', 'PayPal') AND T1.total_transaction_amount > 100.00",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the total order value for each customer who has made at least one purchase, along with the average review rating for products in their orders, excluding those customers whose reviews have been flagged as inappropriate and considering only verified reviewers. Additionally, filter the results to show only those customers who have spent more than $500 in total and include the city of their last delivery.",
      "Expected": "SELECT o.person_customer_id, SUM(oi.total_price) AS total_order_value, AVG(prar.submitted_review_star_rating) AS avg_review_rating, o.shipping_address_city FROM orders o JOIN order_items oi ON o.order_id = oi.order_id LEFT JOIN product_reviews_and_ratings prar ON oi.product_id = prar.referenced_product_identifier WHERE prar.verification_status_of_reviewer = TRUE AND prar.flagged_as_inappropriate = FALSE GROUP BY o.person_customer_id, o.shipping_address_city HAVING SUM(oi.total_price) > 500",
      "Actual": "SELECT SUM(o.total_amount) AS total_order_value, AVG(r.rating) AS avg_review_rating, c.city FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN reviews r ON oi.product_id = r.product_id WHERE r.reviewer_id IN (SELECT reviewer_id FROM reviews WHERE verified = TRUE) AND r.flagged = FALSE GROUP BY c.customer_id, c.city HAVING SUM(o.total_amount) > 500",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...) AS avg_review_rating, c.city FROM orders o JOIN customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find all the customers who have placed orders with a total amount greater than $100 and have an active subscription.",
      "Expected": "SELECT DISTINCT ci.person_customer_id FROM orders o INNER JOIN customerinfo ci ON o.person_customer_id = ci.person_customer_id WHERE o.total_amount > 100 AND ci.account_has_active_subscription = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total amount and discount applied for all orders placed in the last month.",
      "Expected": "SELECT total_amount, discount_applied FROM orders WHERE order_date >= NOW() - INTERVAL '1 month'",
      "Actual": "SELECT SUM(total_amount - discount_amount) FROM orders WHERE EXTRACT(MONTH FROM created_at) = EXTRACT(MONTH FROM CURRENT_DATE) AND EXTRACT(YEAR FROM created_at) = EXTRACT(YEAR FROM CURRENT_DATE)",
      "Expected_Error": null,
      "Actual_Error": "column \"discount_amount\" does not exist\nLINE 1: SELECT SUM(total_amount - discount_amount) FROM orders WHERE...\n                                  ^\n"
    },
    {
      "NL": "List the wishlist items for customers who have more than 100 loyalty points and are subscribed to the newsletter.",
      "Expected": "SELECT w.product_name, w.fk_user_id, c.person_first_name, c.person_last_name FROM wishlist w JOIN customerinfo c ON w.fk_user_id = c.person_customer_id WHERE c.person_loyalty_points > 100 AND c.preferences_newsletter_subscription = true;",
      "Actual": "SELECT wishlist_items FROM customers WHERE loyalty_points > 100 AND newsletter_subscribed",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT wishlist_items FROM customers WHERE loyalty_points > ...\n                                   ^\n"
    },
    {
      "NL": "What are the total revenue generated and cost per acquisition for each campaign status where the campaign type is 'online' and there is at least one order item with a matching product id in the order items table?",
      "Expected": "SELECT c.campaign_status, SUM(c.revenue_generated), SUM(c.cost_per_acquisition) FROM campaigns c JOIN order_items o ON c.campaign_id = o.order_item_id WHERE c.campaign_type = 'online' GROUP BY c.campaign_status",
      "Actual": "SELECT SUM(oi.total_amount) AS total_revenue, SUM(coi.total_amount) / COUNT(DISTINCT oi.order_id) AS cost_per_acquisition FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN campaigns c ON o.campaign_id = c.campaign_id JOIN campaign_status cs ON c.campaign_status_id = cs.campaign_status_id JOIN campaign_types ct ON c.campaign_type_id = ct.campaign_type_id WHERE ct.campaign_type = 'online' AND cs.campaign_status IN ('active', 'completed')",
      "Expected_Error": null,
      "Actual_Error": "relation \"campaign_status\" does not exist\nLINE 1: ...campaigns c ON o.campaign_id = c.campaign_id JOIN campaign_s...\n                                                             ^\n"
    },
    {
      "NL": "Find the total loyalty points earned by customers who have made at least one order and are eligible for special promotions",
      "Expected": "SELECT SUM(clp.lifetime_loyalty_points_earned) FROM customers_loyalty_program clp JOIN customerinfo ci ON clp.associated_customer_reference_id = ci.person_customer_id JOIN orders o ON ci.person_customer_id = o.person_customer_id WHERE clp.eligible_for_special_promotions = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total number of customers who have active subscriptions and are premium?",
      "Expected": "SELECT COUNT(person_customer_id) FROM customerinfo WHERE account_has_active_subscription = TRUE AND person_is_premium = TRUE",
      "Actual": "SELECT COUNT(*) FROM customers WHERE subscription_status = 'active' AND subscription_type = 'premium';",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT COUNT(*) FROM customers WHERE subscription_status = '...\n                             ^\n"
    },
    {
      "NL": "Retrieve the product display name and standard retail price of all featured products.",
      "Expected": "SELECT product_display_name, standard_retail_price_including_tax FROM products WHERE featured_product_flag = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the campaign name and total reviews made by customers who purchased products linked to the given campaign ID. Order the results by the total reviews made in descending order.",
      "Expected": "SELECT T1.campaign_name, COUNT(T2.reviewing_customer_identifier) AS total_reviews FROM campaigns T1 INNER JOIN product_reviews_and_ratings T2 ON T1.campaign_id = T2.referenced_product_identifier GROUP BY T1.campaign_name ORDER BY total_reviews DESC;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the order details of customers who have made a purchase in the last 30 days and have loyalty points greater than 100.",
      "Expected": "SELECT o.* FROM orders o INNER JOIN customerinfo ci ON o.person_customer_id = ci.person_customer_id WHERE o.order_date > NOW() - INTERVAL '30 day' AND ci.person_loyalty_points > 100;",
      "Actual": "SELECT * FROM orders WHERE created_at > NOW() - INTERVAL '30 days' AND customer_id IN (SELECT customer_id FROM loyalty_points WHERE points > 100)",
      "Expected_Error": null,
      "Actual_Error": "relation \"loyalty_points\" does not exist\nLINE 1: ...days' AND customer_id IN (SELECT customer_id FROM loyalty_po...\n                                                             ^\n"
    },
    {
      "NL": "Get the average total price of all the items in the cart and the average discount applied",
      "Expected": "SELECT AVG(total_price) AS average_total_price, AVG(discount_applied) AS average_discount FROM cart",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total refund amount for all refunds initiated by seller and customer?",
      "Expected": "SELECT SUM(refund_amount) FROM refunds_returns WHERE refund_initiated_by = 'seller' OR refund_initiated_by = 'customer'",
      "Actual": "SELECT SUM(amount) FROM refunds WHERE initiator IN ('seller', 'customer')",
      "Expected_Error": null,
      "Actual_Error": "relation \"refunds\" does not exist\nLINE 1: SELECT SUM(amount) FROM refunds WHERE initiator IN ('seller'...\n                                ^\n"
    },
    {
      "NL": "Show the quantity, last_updated, and supplier_id of products in inventory for products with a quantity greater than 50 and a stock_threshold of less than 20.",
      "Expected": "SELECT quantity, last_updated, supplier_id FROM inventory WHERE quantity > 50 AND stock_threshold < 20",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Calculate the total loyalty points earned by customers from the last 30 days.",
      "Expected": "SELECT SUM(associated_loyalty_points_earned) FROM transactions_and_payments WHERE transaction_date_and_time >= NOW() - INTERVAL '30 days';",
      "Actual": "SELECT SUM(loyalty_points) FROM customers WHERE created_at >= NOW() - INTERVAL '30 days'",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT SUM(loyalty_points) FROM customers WHERE created_at >...\n                                        ^\n"
    },
    {
      "NL": "Find the total revenue generated and the number of conversions for campaigns that ended after January 1, 2023, and had a ROI greater than 200%",
      "Expected": "SELECT SUM(revenue_generated) AS total_revenue, SUM(conversions) AS total_conversions FROM campaigns WHERE end_date > '2023-01-01' AND roi > 200;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the campaign name, campaign status, and the total refund amount for each campaign",
      "Expected": "SELECT c.campaign_name, c.campaign_status, SUM(rr.refund_amount) AS total_refund FROM campaigns c JOIN refunds_returns rr ON c.campaign_id = rr.fk_order_id GROUP BY c.campaign_name, c.campaign_status",
      "Actual": "SELECT campaign_name, campaign_status, SUM(refund_amount) FROM campaigns GROUP BY campaign_name, campaign_status",
      "Expected_Error": null,
      "Actual_Error": "column \"refund_amount\" does not exist\nLINE 1: SELECT campaign_name, campaign_status, SUM(refund_amount) FR...\n                                                   ^\n"
    },
    {
      "NL": "Find all wishlist items that have a price at addition greater than 100",
      "Expected": "SELECT * FROM wishlist WHERE price_at_addition > 100",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total amount of all orders that were created after the start date of a specific campaign with id 1.",
      "Expected": "SELECT SUM(o.total_amount) FROM orders o JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE c.campaign_id = 1 AND o.created_at > c.start_date",
      "Actual": "SELECT SUM(total_amount) FROM orders WHERE created_at > (SELECT start_date FROM campaigns WHERE id = 1)",
      "Expected_Error": null,
      "Actual_Error": "column \"id\" does not exist\nLINE 1: ...created_at > (SELECT start_date FROM campaigns WHERE id = 1)\n                                                                ^\n"
    },
    {
      "NL": "Get the total refund amount, order item id, product name, item status, and standard retail price including tax for each refundable order item that has a total price greater than 100, and has a return period less than 30 days, and belongs to a customer who has a lifetime loyalty points earned greater than 1000, and has an anniversary reward voucher status as true, and order item's product belongs to a supplier with a minimum threshold for restocking greater than 50",
      "Expected": "SELECT T3.refund_amount, T1.order_item_id, T1.product_name, T1.item_status, T2.standard_retail_price_including_tax FROM order_items AS T1 INNER JOIN products AS T2 ON T1.product_id = T2.unique_product_identifier INNER JOIN refunds_returns AS T3 ON T1.order_id = T3.fk_order_id AND T1.product_id = T3.fk_product_id INNER JOIN customers_loyalty_program AS T4 ON T3.fk_user_id = T4.associated_customer_reference_id WHERE T1.total_price > 100 AND T1.return_period < 30 AND T4.lifetime_loyalty_points_earned > 1000 AND T4.anniversary_reward_voucher_status IS TRUE AND T2.minimum_threshold_for_restocking > 50",
      "Actual": "SELECT SUM(oi.total_price) AS total_refund, oi.order_item_id, p.product_name, oi.item_status, p.standard_retail_price + p.tax AS total_price FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id JOIN suppliers s ON p.supplier_id = s.supplier_id WHERE oi.total_price > 100 AND oi.return_period < 30 AND o.customer_id IN (SELECT customer_id FROM customer_loyalty WHERE lifetime_points > 1000) AND o.anniversary_reward_voucher = TRUE AND s.restock_threshold > 50",
      "Expected_Error": null,
      "Actual_Error": "column p.product_id does not exist\nLINE 1: ... = oi.order_id JOIN products p ON oi.product_id = p.product_...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"oi.product_id\".\n"
    },
    {
      "NL": "What is the average restocking fee for returns that have been processed?",
      "Expected": "SELECT AVG(restocking_fee) FROM refunds_returns WHERE processed_date IS NOT NULL",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the customer information, including their loyalty points and registration date, along with the transaction details, including the transaction date and payment method, and the inventory details, including the quantity and last restock date, for customers who have purchased a product with a quantity greater than 20 and a payment method of credit card, and also check if the customer has a valid subscription and the transaction amount is greater than 50.",
      "Expected": "SELECT T1.person_first_name, T1.person_last_name, T1.person_loyalty_points, T1.person_registration_date, T2.linked_order_reference_identifier, T2.transaction_unique_identifier, T2.transaction_date_and_time, T2.payment_method_used, T3.quantity, T3.last_restock_date FROM customerinfo AS T1 INNER JOIN transactions_and_payments AS T2 ON T2.corresponding_customer_reference_identifier = T1.person_customer_id INNER JOIN inventory AS T3 ON T3.referenced_product_id = T2.linked_order_reference_identifier WHERE T1.account_has_active_subscription = TRUE AND T2.total_transaction_amount > 50 AND T2.payment_method_used = 'Credit Card' AND T3.quantity > 20",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total amount redeemed by customers who are eligible for special promotions.",
      "Expected": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program WHERE eligible_for_special_promotions = TRUE;",
      "Actual": "SELECT SUM(t2.amount) FROM customers AS t1 INNER JOIN orders AS t2 ON t1.id = t2.customer_id WHERE t1.promotion_id IN (1, 2, 3)",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: SELECT SUM(t2.amount) FROM customers AS t1 INNER JOIN orders...\n                                   ^\n"
    },
    {
      "NL": "Retrieve the total number of loyal customers who have made at least one transaction and have a transaction amount greater than 100.",
      "Expected": "SELECT COUNT(DISTINCT ci.person_customer_id) FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier WHERE ci.person_loyalty_points > 0 AND tp.final_billed_amount > 100;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find out how many products are in stock and what is their current stock status?",
      "Expected": "SELECT quantity , stock_status FROM inventory WHERE stock_status = 'In Stock'",
      "Actual": "SELECT COUNT(*) ,  product_status FROM products GROUP BY product_status",
      "Expected_Error": null,
      "Actual_Error": "column \"product_status\" does not exist\nLINE 1: SELECT COUNT(*) ,  product_status FROM products GROUP BY pro...\n                           ^\n"
    },
    {
      "NL": "Find the total number of unique customers who have both reviewed a product and completed a survey.",
      "Expected": "SELECT COUNT(DISTINCT person_customer_id) FROM events WHERE event_type = 'review' INTERSECT SELECT COUNT(DISTINCT person_customer_id) FROM events WHERE survey_completed = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the average amount spent by customers in the last 365 days, and what is their average lifetime loyalty points earned?",
      "Expected": "SELECT AVG(total_amount), AVG(lifetime_loyalty_points_earned) FROM orders JOIN customers_loyalty_program ON orders.person_customer_id = customers_loyalty_program.associated_customer_reference_id WHERE orders.order_date > NOW() - INTERVAL '365 day'",
      "Actual": "SELECT AVG(amount_spent) AS average_amount_spent, AVG(loyalty_points) AS average_loyalty_points FROM customers WHERE created_at >= NOW() - INTERVAL '365 days'",
      "Expected_Error": null,
      "Actual_Error": "relation \"customers\" does not exist\nLINE 1: ...VG(loyalty_points) AS average_loyalty_points FROM customers ...\n                                                             ^\n"
    },
    {
      "NL": "Find the names of products, their corresponding categories and the names of suppliers who supply them, the products being fragile, the suppliers have an average rating of more than 3, the products have a net weight of less than 1 kilogram, and the quantity in stock is more than 50. Also, sort the results by the product names in descending order.",
      "Expected": "SELECT T1.product_display_name, T1.product_category_primary, T3.official_supplier_business_name FROM products AS T1 INNER JOIN inventory AS T2 ON T1.unique_product_identifier = T2.referenced_product_id INNER JOIN suppliers AS T3 ON T2.supplier_id = T3.supplier_unique_identifier WHERE T1.fragile_item_indicator = TRUE AND T3.average_supplier_rating > 3 AND T1.net_weight_in_kilograms < 1 AND T2.quantity > 50 ORDER BY T1.product_display_name DESC",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the transaction unique identifier, transaction date and time, and payment method used for transactions with a total transaction amount greater than 1000 and a refund status of false.",
      "Expected": "SELECT transaction_unique_identifier, transaction_date_and_time, payment_method_used FROM transactions_and_payments WHERE total_transaction_amount > 1000 AND refund_status = FALSE",
      "Actual": "SELECT transaction_id, transaction_date_time, payment_method FROM transactions WHERE total_amount > 1000 AND refund_status = false",
      "Expected_Error": null,
      "Actual_Error": "relation \"transactions\" does not exist\nLINE 1: ...on_id, transaction_date_time, payment_method FROM transactio...\n                                                             ^\n"
    }
  ]
}