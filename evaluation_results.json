{
  "accuracy": 31.589958158995817,
  "total": 478,
  "matches": 151,
  "mismatches": 327,
  "errors": [
    {
      "NL": "Get the count of wishlist items for each user and sort them in descending order.",
      "Expected": "SELECT fk_user_id, COUNT(*) as wishlist_count FROM wishlist GROUP BY fk_user_id ORDER BY wishlist_count DESC",
      "Actual": "SELECT fk_user_id, COUNT(*) AS wishlist_item_count FROM wishlist GROUP BY fk_user_id ORDER BY wishlist_item_count DESC",
      "Expected_Results": [
        {
          "fk_user_id": 1,
          "wishlist_count": 1
        },
        {
          "fk_user_id": 2,
          "wishlist_count": 1
        }
      ],
      "Actual_Results": [
        {
          "fk_user_id": 1,
          "wishlist_item_count": 1
        },
        {
          "fk_user_id": 2,
          "wishlist_item_count": 1
        }
      ]
    },
    {
      "NL": "Show the average rating of reviews submitted by customers who are verified and have active subscriptions, and the number of helpful votes they received.",
      "Expected": "SELECT AVG(T2.submitted_review_star_rating), AVG(T2.number_of_helpful_votes_received) FROM customerinfo AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier WHERE T1.account_has_active_subscription = TRUE AND T2.verification_status_of_reviewer = TRUE",
      "Actual": "SELECT AVG(pr.submitted_review_star_rating) AS average_rating, SUM(pr.number_of_helpful_votes_received) AS total_helpful_votes FROM product_reviews_and_ratings pr JOIN customerinfo ci ON pr.reviewing_customer_identifier = ci.person_customer_id WHERE pr.verification_status_of_reviewer = true AND ci.account_has_active_subscription = true",
      "Expected_Results": [
        {
          "avg": 25.0
        }
      ],
      "Actual_Results": [
        {
          "average_rating": 5.0,
          "total_helpful_votes": 25
        }
      ]
    },
    {
      "NL": "Find the total number of orders placed by premium customers who have purchased products with an average supplier rating greater than 4 and have a total number of verified reviews greater than 1000, along with the total amount spent by these customers, the average rating given by them, and the total number of helpful votes received by their reviews.",
      "Expected": "SELECT COUNT(DISTINCT o.order_id), SUM(o.total_amount), AVG(prar.submitted_review_star_rating), SUM(prar.number_of_helpful_votes_received) FROM orders o JOIN customerinfo c ON o.person_customer_id = c.person_customer_id JOIN product_reviews_and_ratings prar ON prar.referenced_product_identifier = (SELECT p.unique_product_identifier FROM products p JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE s.average_supplier_rating > 4 AND p.total_number_of_verified_reviews > 1000) WHERE c.person_is_premium = TRUE",
      "Actual": "SELECT COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent, AVG(pr.submitted_review_star_rating) AS average_rating, SUM(pr.number_of_helpful_votes_received) AS total_helpful_votes FROM orders o JOIN customerinfo ci ON o.person_customer_id = ci.person_customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.unique_product_identifier JOIN product_reviews_and_ratings pr ON p.unique_product_identifier = pr.referenced_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE ci.person_is_premium = TRUE AND s.average_supplier_rating > 4 AND p.total_number_of_verified_reviews > 1000",
      "Expected_Results": [
        {
          "count": 2,
          "sum": 50,
          "avg": 5.0
        }
      ],
      "Actual_Results": [
        {
          "total_orders": 2,
          "total_spent": 3799.98,
          "average_rating": 5.0,
          "total_helpful_votes": 50
        }
      ]
    },
    {
      "NL": "Find the total number of products and the total price for each cart associated with a specific user.",
      "Expected": "SELECT COUNT(*) AS total_number_of_products, SUM(total_price) AS total_price FROM cart GROUP BY fk_user_id;",
      "Actual": "SELECT fk_user_id, COUNT(fk_product_id) AS total_products, SUM(total_price) AS total_price FROM cart WHERE fk_user_id = <specific_user_id> GROUP BY fk_user_id",
      "Expected_Error": null,
      "Actual_Error": "syntax error at or near \"<\"\nLINE 1: ...rice) AS total_price FROM cart WHERE fk_user_id = <specific_...\n                                                             ^\n"
    },
    {
      "NL": "List all items in the wishlist where the expected purchase date is within the next 30 days and the priority level is 'high'.",
      "Expected": "SELECT * FROM wishlist WHERE expected_purchase_date <= CURRENT_DATE + INTERVAL '30 days' AND priority_level = 'high';",
      "Actual": "SELECT * FROM wishlist WHERE expected_purchase_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days' AND priority_level = 'high';",
      "Expected_Results": [
        {
          "id": 1,
          "fk_user_id": 1,
          "fk_product_id": 1,
          "product_name": "iPhone 15 Pro",
          "price_at_addition": 999.99,
          "discount_at_addition": 0.0,
          "wishlist_status": "active",
          "priority_level": "high",
          "expected_purchase_date": "2024-02-01",
          "quantity": 1,
          "notes": "Wait for sale",
          "reminder_set": true,
          "reminder_date": "2024-01-25T00:00:00",
          "last_viewed_at": "2024-01-16T00:00:00",
          "added_from_source": "website",
          "stock_status_at_addition": true,
          "category": "Electronics",
          "brand_name": "Apple",
          "session_id": "sess_abc123",
          "currency": "USD",
          "added_at": "2025-03-08T14:44:57.292397"
        }
      ],
      "Actual_Results": []
    },
    {
      "NL": "Find the total number of products supplied by each supplier, along with the average supplier rating and the number of inventories associated with each supplier, ordered by the total number of products supplied in descending order.",
      "Expected": "SELECT supplier_unique_identifier, total_number_of_products_supplied, average_supplier_rating, COUNT(inventory.id) AS inventory_count FROM suppliers LEFT JOIN inventory ON suppliers.supplier_unique_identifier = inventory.supplier_id GROUP BY supplier_unique_identifier, total_number_of_products_supplied, average_supplier_rating ORDER BY total_number_of_products_supplied DESC;",
      "Actual": "SELECT s.supplier_unique_identifier, s.official_supplier_business_name, s.total_number_of_products_supplied, s.average_supplier_rating, COUNT(i.id) AS inventory_count FROM suppliers s LEFT JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id GROUP BY s.supplier_unique_identifier, s.official_supplier_business_name, s.total_number_of_products_supplied, s.average_supplier_rating ORDER BY s.total_number_of_products_supplied DESC",
      "Expected_Results": [
        {
          "supplier_unique_identifier": 2,
          "total_number_of_products_supplied": 300,
          "average_supplier_rating": 4.5,
          "inventory_count": 1
        },
        {
          "supplier_unique_identifier": 5,
          "total_number_of_products_supplied": 250,
          "average_supplier_rating": 4.6,
          "inventory_count": 0
        },
        {
          "supplier_unique_identifier": 3,
          "total_number_of_products_supplied": 200,
          "average_supplier_rating": 4.2,
          "inventory_count": 0
        },
        {
          "supplier_unique_identifier": 4,
          "total_number_of_products_supplied": 175,
          "average_supplier_rating": 4.7,
          "inventory_count": 0
        },
        {
          "supplier_unique_identifier": 1,
          "total_number_of_products_supplied": 150,
          "average_supplier_rating": 4.8,
          "inventory_count": 1
        }
      ],
      "Actual_Results": [
        {
          "supplier_unique_identifier": 2,
          "official_supplier_business_name": "Global Electronics",
          "total_number_of_products_supplied": 300,
          "average_supplier_rating": 4.5,
          "inventory_count": 1
        },
        {
          "supplier_unique_identifier": 5,
          "official_supplier_business_name": "Euro Distributors GmbH",
          "total_number_of_products_supplied": 250,
          "average_supplier_rating": 4.6,
          "inventory_count": 0
        },
        {
          "supplier_unique_identifier": 3,
          "official_supplier_business_name": "Quality Goods Ltd",
          "total_number_of_products_supplied": 200,
          "average_supplier_rating": 4.2,
          "inventory_count": 0
        },
        {
          "supplier_unique_identifier": 4,
          "official_supplier_business_name": "Premium Tech Solutions",
          "total_number_of_products_supplied": 175,
          "average_supplier_rating": 4.7,
          "inventory_count": 0
        },
        {
          "supplier_unique_identifier": 1,
          "official_supplier_business_name": "Tech Supplies Inc",
          "total_number_of_products_supplied": 150,
          "average_supplier_rating": 4.8,
          "inventory_count": 1
        }
      ]
    },
    {
      "NL": "Retrieve the total time spent and the average scroll depth percentage for events where the event type is 'purchase' and the device platform is 'mobile'.",
      "Expected": "SELECT SUM(time_spent_seconds) AS total_time_spent, AVG(scroll_depth_percentage) AS average_scroll_depth FROM events WHERE event_type = 'purchase' AND device_platform = 'mobile';",
      "Actual": "SELECT SUM(time_spent_seconds) AS total_time_spent, AVG(scroll_depth_percentage) AS average_scroll_depth_percentage FROM events WHERE event_type = 'purchase' AND device_platform = 'mobile';",
      "Expected_Results": [
        {
          "total_time_spent": null,
          "average_scroll_depth": null
        }
      ],
      "Actual_Results": [
        {
          "total_time_spent": null,
          "average_scroll_depth_percentage": null
        }
      ]
    },
    {
      "NL": "Analyze the total number of clicks and the average time spent by customers from the United States who visited product pages of 'Electronics' category products and view those who spent the most time on the site, including product names and their respective suppliers.",
      "Expected": "SELECT p.product_display_name, s.official_supplier_business_name, SUM(e.click_count) AS total_clicks, AVG(e.time_spent_seconds) AS average_time_spent FROM events e JOIN products p ON e.order_item_id = p.unique_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE e.location_country = 'United States' AND p.product_category_primary = 'Electronics' GROUP BY p.product_display_name, s.official_supplier_business_name ORDER BY average_time_spent DESC;",
      "Actual": "SELECT e.person_customer_id, p.product_name, s.official_supplier_business_name, SUM(e.click_count) AS total_clicks, AVG(e.time_spent_seconds) AS avg_time_spent FROM events e JOIN order_items oi ON e.order_item_id = oi.order_item_id JOIN products p ON oi.product_id = p.unique_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE e.location_country = 'United States' AND p.product_category_primary = 'Electronics' GROUP BY e.person_customer_id, p.product_name, s.official_supplier_business_name ORDER BY avg_time_spent DESC",
      "Expected_Error": null,
      "Actual_Error": "column p.product_name does not exist\nLINE 1: SELECT e.person_customer_id, p.product_name, s.official_supp...\n                                     ^\nHINT:  Perhaps you meant to reference the column \"oi.product_name\".\n"
    },
    {
      "NL": "List all the campaigns with their corresponding campaign status, start date, end date and total revenue generated, and also list the total quantity of products in the cart for each campaign",
      "Expected": "SELECT c.campaign_name, c.campaign_status, c.start_date, c.end_date, c.revenue_generated, SUM(ct.quantity) AS total_quantity FROM campaigns c LEFT JOIN cart ct ON c.campaign_id = ct.fk_product_id GROUP BY c.campaign_name, c.campaign_status, c.start_date, c.end_date, c.revenue_generated",
      "Actual": "SELECT c.campaign_name, c.campaign_status, c.start_date, c.end_date, c.revenue_generated, SUM(cart.quantity) AS total_quantity_in_cart FROM campaigns c LEFT JOIN orders o ON c.campaign_id = o.campaign_id LEFT JOIN cart cart ON o.person_customer_id = cart.fk_user_id GROUP BY c.campaign_name, c.campaign_status, c.start_date, c.end_date, c.revenue_generated",
      "Expected_Results": [
        {
          "campaign_name": "Black Friday 2024",
          "campaign_status": "Planned",
          "start_date": "2024-11-29T00:00:00",
          "end_date": "2024-11-30T00:00:00",
          "revenue_generated": 250000.0,
          "total_quantity": null
        },
        {
          "campaign_name": "Summer Sale 2024",
          "campaign_status": "Planned",
          "start_date": "2024-06-01T00:00:00",
          "end_date": "2024-06-30T00:00:00",
          "revenue_generated": 125000.0,
          "total_quantity": 2
        },
        {
          "campaign_name": "New Customer Welcome",
          "campaign_status": "Active",
          "start_date": "2024-01-01T00:00:00",
          "end_date": "2024-12-31T00:00:00",
          "revenue_generated": 90000.0,
          "total_quantity": 1
        }
      ],
      "Actual_Results": [
        {
          "campaign_name": "Black Friday 2024",
          "campaign_status": "Planned",
          "start_date": "2024-11-29T00:00:00",
          "end_date": "2024-11-30T00:00:00",
          "revenue_generated": 250000.0,
          "total_quantity_in_cart": null
        },
        {
          "campaign_name": "Summer Sale 2024",
          "campaign_status": "Planned",
          "start_date": "2024-06-01T00:00:00",
          "end_date": "2024-06-30T00:00:00",
          "revenue_generated": 125000.0,
          "total_quantity_in_cart": 2
        },
        {
          "campaign_name": "New Customer Welcome",
          "campaign_status": "Active",
          "start_date": "2024-01-01T00:00:00",
          "end_date": "2024-12-31T00:00:00",
          "revenue_generated": 90000.0,
          "total_quantity_in_cart": 1
        }
      ]
    },
    {
      "NL": "List the anniversary_reward_voucher_status of customers and their corresponding shipping_status for orders with fk_order_id = 67890.",
      "Expected": "SELECT T2.anniversary_reward_voucher_status, T1.shipping_status FROM shipping AS T1 INNER JOIN customers_loyalty_program AS T2 ON T1.fk_order_id = T2.associated_customer_reference_id WHERE T1.fk_order_id = 67890",
      "Actual": "SELECT T1.anniversary_reward_voucher_status, T2.shipping_status FROM customers_loyalty_program AS T1 JOIN orders AS T2 ON T1.associated_customer_reference_id = T2.person_customer_id WHERE T2.order_id = 67890",
      "Expected_Error": null,
      "Actual_Error": "column t2.shipping_status does not exist\nLINE 1: SELECT T1.anniversary_reward_voucher_status, T2.shipping_sta...\n                                                     ^\n"
    },
    {
      "NL": "Get the wishlists with the name of the wishlist item and its price at addition, along with the order status of the orders with matching campaign ID.",
      "Expected": "SELECT w.product_name, w.price_at_addition, o.order_status FROM wishlist w LEFT JOIN orders o ON w.fk_product_id = o.campaign_id",
      "Actual": "SELECT w.product_name, w.price_at_addition, o.order_status FROM wishlist w LEFT JOIN orders o ON w.fk_user_id = o.person_customer_id WHERE w.added_from_source = 'campaign' AND w.campaign_id = o.campaign_id",
      "Expected_Error": null,
      "Actual_Error": "invalid input value for enum added_from_source_enum: \"campaign\"\nLINE 1: ... o.person_customer_id WHERE w.added_from_source = 'campaign'...\n                                                             ^\n"
    },
    {
      "NL": "For each distinct product name in the wishlist, find the corresponding product id and brand name from the wishlist, as well as the order item id and item status from the order items table, where the wishlist product id matches the order item product id, and include the corresponding shipping address, shipping city, and shipping state from the shipping table.",
      "Expected": "SELECT DISTINCT T1.product_name, T1.fk_product_id, T1.brand_name, T2.order_item_id, T2.item_status, T3.shipping_address, T3.shipping_city, T3.shipping_state FROM wishlist AS T1 INNER JOIN order_items AS T2 ON T1.fk_product_id = T2.product_id INNER JOIN shipping AS T3 ON T2.order_id = T3.fk_order_id",
      "Actual": "SELECT w.product_name, w.fk_product_id, w.brand_name, oi.order_item_id, oi.item_status, s.shipping_address, s.shipping_city, s.shipping_state FROM wishlist w JOIN order_items oi ON w.fk_product_id = oi.product_id JOIN shipping s ON oi.fk_order_id = s.fk_order_id",
      "Expected_Error": null,
      "Actual_Error": "column oi.fk_order_id does not exist\nLINE 1: ....fk_product_id = oi.product_id JOIN shipping s ON oi.fk_orde...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"s.fk_order_id\".\n"
    },
    {
      "NL": "Find the total amount of all orders placed by customers from the United States that were shipped using standard shipping methods and include a discount.",
      "Expected": "SELECT SUM(o.total_amount) FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.shipping_address_country = 'United States' AND oi.is_returnable = false AND o.discount_applied > 0;",
      "Actual": "SELECT SUM(total_amount) FROM orders WHERE person_customer_id IN (SELECT person_customer_id FROM customerinfo WHERE address_country = 'United States') AND shipping_method = 'Standard' AND discount_applied > 0",
      "Expected_Error": null,
      "Actual_Error": "column \"shipping_method\" does not exist\nLINE 1: ...info WHERE address_country = 'United States') AND shipping_m...\n                                                             ^\n"
    },
    {
      "NL": "Find the event type, the campaign name, and the total number of products supplied by each supplier for events where the device type is 'mobile' and the campaign status is 'completed' and the supplier tax identification number is '123456789'.",
      "Expected": "SELECT T1.event_type, T2.campaign_name, T3.total_number_of_products_supplied FROM events AS T1 INNER JOIN campaigns AS T2 ON T1.event_id = T2.campaign_id INNER JOIN suppliers AS T3 ON T2.campaign_id = T3.supplier_unique_identifier WHERE T1.device_type = 'mobile' AND T2.campaign_status = 'completed' AND T3.supplier_tax_identification_number = '123456789'",
      "Actual": "SELECT e.event_type, c.campaign_name, s.total_number_of_products_supplied FROM events e JOIN campaigns c ON e.campaign_id = c.campaign_id JOIN products p ON e.order_item_id = p.unique_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE e.device_type = 'mobile' AND c.campaign_status = 'completed' AND s.supplier_tax_identification_number = '123456789'",
      "Expected_Error": null,
      "Actual_Error": "column e.campaign_id does not exist\nLINE 1: ...oducts_supplied FROM events e JOIN campaigns c ON e.campaign...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"c.campaign_id\".\n"
    },
    {
      "NL": "Show the total amount of refunds and the total restocking fees for items in the inventory that belong to products that have a featured product flag set to true",
      "Expected": "SELECT sum(refund_amount) as total_refund_amount, sum(restocking_fee) as total_restocking_fee FROM refunds_returns INNER JOIN products ON refunds_returns.fk_product_id = products.unique_product_identifier WHERE products.featured_product_flag = true AND refunds_returns.fk_product_id IN (SELECT referenced_product_id FROM inventory)",
      "Actual": "SELECT SUM(r.refund_amount) AS total_refunds, SUM(r.restocking_fee) AS total_restocking_fees FROM refunds_returns r JOIN products p ON r.fk_product_id = p.unique_product_identifier WHERE p.featured_product_flag = true",
      "Expected_Results": [
        {
          "total_refund_amount": 2499.98,
          "total_restocking_fee": 0.0
        }
      ],
      "Actual_Results": [
        {
          "total_refunds": 2499.98,
          "total_restocking_fees": 0.0
        }
      ]
    },
    {
      "NL": "What is the average aggregate customer review rating for all products from suppliers in the USA, who have an average supplier rating of at least 4.5, and what is the average total number of products supplied by these suppliers?",
      "Expected": "SELECT AVG(T2.aggregate_customer_review_rating) AS AVG_RATING, AVG(T1.total_number_of_products_supplied) AS AVG_PRODUCTS FROM suppliers AS T1 INNER JOIN products AS T2 ON T1.supplier_unique_identifier = T2.associated_supplier_reference_id WHERE T1.supplier_country_of_operation = 'USA' AND T1.average_supplier_rating >= 4.5",
      "Actual": "SELECT AVG(pr.aggregate_customer_review_rating) AS avg_review_rating, AVG(s.total_number_of_products_supplied) AS avg_products_supplied FROM product_reviews_and_ratings pr JOIN products p ON pr.referenced_product_identifier = p.unique_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE s.supplier_country_of_operation = 'USA' AND s.average_supplier_rating >= 4.5",
      "Expected_Error": null,
      "Actual_Error": "column pr.aggregate_customer_review_rating does not exist\nLINE 1: SELECT AVG(pr.aggregate_customer_review_rating) AS avg_revie...\n                   ^\nHINT:  Perhaps you meant to reference the column \"p.aggregate_customer_review_rating\".\n"
    },
    {
      "NL": "Find the names of products that have received a review with a sentiment analysis score greater than 0.7 and have a total number of verified reviews of at least 50.",
      "Expected": "SELECT p.product_display_name FROM products p JOIN product_reviews_and_ratings prr ON p.unique_product_identifier = prr.referenced_product_identifier WHERE prr.sentiment_analysis_score > 0.7 GROUP BY p.product_display_name HAVING COUNT(prr.review_unique_identifier) >= 50;",
      "Actual": "SELECT DISTINCT pr.product_display_name FROM products pr JOIN product_reviews_and_ratings prr ON pr.unique_product_identifier = prr.referenced_product_identifier WHERE prr.sentiment_analysis_score > 0.7 AND pr.total_number_of_verified_reviews >= 50",
      "Expected_Results": [],
      "Actual_Results": [
        {
          "product_display_name": "iPhone 15 Pro"
        },
        {
          "product_display_name": "Samsung 4K Smart TV"
        }
      ]
    },
    {
      "NL": "Get the total discount amount redeemed and the total number of products supplied for customers who are eligible for special promotions and have a supplier with more than 100 products supplied",
      "Expected": "SELECT clp.total_discount_amount_redeemed, s.total_number_of_products_supplied FROM customers_loyalty_program clp JOIN cart c ON clp.associated_customer_reference_id = c.fk_user_id JOIN suppliers s ON c.fk_product_id = s.supplier_unique_identifier WHERE clp.eligible_for_special_promotions = TRUE AND s.total_number_of_products_supplied > 100",
      "Actual": "SELECT SUM(clp.total_discount_amount_redeemed), SUM(s.total_number_of_products_supplied) FROM customers_loyalty_program clp JOIN orders o ON clp.associated_customer_reference_id = o.person_customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.unique_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE clp.eligible_for_special_promotions = TRUE AND s.total_number_of_products_supplied > 100",
      "Expected_Results": [
        {
          "total_discount_amount_redeemed": 250.0,
          "total_number_of_products_supplied": 150
        },
        {
          "total_discount_amount_redeemed": 150.0,
          "total_number_of_products_supplied": 300
        }
      ],
      "Actual_Results": [
        {
          "sum": 450
        }
      ]
    },
    {
      "NL": "Find the total transaction amount and the number of reviews for each customer who has made a transaction and submitted a review for the same product.",
      "Expected": "SELECT transactions_and_payments.corresponding_customer_reference_identifier, SUM(transactions_and_payments.total_transaction_amount) AS total_transaction_amount, COUNT(product_reviews_and_ratings.review_unique_identifier) AS number_of_reviews FROM transactions_and_payments JOIN product_reviews_and_ratings ON transactions_and_payments.corresponding_customer_reference_identifier = product_reviews_and_ratings.reviewing_customer_identifier GROUP BY transactions_and_payments.corresponding_customer_reference_identifier;",
      "Actual": "SELECT c.person_customer_id, SUM(t.total_transaction_amount) AS total_transaction_amount, COUNT(r.review_unique_identifier) AS number_of_reviews FROM customerinfo c JOIN transactions_and_payments t ON c.person_customer_id = t.corresponding_customer_reference_identifier JOIN product_reviews_and_ratings r ON c.person_customer_id = r.reviewing_customer_identifier AND t.linked_order_reference_identifier = r.referenced_product_identifier GROUP BY c.person_customer_id",
      "Expected_Results": [
        {
          "corresponding_customer_reference_identifier": 1,
          "total_transaction_amount": 1299.99,
          "number_of_reviews": 1
        },
        {
          "corresponding_customer_reference_identifier": 2,
          "total_transaction_amount": 799.99,
          "number_of_reviews": 1
        }
      ],
      "Actual_Results": [
        {
          "person_customer_id": 1,
          "total_transaction_amount": 1299.99,
          "number_of_reviews": 1
        },
        {
          "person_customer_id": 2,
          "total_transaction_amount": 799.99,
          "number_of_reviews": 1
        }
      ]
    },
    {
      "NL": "Find the total number of products supplied by each supplier and list them in descending order.",
      "Expected": "SELECT supplier_unique_identifier, SUM(total_number_of_products_supplied) AS total_products_supplied FROM suppliers GROUP BY supplier_unique_identifier ORDER BY total_products_supplied DESC;",
      "Actual": "SELECT supplier_unique_identifier, total_number_of_products_supplied FROM suppliers ORDER BY total_number_of_products_supplied DESC",
      "Expected_Results": [
        {
          "supplier_unique_identifier": 2,
          "total_products_supplied": 300
        },
        {
          "supplier_unique_identifier": 5,
          "total_products_supplied": 250
        },
        {
          "supplier_unique_identifier": 3,
          "total_products_supplied": 200
        },
        {
          "supplier_unique_identifier": 4,
          "total_products_supplied": 175
        },
        {
          "supplier_unique_identifier": 1,
          "total_products_supplied": 150
        }
      ],
      "Actual_Results": [
        {
          "supplier_unique_identifier": 2,
          "total_number_of_products_supplied": 300
        },
        {
          "supplier_unique_identifier": 5,
          "total_number_of_products_supplied": 250
        },
        {
          "supplier_unique_identifier": 3,
          "total_number_of_products_supplied": 200
        },
        {
          "supplier_unique_identifier": 4,
          "total_number_of_products_supplied": 175
        },
        {
          "supplier_unique_identifier": 1,
          "total_number_of_products_supplied": 150
        }
      ]
    },
    {
      "NL": "Identify the top 5 customers who have the highest total number of edits made in their reviews and have submitted reviews with a review_unique_identifier that is either 100 or 200. Additionally, for these customers, find the average time spent on the product review page and the total number of events where they clicked more than 3 times and spent more than 10 seconds on the page, considering only events that happened after June 1, 2022. The results should be ordered by the total number of edits in descending order.",
      "Expected": "SELECT p.reviewing_customer_identifier, COUNT(p.total_number_of_edits_made) AS total_edits, AVG(e.time_spent_seconds) AS avg_time_spent, COUNT(e.event_id) AS high_activity_events FROM product_reviews_and_ratings p LEFT JOIN events e ON p.reviewing_customer_identifier = e.person_customer_id WHERE p.review_unique_identifier IN (100, 200) AND e.event_type = 'product_review_page' AND e.time_spent_seconds > 10 AND e.click_count > 3 AND e.event_timestamp > '2022-06-01' GROUP BY p.reviewing_customer_identifier ORDER BY total_edits DESC LIMIT 5;",
      "Actual": "SELECT e.person_customer_id, AVG(e.time_spent_seconds) AS avg_time_spent, COUNT(*) AS count_of_events FROM events e JOIN product_reviews_and_ratings p ON e.person_customer_id = p.reviewing_customer_identifier WHERE (p.review_unique_identifier = 100 OR p.review_unique_identifier = 200) AND e.time_spent_seconds > 10 AND e.click_count > 3 AND e.event_timestamp > '2022-06-01' GROUP BY e.person_customer_id ORDER BY p.total_number_of_edits_made DESC LIMIT 5",
      "Expected_Error": null,
      "Actual_Error": "column \"p.total_number_of_edits_made\" must appear in the GROUP BY clause or be used in an aggregate function\nLINE 1: ...022-06-01' GROUP BY e.person_customer_id ORDER BY p.total_nu...\n                                                             ^\n"
    },
    {
      "NL": "Find all the orders with total price greater than 100 and the item is returnable.",
      "Expected": "SELECT * FROM order_items WHERE total_price > 100 AND is_returnable = TRUE",
      "Actual": "SELECT o.* FROM orders o JOIN order_items oi ON o.order_id = oi.order_id WHERE o.total_amount > 100 AND oi.is_returnable = true",
      "Expected_Results": [
        {
          "order_item_id": 1,
          "order_id": 1,
          "product_id": 1,
          "product_name": "iPhone 15 Pro",
          "quantity": 1,
          "price_per_unit": 999.99,
          "total_price": 999.99,
          "item_status": "Delivered",
          "warranty_period": 12,
          "return_period": 14,
          "is_returnable": true,
          "is_replacement_available": true,
          "discount_applied": 50.0,
          "tax_amount": 80.0,
          "shipping_fee": 15.0,
          "item_weight": 0.24,
          "item_dimensions": "14.7x7.2x0.8",
          "manufacturer": "Apple Inc."
        },
        {
          "order_item_id": 2,
          "order_id": 2,
          "product_id": 2,
          "product_name": "Samsung 4K Smart TV",
          "quantity": 1,
          "price_per_unit": 1499.99,
          "total_price": 1499.99,
          "item_status": "Shipped",
          "warranty_period": 24,
          "return_period": 30,
          "is_returnable": true,
          "is_replacement_available": true,
          "discount_applied": 100.0,
          "tax_amount": 120.0,
          "shipping_fee": 50.0,
          "item_weight": 25.5,
          "item_dimensions": "145x85x7",
          "manufacturer": "Samsung Electronics"
        },
        {
          "order_item_id": 3,
          "order_id": 3,
          "product_id": 1,
          "product_name": "iPhone 15 Pro",
          "quantity": 2,
          "price_per_unit": 999.99,
          "total_price": 1999.98,
          "item_status": "Processing",
          "warranty_period": 12,
          "return_period": 14,
          "is_returnable": true,
          "is_replacement_available": true,
          "discount_applied": 100.0,
          "tax_amount": 160.0,
          "shipping_fee": 0.0,
          "item_weight": 0.48,
          "item_dimensions": "14.7x7.2x0.8",
          "manufacturer": "Apple Inc."
        }
      ],
      "Actual_Results": [
        {
          "order_id": 1,
          "person_customer_id": 1,
          "order_date": "2024-01-15T10:30:00",
          "shipping_date": "2024-01-16T14:20:00",
          "delivery_date": "2024-01-18T15:00:00",
          "order_status": "Delivered",
          "total_amount": 1299.99,
          "discount_applied": 50.0,
          "tax_amount": 104.0,
          "shipping_fee": 15.0,
          "payment_status": "Paid",
          "payment_method": "Credit Card",
          "tracking_number": "TRACK123ABC",
          "shipping_address_street": "123 Main St",
          "shipping_address_city": "New York",
          "shipping_address_state": "NY",
          "shipping_address_country": "USA",
          "shipping_address_postalcode": "10001",
          "special_instructions": "Please leave at front door",
          "created_at": "2025-03-08T14:44:57.210017",
          "updated_at": "2025-03-08T14:44:57.210017",
          "campaign_id": 1
        },
        {
          "order_id": 2,
          "person_customer_id": 2,
          "order_date": "2024-01-16T15:45:00",
          "shipping_date": "2024-01-17T09:30:00",
          "delivery_date": null,
          "order_status": "Shipped",
          "total_amount": 799.99,
          "discount_applied": 25.0,
          "tax_amount": 64.0,
          "shipping_fee": 12.0,
          "payment_status": "Paid",
          "payment_method": "PayPal",
          "tracking_number": "TRACK456DEF",
          "shipping_address_street": "456 Oak Ave",
          "shipping_address_city": "Los Angeles",
          "shipping_address_state": "CA",
          "shipping_address_country": "USA",
          "shipping_address_postalcode": "90001",
          "special_instructions": "Signature required",
          "created_at": "2025-03-08T14:44:57.210017",
          "updated_at": "2025-03-08T14:44:57.210017",
          "campaign_id": 2
        },
        {
          "order_id": 3,
          "person_customer_id": 3,
          "order_date": "2024-01-17T08:20:00",
          "shipping_date": null,
          "delivery_date": null,
          "order_status": "Processing",
          "total_amount": 2499.99,
          "discount_applied": 100.0,
          "tax_amount": 200.0,
          "shipping_fee": 0.0,
          "payment_status": "Paid",
          "payment_method": "Credit Card",
          "tracking_number": "TRACK789GHI",
          "shipping_address_street": "789 Pine St",
          "shipping_address_city": "Chicago",
          "shipping_address_state": "IL",
          "shipping_address_country": "USA",
          "shipping_address_postalcode": "60601",
          "special_instructions": null,
          "created_at": "2025-03-08T14:44:57.210017",
          "updated_at": "2025-03-08T14:44:57.210017",
          "campaign_id": 1
        }
      ]
    },
    {
      "NL": "Find all reviews with a sentiment analysis score greater than 4 that were submitted by customers who have made more than 10 previous purchases and were reviewed on the same day as the last restock date of their associated product, excluding those products that are currently out of stock.",
      "Expected": "SELECT prr.* FROM product_reviews_and_ratings prr JOIN inventory i ON prr.referenced_product_identifier = i.referenced_product_id WHERE prr.sentiment_analysis_score > 4 AND prr.previous_product_purchases_count > 10 AND DATE(prr.customer_review_submission_date) = DATE(i.last_restock_date) AND i.stock_status != 'out_of_stock'",
      "Actual": "SELECT prar.* FROM product_reviews_and_ratings prar JOIN customers_loyalty_program clp ON prar.reviewing_customer_identifier = clp.associated_customer_reference_id JOIN inventory i ON prar.referenced_product_identifier = i.referenced_product_id WHERE prar.sentiment_analysis_score > 4 AND clp.previous_product_purchases_count > 10 AND prar.customer_review_submission_date::date = i.last_restock_date::date AND i.stock_status != 'out_of_stock'",
      "Expected_Error": null,
      "Actual_Error": "column clp.previous_product_purchases_count does not exist\nLINE 1: ...ct_id WHERE prar.sentiment_analysis_score > 4 AND clp.previo...\n                                                             ^\n"
    },
    {
      "NL": "Find all products with a standard retail price greater than $50 and the customers who have redeemed more than 1000 loyalty points and have an anniversary reward voucher status as true.",
      "Expected": "SELECT p.*, c.* FROM products p JOIN customers_loyalty_program c ON p.unique_product_identifier = c.associated_customer_reference_id WHERE p.standard_retail_price_including_tax > 50 AND c.lifetime_loyalty_points_redeemed > 1000 AND c.anniversary_reward_voucher_status = TRUE",
      "Actual": "SELECT p.product_display_name, c.person_first_name, c.person_last_name FROM products p JOIN customers_loyalty_program clp ON p.unique_product_identifier = clp.associated_customer_reference_id JOIN customerinfo c ON clp.associated_customer_reference_id = c.person_customer_id WHERE p.standard_retail_price_including_tax > 50 AND clp.accumulated_loyalty_points_balance > 1000 AND clp.anniversary_reward_voucher_status = true",
      "Expected_Results": [
        {
          "unique_product_identifier": 1,
          "product_display_name": "iPhone 15 Pro",
          "detailed_product_description": "Latest flagship smartphone from Apple",
          "product_category_primary": "Electronics",
          "product_category_secondary": "Smartphones",
          "global_brand_affiliation": "Apple",
          "model_identification_code": "IP15P-2023",
          "stock_keeping_unit_identifier": "SKU123456",
          "universal_product_code": "UPC123456789",
          "european_article_number": "EAN123456789",
          "international_standard_book_number": null,
          "standard_retail_price_including_tax": 999.99,
          "promotional_discounted_price": 899.99,
          "percentage_discount_applied": 10.0,
          "applicable_value_added_tax": 20.0,
          "currency_of_transaction": "USD",
          "available_stock_quantity_in_units": 500,
          "minimum_threshold_for_restocking": 50,
          "estimated_replenishment_date": "2024-02-15",
          "associated_supplier_reference_id": 1,
          "warehouse_storage_location_details": "Zone A-123",
          "production_batch_identifier": "BATCH2024-001",
          "net_weight_in_kilograms": 0.24,
          "physical_length_in_centimeters": 14.7,
          "physical_width_in_centimeters": 7.2,
          "physical_height_in_centimeters": 0.8,
          "volumetric_measurement_in_liters": 0.12,
          "predominant_color_description": "Space Gray",
          "designated_size_variation": "Standard",
          "primary_material_composition": "Aluminum and Glass",
          "stylistic_representation": "Modern",
          "intended_user_demographic": "Premium",
          "estimated_battery_backup_duration": "24 hours",
          "energy_consumption_rating": "A+++",
          "supported_connectivity_protocols": "WiFi 6E, 5G, Bluetooth 5.3",
          "embedded_processor_specifications": "A17 Pro Chip",
          "integrated_memory_configuration": "8GB RAM",
          "total_storage_capacity_details": "256GB",
          "indexed_search_keywords_for_product": "iphone, smartphone, apple, pro, camera",
          "optimized_meta_title_for_seo": "iPhone 15 Pro - Latest Premium Smartphone",
          "search_engine_meta_description": "Experience the next generation iPhone with revolutionary features",
          "product_demonstration_video_link": "https://youtube.com/iphone15pro",
          "featured_product_flag": true,
          "aggregate_customer_review_rating": 4.8,
          "total_number_of_verified_reviews": 1250,
          "standard_warranty_duration": "12 months",
          "comprehensive_return_policy_description": "14-day return policy with original packaging",
          "shipping_weight_measurement_in_kilograms": 0.39,
          "fragile_item_indicator": true,
          "perishable_product_flag": false,
          "expected_lead_time_in_business_days": 3,
          "active_product_status": true,
          "official_product_release_date": "2023-09-22",
          "official_product_discontinuation_date": null,
          "legal_manufacturer_entity_name": "Apple Inc.",
          "country_of_product_origin": "China",
          "estimated_production_cost_per_unit": 400.0,
          "certified_regulatory_compliance_details": "FCC, CE, RoHS compliant",
          "environmentally_sustainable_product": true,
          "applicable_warranty_coverage_type": "Limited Warranty",
          "loyalty_membership_unique_identifier": 1,
          "associated_customer_reference_id": 1,
          "loyalty_program_tier_level": "Gold",
          "accumulated_loyalty_points_balance": 5000,
          "last_loyalty_point_update_date": "2025-03-08T14:44:57.237879",
          "eligible_for_special_promotions": true,
          "initial_enrollment_date": "2023-01-01T00:00:00",
          "last_loyalty_tier_upgrade_date": "2023-06-15T00:00:00",
          "next_loyalty_tier_evaluation_date": "2024-06-15T00:00:00",
          "expiration_date_of_loyalty_points": "2024-12-31T00:00:00",
          "total_discount_amount_redeemed": 250.0,
          "lifetime_loyalty_points_earned": 7500,
          "lifetime_loyalty_points_redeemed": 2500,
          "exclusive_coupon_codes_assigned": "GOLD10,GOLD20",
          "customer_birthday_special_discount": true,
          "personalized_product_recommendations": {
            "recommended": [
              "product1",
              "product2",
              "product3"
            ]
          },
          "annual_loyalty_spending_threshold": 5000.0,
          "free_shipping_eligibility": true,
          "anniversary_reward_voucher_status": true,
          "customer_feedback_engagement_score": 4.8,
          "bonus_loyalty_points_last_month": 100,
          "referral_bonus_points_earned": 200,
          "referred_friends_count": 3,
          "extra_reward_credits_from_surveys": 50,
          "special_event_invitation_status": true,
          "redemption_activity_log": {
            "last_redemption": "2024-01-15",
            "points_used": 500
          },
          "last_redemption_date": "2024-01-15T00:00:00",
          "preferred_communication_channel": "Email",
          "participation_in_exclusive_beta_testing": true,
          "exclusive_member_early_access": true
        }
      ],
      "Actual_Results": [
        {
          "product_display_name": "iPhone 15 Pro",
          "person_first_name": "John",
          "person_last_name": "Doe"
        }
      ]
    },
    {
      "NL": "What is the total revenue generated by each campaign and the total amount spent by each order?",
      "Expected": "SELECT SUM(T2.revenue_generated) AS total_revenue, SUM(T1.total_amount) AS total_amount FROM orders AS T1 INNER JOIN campaigns AS T2 ON T1.campaign_id = T2.campaign_id GROUP BY T2.campaign_id",
      "Actual": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, o.order_id, SUM(o.total_amount) AS total_order_amount FROM campaigns c JOIN orders o ON c.campaign_id = o.campaign_id GROUP BY c.campaign_name, o.order_id",
      "Expected_Results": [
        {
          "total_revenue": 250000.0,
          "total_amount": 3799.98
        },
        {
          "total_revenue": 90000.0,
          "total_amount": 799.99
        }
      ],
      "Actual_Results": [
        {
          "campaign_name": "Summer Sale 2024",
          "total_revenue": 125000.0,
          "order_id": 3,
          "total_order_amount": 2499.99
        },
        {
          "campaign_name": "New Customer Welcome",
          "total_revenue": 90000.0,
          "order_id": 2,
          "total_order_amount": 799.99
        },
        {
          "campaign_name": "Summer Sale 2024",
          "total_revenue": 125000.0,
          "order_id": 1,
          "total_order_amount": 1299.99
        }
      ]
    },
    {
      "NL": "Find the total orders for each customer who has a preferred payment method and sort the results in ascending order.",
      "Expected": "SELECT T2.preferences_total_orders FROM customerinfo AS T1 INNER JOIN customerinfo AS T2 ON T1.person_customer_id = T2.person_customer_id WHERE T1.account_preferred_payment_method IS NOT NULL ORDER BY T2.preferences_total_orders ASC;",
      "Actual": "SELECT person_customer_id, COUNT(order_id) AS total_orders FROM customerinfo JOIN orders ON customerinfo.person_customer_id = orders.person_customer_id WHERE account_preferred_payment_method IS NOT NULL GROUP BY person_customer_id ORDER BY total_orders ASC",
      "Expected_Error": null,
      "Actual_Error": "column reference \"person_customer_id\" is ambiguous\nLINE 1: SELECT person_customer_id, COUNT(order_id) AS total_orders F...\n               ^\n"
    },
    {
      "NL": "Find the total number of products supplied by each supplier along with the corresponding inventory quantity for products with a safety stock greater than 10.",
      "Expected": "SELECT s.total_number_of_products_supplied, i.quantity FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id WHERE i.safety_stock > 10;",
      "Actual": "SELECT s.supplier_unique_identifier, s.official_supplier_business_name, SUM(i.quantity) AS total_products_supplied, SUM(i.quantity) FILTER (WHERE i.safety_stock > 10) AS inventory_quantity FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id GROUP BY s.supplier_unique_identifier, s.official_supplier_business_name",
      "Expected_Results": [
        {
          "total_number_of_products_supplied": 150,
          "quantity": 500
        }
      ],
      "Actual_Results": [
        {
          "supplier_unique_identifier": 1,
          "official_supplier_business_name": "Tech Supplies Inc",
          "total_products_supplied": 500,
          "inventory_quantity": 500
        },
        {
          "supplier_unique_identifier": 2,
          "official_supplier_business_name": "Global Electronics",
          "total_products_supplied": 200,
          "inventory_quantity": null
        }
      ]
    },
    {
      "NL": "Find the total revenue generated by each campaign type along with the total quantity of inventory for each product",
      "Expected": "SELECT c.campaign_type, SUM(c.revenue_generated) AS total_revenue, SUM(i.quantity) AS total_quantity FROM campaigns c JOIN inventory i ON c.campaign_id = i.referenced_product_id GROUP BY c.campaign_type",
      "Actual": "SELECT c.campaign_type, SUM(c.revenue_generated) AS total_revenue, p.unique_product_identifier, SUM(i.quantity) AS total_inventory FROM campaigns c JOIN orders o ON c.campaign_id = o.campaign_id JOIN order_items oi ON o.order_id = oi.order_id JOIN inventory i ON oi.product_id = i.referenced_product_id JOIN products p ON oi.product_id = p.unique_product_identifier GROUP BY c.campaign_type, p.unique_product_identifier",
      "Expected_Results": [
        {
          "campaign_type": "Promotional",
          "total_revenue": 90000.0,
          "total_quantity": 200
        },
        {
          "campaign_type": "Seasonal",
          "total_revenue": 125000.0,
          "total_quantity": 500
        }
      ],
      "Actual_Results": [
        {
          "campaign_type": "Seasonal",
          "total_revenue": 250000.0,
          "unique_product_identifier": 1,
          "total_inventory": 1000
        },
        {
          "campaign_type": "Promotional",
          "total_revenue": 90000.0,
          "unique_product_identifier": 2,
          "total_inventory": 200
        }
      ]
    },
    {
      "NL": "List the average number of stars given by customers who have placed more than 10 orders.",
      "Expected": "SELECT AVG(pr.submitted_review_star_rating) FROM product_reviews_and_ratings pr JOIN customerinfo ci ON pr.reviewing_customer_identifier = ci.person_customer_id WHERE ci.preferences_total_orders > 10;",
      "Actual": "SELECT AVG(pr.submitted_review_star_rating) FROM product_reviews_and_ratings pr JOIN orders o ON pr.reviewing_customer_identifier = o.person_customer_id GROUP BY pr.reviewing_customer_identifier HAVING COUNT(o.order_id) > 10",
      "Expected_Results": [
        {
          "avg": 5.0
        }
      ],
      "Actual_Results": []
    },
    {
      "NL": "Find the top 5 most purchased products with their average rating from customers who have purchased at least 2 products and have a loyalty membership tier level of Platinum, along with the total number of reviews for each product and the total loyalty points earned by each customer.",
      "Expected": "WITH purchased_products AS ( SELECT T2.referenced_product_identifier, T1.associated_customer_reference_id, T2.submitted_review_star_rating FROM customers_loyalty_program AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.associated_customer_reference_id = T2.reviewing_customer_identifier ), count_table AS ( SELECT referenced_product_identifier, COUNT(referenced_product_identifier) AS count, AVG(submitted_review_star_rating) AS avg_rating FROM purchased_products GROUP BY referenced_product_identifier ) SELECT T2.referenced_product_identifier, T2.avg_rating, T3.loyalty_membership_unique_identifier, T3.lifetime_loyalty_points_earned, T2.count FROM purchased_products AS T1 INNER JOIN count_table AS T2 ON T1.referenced_product_identifier = T2.referenced_product_identifier INNER JOIN customers_loyalty_program AS T3 ON T1.associated_customer_reference_id = T3.associated_customer_reference_id WHERE T3.loyalty_program_tier_level = 'Platinum' AND T2.count > 2 ORDER BY T2.avg_rating DESC LIMIT 5",
      "Actual": "SELECT p.product_display_name, AVG(pr.submitted_review_star_rating) AS average_rating, COUNT(pr.review_unique_identifier) AS total_reviews, SUM(clp.associated_loyalty_points_earned) AS total_loyalty_points_earned FROM products p JOIN order_items oi ON p.unique_product_identifier = oi.product_id JOIN orders o ON oi.order_id = o.order_id JOIN customers_loyalty_program clp ON o.person_customer_id = clp.associated_customer_reference_id JOIN product_reviews_and_ratings pr ON p.unique_product_identifier = pr.referenced_product_identifier WHERE clp.loyalty_program_tier_level = 'Platinum' GROUP BY p.product_display_name HAVING COUNT(DISTINCT o.order_id) >= 2 ORDER BY COUNT(oi.product_id) DESC LIMIT 5",
      "Expected_Error": null,
      "Actual_Error": "column clp.associated_loyalty_points_earned does not exist\nLINE 1: ...r.review_unique_identifier) AS total_reviews, SUM(clp.associ...\n                                                             ^\n"
    },
    {
      "NL": "Find the total revenue generated by campaigns that were successful, defined as campaigns with an actual spent less than the budget.",
      "Expected": "SELECT SUM(revenue_generated) AS total_revenue FROM campaigns WHERE actual_spent < budget AND campaign_status = 'successful';",
      "Actual": "SELECT SUM(revenue_generated) FROM campaigns WHERE actual_spent < budget AND campaign_status = 'successful';",
      "Expected_Results": [
        {
          "total_revenue": null
        }
      ],
      "Actual_Results": [
        {
          "sum": null
        }
      ]
    },
    {
      "NL": "Retrieve the product display names and the number of orders for products that have been reviewed with a rating above 4 in the past month, along with the customer's first name and last name who placed the order.",
      "Expected": "SELECT p.product_display_name, COUNT(e.order_id) AS order_count, ci.person_first_name, ci.person_last_name FROM products p JOIN events e ON p.unique_product_identifier = e.order_item_id JOIN customerinfo ci ON e.person_customer_id = ci.person_customer_id WHERE e.review_rating > 4 AND e.event_timestamp >= NOW() - INTERVAL '1 month' GROUP BY p.product_display_name, ci.person_first_name, ci.person_last_name;",
      "Actual": "SELECT p.product_display_name, COUNT(o.order_id) AS number_of_orders, ci.person_first_name, ci.person_last_name FROM product_reviews_and_ratings prr JOIN products p ON prr.referenced_product_identifier = p.unique_product_identifier JOIN orders o ON prr.reviewing_customer_identifier = o.person_customer_id JOIN customerinfo ci ON o.person_customer_id = ci.person_customer_id WHERE prr.submitted_review_star_rating > 4 AND prr.customer_review_submission_date >= NOW() - INTERVAL '1 month' GROUP BY p.product_display_name, ci.person_first_name, ci.person_last_name",
      "Expected_Results": [],
      "Actual_Results": [
        {
          "product_display_name": "iPhone 15 Pro",
          "number_of_orders": 1,
          "person_first_name": "John",
          "person_last_name": "Doe"
        }
      ]
    },
    {
      "NL": "Get the top 5 products with highest average customer review rating.",
      "Expected": "SELECT T1.product_display_name, T1.aggregate_customer_review_rating FROM products AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.unique_product_identifier = T2.referenced_product_identifier GROUP BY T1.product_display_name, T1.aggregate_customer_review_rating ORDER BY T1.aggregate_customer_review_rating DESC LIMIT 5",
      "Actual": "SELECT product_display_name FROM products WHERE unique_product_identifier IN (SELECT referenced_product_identifier FROM product_reviews_and_ratings GROUP BY referenced_product_identifier ORDER BY AVG(submitted_review_star_rating) DESC LIMIT 5)",
      "Expected_Results": [
        {
          "product_display_name": "iPhone 15 Pro",
          "aggregate_customer_review_rating": 4.8
        },
        {
          "product_display_name": "Samsung 4K Smart TV",
          "aggregate_customer_review_rating": 4.7
        }
      ],
      "Actual_Results": [
        {
          "product_display_name": "iPhone 15 Pro"
        },
        {
          "product_display_name": "Samsung 4K Smart TV"
        }
      ]
    },
    {
      "NL": "Retrieve the details of products in the wishlist along with customer's first and last name for wishlists that have a reminder set and the product is still in stock.",
      "Expected": "SELECT w.product_name, w.brand_name, w.category, w.price_at_addition, w.discount_at_addition, w.quantity, w.reminder_date, ci.person_first_name, ci.person_last_name FROM wishlist w JOIN customerinfo ci ON w.fk_user_id = ci.person_customer_id WHERE w.reminder_set = true AND w.stock_status_at_addition = true;",
      "Actual": "SELECT w.product_name, w.price_at_addition, w.discount_at_addition, w.expected_purchase_date, w.quantity, w.notes, w.reminder_date, w.last_viewed_at, w.added_from_source, w.stock_status_at_addition, w.category, w.brand_name, w.session_id, w.currency, w.added_at, ci.person_first_name, ci.person_last_name FROM wishlist w JOIN customerinfo ci ON w.fk_user_id = ci.person_customer_id WHERE w.reminder_set = true AND w.stock_status_at_addition = true",
      "Expected_Results": [
        {
          "product_name": "iPhone 15 Pro",
          "brand_name": "Apple",
          "category": "Electronics",
          "price_at_addition": 999.99,
          "discount_at_addition": 0.0,
          "quantity": 1,
          "reminder_date": "2024-01-25T00:00:00",
          "person_first_name": "John",
          "person_last_name": "Doe"
        }
      ],
      "Actual_Results": [
        {
          "product_name": "iPhone 15 Pro",
          "price_at_addition": 999.99,
          "discount_at_addition": 0.0,
          "expected_purchase_date": "2024-02-01",
          "quantity": 1,
          "notes": "Wait for sale",
          "reminder_date": "2024-01-25T00:00:00",
          "last_viewed_at": "2024-01-16T00:00:00",
          "added_from_source": "website",
          "stock_status_at_addition": true,
          "category": "Electronics",
          "brand_name": "Apple",
          "session_id": "sess_abc123",
          "currency": "USD",
          "added_at": "2025-03-08T14:44:57.292397",
          "person_first_name": "John",
          "person_last_name": "Doe"
        }
      ]
    },
    {
      "NL": "Retrieve the details of products that have been returned more than once due to 'damaged' reasons, along with the average cart value of those returns and the customer's email who initiated the returns, excluding products that are no longer active.",
      "Expected": "SELECT p.product_display_name, rr.reason, ci.person_email, AVG(e.cart_value) AS avg_cart_value FROM products p JOIN refunds_returns rr ON p.unique_product_identifier = rr.fk_product_id JOIN events e ON rr.fk_order_id = e.order_id JOIN customerinfo ci ON rr.fk_user_id = ci.person_customer_id WHERE rr.reason = 'damaged' AND p.active_product_status = true GROUP BY p.product_display_name, rr.reason, ci.person_email HAVING COUNT(rr.id) > 1;",
      "Actual": "SELECT p.*, AVG(e.cart_value) AS avg_cart_value, c.person_email FROM products p JOIN refunds_returns r ON p.unique_product_identifier = r.fk_product_id JOIN events e ON r.fk_order_id = e.order_id JOIN customerinfo c ON r.fk_user_id = c.person_customer_id WHERE r.reason = 'damaged' AND p.active_product_status = TRUE GROUP BY p.unique_product_identifier HAVING COUNT(r.id) > 1",
      "Expected_Error": null,
      "Actual_Error": "column \"c.person_email\" must appear in the GROUP BY clause or be used in an aggregate function\nLINE 1: SELECT p.*, AVG(e.cart_value) AS avg_cart_value, c.person_em...\n                                                         ^\n"
    },
    {
      "NL": "Find the total number of push notifications clicked for events happening in the last 30 days.",
      "Expected": "SELECT COUNT(*) AS total_push_notifications_clicked FROM events WHERE push_notification_clicked = true AND event_timestamp >= NOW() - INTERVAL '30 days';",
      "Actual": "SELECT SUM(push_notification_clicked) FROM events WHERE event_timestamp >= NOW() - INTERVAL '30 days';",
      "Expected_Error": null,
      "Actual_Error": "function sum(boolean) does not exist\nLINE 1: SELECT SUM(push_notification_clicked) FROM events WHERE even...\n               ^\nHINT:  No function matches the given name and argument types. You might need to add explicit type casts.\n"
    },
    {
      "NL": "What are the total amount and order status of orders made by customers who have clicked push notifications and have also completed surveys, along with the total time spent and discount applied in their corresponding events?",
      "Expected": "SELECT o.total_amount, o.order_status, SUM(e.time_spent_seconds), SUM(e.discount_applied) FROM orders o JOIN events e ON o.order_id = e.order_id WHERE e.push_notification_clicked = true AND e.survey_completed = true GROUP BY o.total_amount, o.order_status",
      "Actual": "SELECT o.total_amount, o.order_status, e.time_spent_seconds, e.discount_applied FROM orders o JOIN events e ON o.order_id = e.order_id WHERE e.push_notification_clicked = true AND e.survey_completed = true",
      "Expected_Results": [
        {
          "total_amount": 2499.99,
          "order_status": "Processing",
          "sum": null
        }
      ],
      "Actual_Results": [
        {
          "total_amount": 2499.99,
          "order_status": "Processing",
          "time_spent_seconds": 180,
          "discount_applied": null
        }
      ]
    },
    {
      "NL": "List all orders that have a payment status of paid and were shipped via a carrier other than UPS",
      "Expected": "SELECT T1.order_id, T1.payment_status, T2.carrier FROM orders AS T1 INNER JOIN shipping AS T2 ON T1.order_id = T2.fk_order_id WHERE T1.payment_status = 'paid' AND T2.carrier != 'UPS'",
      "Actual": "SELECT * FROM orders WHERE payment_status = 'paid' AND fk_order_id NOT IN (SELECT fk_order_id FROM shipping WHERE carrier = 'UPS')",
      "Expected_Error": null,
      "Actual_Error": "column \"fk_order_id\" does not exist\nLINE 1: ...T * FROM orders WHERE payment_status = 'paid' AND fk_order_i...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"orders.order_id\".\n"
    },
    {
      "NL": "Find the loyalty membership unique identifiers for customers who made more than $1000 in transactions and received a special discount on their birthday.",
      "Expected": "SELECT DISTINCT T1.loyalty_membership_unique_identifier FROM customers_loyalty_program AS T1 JOIN transactions_and_payments AS T2 ON T1.associated_customer_reference_id = T2.corresponding_customer_reference_identifier WHERE T2.total_transaction_amount > 1000 AND T1.customer_birthday_special_discount = TRUE;",
      "Actual": "SELECT DISTINCT clp.loyalty_membership_unique_identifier FROM customers_loyalty_program clp JOIN transactions_and_payments tp ON clp.associated_customer_reference_id = tp.corresponding_customer_reference_identifier JOIN customerinfo ci ON clp.associated_customer_reference_id = ci.person_customer_id WHERE tp.final_billed_amount > 1000 AND tp.transaction_date_and_time::date = ci.person_date_of_birth AND clp.customer_birthday_special_discount = true",
      "Expected_Results": [
        {
          "loyalty_membership_unique_identifier": 1
        }
      ],
      "Actual_Results": []
    },
    {
      "NL": "What is the average total amount of orders for each city, along with the corresponding number of orders and customers in that city?",
      "Expected": "SELECT T1.shipping_address_city, AVG(T1.total_amount), COUNT(T1.order_id), COUNT(DISTINCT T1.person_customer_id) FROM orders AS T1 INNER JOIN customerinfo AS T2 ON T1.person_customer_id = T2.person_customer_id GROUP BY T1.shipping_address_city",
      "Actual": "SELECT shipping_address_city, AVG(total_amount) AS average_total_amount, COUNT(order_id) AS number_of_orders, COUNT(DISTINCT person_customer_id) AS number_of_customers FROM orders GROUP BY shipping_address_city",
      "Expected_Results": [
        {
          "shipping_address_city": "Chicago",
          "avg": 2499.99,
          "count": 1
        },
        {
          "shipping_address_city": "Los Angeles",
          "avg": 799.99,
          "count": 1
        },
        {
          "shipping_address_city": "New York",
          "avg": 1299.99,
          "count": 1
        }
      ],
      "Actual_Results": [
        {
          "shipping_address_city": "Chicago",
          "average_total_amount": 2499.99,
          "number_of_orders": 1,
          "number_of_customers": 1
        },
        {
          "shipping_address_city": "Los Angeles",
          "average_total_amount": 799.99,
          "number_of_orders": 1,
          "number_of_customers": 1
        },
        {
          "shipping_address_city": "New York",
          "average_total_amount": 1299.99,
          "number_of_orders": 1,
          "number_of_customers": 1
        }
      ]
    },
    {
      "NL": "What are the product names and prices of the items in the cart for a specific user?",
      "Expected": "SELECT p.product_display_name, c.price_per_unit FROM cart c JOIN products p ON c.fk_product_id = p.unique_product_identifier WHERE c.fk_user_id = 1;",
      "Actual": "SELECT product_name, price_per_unit FROM cart WHERE fk_user_id = <user_id>;",
      "Expected_Error": null,
      "Actual_Error": "syntax error at or near \"<\"\nLINE 1: ...name, price_per_unit FROM cart WHERE fk_user_id = <user_id>;\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of transactions made by customers who have an active subscription, have a premium account, and have made a purchase in the last 30 days, and also find the average loyalty points earned by these customers, and the total average amount spent per order by these customers, and the average review score given by these customers for their transactions.",
      "Expected": "SELECT COUNT(DISTINCT t1.transaction_unique_identifier), AVG(t2.person_loyalty_points), AVG(t2.preferences_avg_spent_per_order), AVG(t1.transaction_review_score) FROM transactions_and_payments AS t1 INNER JOIN customerinfo AS t2 ON t1.corresponding_customer_reference_identifier = t2.person_customer_id WHERE t2.account_has_active_subscription = TRUE AND t2.person_is_premium = TRUE AND t1.transaction_date_and_time > NOW() - INTERVAL '30 days'",
      "Actual": "SELECT COUNT(DISTINCT t.transaction_unique_identifier) AS total_transactions, AVG(lp.accumulated_loyalty_points_balance) AS avg_loyalty_points, AVG(o.total_amount) AS avg_amount_spent_per_order, AVG(pr.submitted_review_star_rating) AS avg_review_score FROM transactions_and_payments t JOIN customerinfo c ON t.corresponding_customer_reference_identifier = c.person_customer_id JOIN orders o ON t.linked_order_reference_identifier = o.order_id LEFT JOIN product_reviews_and_ratings pr ON o.order_id = pr.reviewing_customer_identifier AND c.person_customer_id = pr.reviewing_customer_identifier JOIN customers_loyalty_program lp ON c.person_customer_id = lp.associated_customer_reference_id WHERE c.account_has_active_subscription = TRUE AND c.person_is_premium = TRUE AND o.order_date >= CURRENT_DATE - INTERVAL '30 days'",
      "Expected_Results": [
        {
          "count": 1,
          "avg": 5.0
        }
      ],
      "Actual_Results": [
        {
          "total_transactions": 0,
          "avg_loyalty_points": null,
          "avg_amount_spent_per_order": null,
          "avg_review_score": null
        }
      ]
    },
    {
      "NL": "Find the number of suppliers for each country of operation, sorted in descending order.",
      "Expected": "SELECT supplier_country_of_operation, COUNT(supplier_unique_identifier) FROM suppliers GROUP BY supplier_country_of_operation ORDER BY COUNT(supplier_unique_identifier) DESC;",
      "Actual": "SELECT supplier_country_of_operation, COUNT(*) AS number_of_suppliers FROM suppliers GROUP BY supplier_country_of_operation ORDER BY number_of_suppliers DESC",
      "Expected_Results": [
        {
          "supplier_country_of_operation": "China",
          "count": 1
        },
        {
          "supplier_country_of_operation": "USA",
          "count": 1
        },
        {
          "supplier_country_of_operation": "UK",
          "count": 1
        },
        {
          "supplier_country_of_operation": "Germany",
          "count": 1
        },
        {
          "supplier_country_of_operation": "South Korea",
          "count": 1
        }
      ],
      "Actual_Results": [
        {
          "supplier_country_of_operation": "China",
          "number_of_suppliers": 1
        },
        {
          "supplier_country_of_operation": "USA",
          "number_of_suppliers": 1
        },
        {
          "supplier_country_of_operation": "UK",
          "number_of_suppliers": 1
        },
        {
          "supplier_country_of_operation": "Germany",
          "number_of_suppliers": 1
        },
        {
          "supplier_country_of_operation": "South Korea",
          "number_of_suppliers": 1
        }
      ]
    },
    {
      "NL": "List all the customers who have two-factor authentication enabled and their loyalty points",
      "Expected": "SELECT person_customer_id, person_loyalty_points FROM customerinfo WHERE securitytwo_factor_enabled = TRUE",
      "Actual": "SELECT person_first_name, person_last_name, person_loyalty_points FROM customerinfo WHERE securitytwo_factor_enabled = true",
      "Expected_Results": [
        {
          "person_customer_id": 1,
          "person_loyalty_points": 500
        },
        {
          "person_customer_id": 3,
          "person_loyalty_points": 750
        },
        {
          "person_customer_id": 5,
          "person_loyalty_points": 1000
        }
      ],
      "Actual_Results": [
        {
          "person_first_name": "John",
          "person_last_name": "Doe",
          "person_loyalty_points": 500
        },
        {
          "person_first_name": "Michael",
          "person_last_name": "Johnson",
          "person_loyalty_points": 750
        },
        {
          "person_first_name": "David",
          "person_last_name": "Brown",
          "person_loyalty_points": 1000
        }
      ]
    },
    {
      "NL": "What is the average total transaction amount for orders with a total amount greater than $1000, and what is the average number of loyalty points earned for these transactions, considering only customers who have participated in the exclusive beta testing program and have a loyalty membership unique identifier greater than 5000, and have made a payment using the same billing and shipping address, and have not had any chargeback requests, and their transaction status is 'completed', and the transaction date and time is within the last 6 months?",
      "Expected": "SELECT AVG(T.total_transaction_amount), AVG(T.associated_loyalty_points_earned) FROM transactions_and_payments T INNER JOIN orders O ON T.linked_order_reference_identifier = O.order_id INNER JOIN customers_loyalty_program C ON T.corresponding_customer_reference_identifier = C.associated_customer_reference_id WHERE O.total_amount > 1000 AND C.participation_in_exclusive_beta_testing = TRUE AND C.loyalty_membership_unique_identifier > 5000 AND T.billing_address_street = T.shipping_address_street AND T.billing_address_city = T.shipping_address_city AND T.billing_address_state = T.shipping_address_state AND T.billing_address_country = T.shipping_address_country AND T.billing_address_zip_code = T.shipping_address_zip_code AND T.chargeback_request_status = FALSE AND T.transaction_status = 'completed' AND T.transaction_date_and_time > NOW() - INTERVAL '6 month'",
      "Actual": "SELECT AVG(t.total_transaction_amount) AS avg_transaction_amount, AVG(lp.accumulated_loyalty_points_balance) AS avg_loyalty_points FROM transactions_and_payments t JOIN customers_loyalty_program lp ON t.corresponding_customer_reference_identifier = lp.associated_customer_reference_id WHERE t.total_amount > 1000 AND lp.participation_in_exclusive_beta_testing = true AND lp.loyalty_membership_unique_identifier > 5000 AND t.billing_address_street = t.shipping_address_street AND t.billing_address_city = t.shipping_address_city AND t.billing_address_state = t.shipping_address_state AND t.billing_address_country = t.shipping_address_country AND t.chargeback_request_status = false AND t.transaction_status = 'completed' AND t.transaction_date_and_time >= NOW() - INTERVAL '6 months'",
      "Expected_Error": null,
      "Actual_Error": "column t.total_amount does not exist\nLINE 1: ...ifier = lp.associated_customer_reference_id WHERE t.total_am...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the average time spent on the site by customers who clicked on a promotion email and placed an order.",
      "Expected": "SELECT AVG(e.time_spent_seconds) AS avg_time_spent FROM events e JOIN orders o ON e.order_id = o.order_id WHERE e.email_opened = TRUE AND e.event_type = 'promotion_click';",
      "Actual": "SELECT AVG(time_spent_seconds) FROM events WHERE event_type = 'email_click' AND utm_campaign LIKE '%promotion%' AND person_customer_id IN (SELECT person_customer_id FROM orders)",
      "Expected_Results": [
        {
          "avg_time_spent": null
        }
      ],
      "Actual_Results": [
        {
          "avg": null
        }
      ]
    },
    {
      "NL": "List the number of customers grouped by their marital status and average income.",
      "Expected": "SELECT person_marital_status, AVG(person_income) FROM customerinfo GROUP BY person_marital_status",
      "Actual": "SELECT person_marital_status, COUNT(*) AS number_of_customers, AVG(person_income) AS average_income FROM customerinfo GROUP BY person_marital_status",
      "Expected_Results": [
        {
          "person_marital_status": "Divorced",
          "avg": 95000.0
        },
        {
          "person_marital_status": "Married",
          "avg": 90000.0
        },
        {
          "person_marital_status": "Single",
          "avg": 70000.0
        }
      ],
      "Actual_Results": [
        {
          "person_marital_status": "Divorced",
          "number_of_customers": 1,
          "average_income": 95000.0
        },
        {
          "person_marital_status": "Married",
          "number_of_customers": 2,
          "average_income": 90000.0
        },
        {
          "person_marital_status": "Single",
          "number_of_customers": 2,
          "average_income": 70000.0
        }
      ]
    },
    {
      "NL": "Find the total loyalty points earned by customers who have made transactions in the last month and have an anniversary reward voucher status of true",
      "Expected": "SELECT SUM(T1.accumulated_loyalty_points_balance) FROM customers_loyalty_program AS T1 JOIN transactions_and_payments AS T2 ON T1.associated_customer_reference_id = T2.corresponding_customer_reference_identifier WHERE T2.transaction_date_and_time > NOW() - INTERVAL '1 month' AND T1.anniversary_reward_voucher_status = TRUE",
      "Actual": "SELECT SUM(accumulated_loyalty_points_balance) FROM customers_loyalty_program WHERE corresponding_customer_reference_id IN (SELECT person_customer_id FROM transactions_and_payments WHERE transaction_date_and_time >= NOW() - INTERVAL '1 month') AND anniversary_reward_voucher_status = true",
      "Expected_Error": null,
      "Actual_Error": "column \"person_customer_id\" does not exist\nLINE 1: ...RE corresponding_customer_reference_id IN (SELECT person_cus...\n                                                             ^\n"
    },
    {
      "NL": "Find the total shipping costs and the estimated delivery dates for orders that were part of successful campaigns (ROI > 100%) and had at least one item that was part of a refund request. Include the campaign name, shipping carrier, and the total price of items in the order.",
      "Expected": "SELECT SUM(sh.shipping_cost) AS total_shipping_costs, sh.estimated_delivery, c.campaign_name, sh.carrier, SUM(oi.total_price) AS total_order_price FROM shipping sh JOIN order_items oi ON sh.fk_order_id = oi.order_id JOIN campaigns c ON oi.order_id = c.campaign_id JOIN refunds_returns rr ON oi.order_id = rr.fk_order_id WHERE c.roi > 100 AND rr.id IS NOT NULL GROUP BY sh.estimated_delivery, c.campaign_name, sh.carrier",
      "Actual": "SELECT c.campaign_name, s.shipping_carrier, SUM(oi.total_price) AS total_order_price, s.estimated_delivery, SUM(s.shipping_cost) AS total_shipping_costs FROM campaigns c JOIN orders o ON c.campaign_id = o.campaign_id JOIN order_items oi ON o.order_id = oi.order_id JOIN shipping s ON o.order_id = s.fk_order_id JOIN refunds_returns rr ON o.order_id = rr.fk_order_id WHERE c.roi > 100 GROUP BY c.campaign_name, s.shipping_carrier, s.estimated_delivery",
      "Expected_Error": null,
      "Actual_Error": "column s.shipping_carrier does not exist\nLINE 1: SELECT c.campaign_name, s.shipping_carrier, SUM(oi.total_pri...\n                                ^\nHINT:  Perhaps you meant to reference the column \"rr.shipping_carrier\".\n"
    },
    {
      "NL": "Find the average shipping fee for orders that were created from carts where the estimated delivery date is before June 1, 2023, and the cart status is 'completed'.",
      "Expected": "SELECT AVG(o.shipping_fee) FROM orders o JOIN cart c ON o.created_at = c.added_at WHERE c.estimated_delivery_date < '2023-06-01' AND c.cart_status = 'completed'",
      "Actual": "SELECT AVG(t.shipping_fee) FROM transactions_and_payments t JOIN orders o ON t.linked_order_reference_identifier = o.order_id JOIN cart c ON o.order_id = c.session_id WHERE c.estimated_delivery_date < '2023-06-01' AND c.cart_status = 'completed'",
      "Expected_Error": null,
      "Actual_Error": "operator does not exist: integer = character varying\nLINE 1: ...identifier = o.order_id JOIN cart c ON o.order_id = c.sessio...\n                                                             ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n"
    },
    {
      "NL": "Retrieve the first name, last name, and total amount spent by each premium customer in transactions, along with the number of transactions they made.",
      "Expected": "SELECT ci.person_first_name, ci.person_last_name, SUM(tp.total_transaction_amount) AS total_spent, COUNT(tp.transaction_unique_identifier) AS total_transactions FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier WHERE ci.person_is_premium = TRUE GROUP BY ci.person_first_name, ci.person_last_name",
      "Actual": "SELECT ci.person_first_name, ci.person_last_name, SUM(tp.final_billed_amount) AS total_amount_spent, COUNT(tp.transaction_unique_identifier) AS number_of_transactions FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier WHERE ci.person_is_premium = TRUE GROUP BY ci.person_customer_id, ci.person_first_name, ci.person_last_name",
      "Expected_Results": [
        {
          "person_first_name": "John",
          "person_last_name": "Doe",
          "total_spent": 1299.99,
          "total_transactions": 1
        }
      ],
      "Actual_Results": [
        {
          "person_first_name": "John",
          "person_last_name": "Doe",
          "total_amount_spent": 1249.99,
          "number_of_transactions": 1
        }
      ]
    },
    {
      "NL": "Retrieve the total transaction amounts and referral bonus points earned for customers who participated in the exclusive beta testing and have personalized product recommendations.",
      "Expected": "SELECT T2.total_transaction_amount, T1.referral_bonus_points_earned FROM customers_loyalty_program AS T1 JOIN transactions_and_payments AS T2 ON T1.associated_customer_reference_id = T2.corresponding_customer_reference_identifier WHERE T1.participation_in_exclusive_beta_testing = TRUE AND T1.personalized_product_recommendations IS NOT NULL;",
      "Actual": "SELECT SUM(t.total_transaction_amount), c.referral_bonus_points_earned FROM transactions_and_payments t JOIN customers_loyalty_program c ON t.corresponding_customer_reference_identifier = c.associated_customer_reference_id WHERE c.participation_in_exclusive_beta_testing = true AND c.personalized_product_recommendations IS NOT NULL",
      "Expected_Error": null,
      "Actual_Error": "column \"c.referral_bonus_points_earned\" must appear in the GROUP BY clause or be used in an aggregate function\nLINE 1: SELECT SUM(t.total_transaction_amount), c.referral_bonus_poi...\n                                                ^\n"
    },
    {
      "NL": "Retrieve the number of unique customers who added items to their wishlist from a mobile device and have at least one item with a reminder set.",
      "Expected": "SELECT COUNT(DISTINCT w.fk_user_id) AS unique_customers FROM wishlist w JOIN events e ON w.session_id = e.session_id WHERE e.device_platform LIKE '%Mobile%' AND w.reminder_set = TRUE;",
      "Actual": "SELECT COUNT(DISTINCT fk_user_id) FROM wishlist WHERE device_platform = 'mobile' AND reminder_set = true",
      "Expected_Error": null,
      "Actual_Error": "column \"device_platform\" does not exist\nLINE 1: ...CT COUNT(DISTINCT fk_user_id) FROM wishlist WHERE device_pla...\n                                                             ^\n"
    },
    {
      "NL": "What is the total amount and tax amount for all orders?",
      "Expected": "SELECT SUM(total_amount) AS total_amount, SUM(tax_amount) AS tax_amount FROM orders",
      "Actual": "SELECT SUM(total_amount) AS total_amount, SUM(tax_amount) AS total_tax_amount FROM orders;",
      "Expected_Results": [
        {
          "total_amount": 4599.97,
          "tax_amount": 368.0
        }
      ],
      "Actual_Results": [
        {
          "total_amount": 4599.97,
          "total_tax_amount": 368.0
        }
      ]
    },
    {
      "NL": "List the event types and their timestamps for customers who have a loyalty points balance greater than 500, and find out the event types that occurred on weekends.",
      "Expected": "SELECT e.event_type, e.event_timestamp FROM events e INNER JOIN customerinfo c ON e.person_customer_id = c.person_customer_id WHERE c.person_loyalty_points > 500 AND EXTRACT(DOW FROM e.event_timestamp) IN (0, 6);",
      "Actual": "SELECT e.event_type, e.event_timestamp FROM events e JOIN customers_loyalty_program clp ON e.person_customer_id = clp.associated_customer_reference_id WHERE clp.accumulated_loyalty_points_balance > 500 AND EXTRACT(DOW FROM e.event_timestamp) IN (0, 6)",
      "Expected_Results": [
        {
          "event_type": "Review",
          "event_timestamp": "2025-03-08T14:44:57.228183"
        }
      ],
      "Actual_Results": [
        {
          "event_type": "Purchase",
          "event_timestamp": "2025-03-08T14:44:57.228183"
        },
        {
          "event_type": "Cart Add",
          "event_timestamp": "2025-03-08T14:44:57.228183"
        }
      ]
    },
    {
      "NL": "Find all customer information with their review ratings and the associated review image URLs for customers who have submitted a review with a rating of 5 stars and number of helpful votes received is greater than 10.",
      "Expected": "SELECT T2.person_customer_id, T2.review_rating, T1.associated_review_image_urls FROM product_reviews_and_ratings AS T1 INNER JOIN events AS T2 ON T1.referenced_product_identifier = T2.order_id WHERE T1.submitted_review_star_rating = 5 AND T1.number_of_helpful_votes_received > 10",
      "Actual": "SELECT ci.*, prar.submitted_review_star_rating, prar.associated_review_image_urls FROM customerinfo ci JOIN product_reviews_and_ratings prar ON ci.person_customer_id = prar.reviewing_customer_identifier WHERE prar.submitted_review_star_rating = 5 AND prar.number_of_helpful_votes_received > 10",
      "Expected_Results": [
        {
          "person_customer_id": 1,
          "review_rating": null,
          "associated_review_image_urls": "https://example.com/img1,https://example.com/img2"
        }
      ],
      "Actual_Results": [
        {
          "person_customer_id": 1,
          "person_first_name": "John",
          "person_last_name": "Doe",
          "person_email": "john.doe@email.com",
          "person_phone_number": "123-456-7890",
          "person_date_of_birth": "1990-01-15",
          "person_gender": "M",
          "person_registration_date": "2023-01-01T00:00:00",
          "person_last_login": "2024-01-15T00:00:00",
          "person_is_premium": true,
          "person_loyalty_points": 500,
          "person_preferred_language": "English",
          "person_occupation": "Engineer",
          "person_income": 75000.0,
          "person_marital_status": "Single",
          "address_street": "123 Main St",
          "address_city": "New York",
          "address_state": "NY",
          "address_country": "USA",
          "address_postalcode": "10001",
          "account_account_balance": 1500.5,
          "account_preferred_payment_method": "Credit Card",
          "account_card_last_four": "4321",
          "account_card_expiry": "2025-12-31",
          "account_has_active_subscription": true,
          "preferences_favorite_category": "Electronics",
          "preferences_avg_spent_per_order": 450.0,
          "preferences_total_orders": 12,
          "preferences_last_order_date": "2024-01-10T00:00:00",
          "preferences_wishlist_items": 5,
          "preferences_newsletter_subscription": true,
          "preferences_referral_code": "REF123",
          "securitypassword_hash": "hash123",
          "security_question": "First pet name?",
          "security_answer_hash": "pethash123",
          "securitytwo_factor_enabled": true,
          "securitysms_notifications": true,
          "securityemail_notifications": true,
          "security_account_status": "Active",
          "submitted_review_star_rating": 5.0,
          "associated_review_image_urls": "https://example.com/img1,https://example.com/img2"
        }
      ]
    },
    {
      "NL": "Find the total revenue generated by all campaigns with a budget greater than $1000, along with the total number of clicks and impressions for each campaign, and also include the number of customers who made a purchase after clicking on an ad, and the total amount they spent, grouped by campaign name",
      "Expected": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, SUM(c.clicks) AS total_clicks, SUM(c.impressions) AS total_impressions, COUNT(DISTINCT e.person_customer_id) AS total_customers, SUM(e.cart_value) AS total_spent FROM campaigns c JOIN events e ON c.campaign_id = (SELECT campaign_id FROM events WHERE event_type = 'click' AND person_customer_id = e.person_customer_id) WHERE c.budget > 1000 AND e.event_type = 'purchase' GROUP BY c.campaign_name",
      "Actual": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, SUM(c.clicks) AS total_clicks, SUM(c.impressions) AS total_impressions, COUNT(DISTINCT o.person_customer_id) AS number_of_customers, SUM(o.total_amount) AS total_spent_by_customers FROM campaigns c LEFT JOIN orders o ON c.campaign_id = o.campaign_id WHERE c.budget > 1000 GROUP BY c.campaign_name",
      "Expected_Results": [],
      "Actual_Results": [
        {
          "campaign_name": "Black Friday 2024",
          "total_revenue": 250000.0,
          "total_clicks": 50000,
          "total_impressions": 500000,
          "number_of_customers": 0,
          "total_spent_by_customers": null
        },
        {
          "campaign_name": "New Customer Welcome",
          "total_revenue": 90000.0,
          "total_clicks": 12000,
          "total_impressions": 120000,
          "number_of_customers": 1,
          "total_spent_by_customers": 799.99
        },
        {
          "campaign_name": "Summer Sale 2024",
          "total_revenue": 250000.0,
          "total_clicks": 50000,
          "total_impressions": 500000,
          "number_of_customers": 2,
          "total_spent_by_customers": 3799.98
        }
      ]
    },
    {
      "NL": "What are the product names and average review ratings of all products that have more than 100 reviews?",
      "Expected": "SELECT product_display_name, aggregate_customer_review_rating FROM products WHERE total_number_of_verified_reviews > 100",
      "Actual": "SELECT p.product_display_name, AVG(r.submitted_review_star_rating) AS average_review_rating FROM products p JOIN product_reviews_and_ratings r ON p.unique_product_identifier = r.referenced_product_identifier GROUP BY p.product_display_name HAVING COUNT(r.review_unique_identifier) > 100",
      "Expected_Results": [
        {
          "product_display_name": "iPhone 15 Pro",
          "aggregate_customer_review_rating": 4.8
        },
        {
          "product_display_name": "Samsung 4K Smart TV",
          "aggregate_customer_review_rating": 4.7
        }
      ],
      "Actual_Results": []
    },
    {
      "NL": "Calculate the total refund amount for each product that was part of a campaign and identify the campaign name and type for each product.",
      "Expected": "SELECT r.fk_product_id, c.campaign_name, c.campaign_type, SUM(r.refund_amount) AS total_refund_amount FROM refunds_returns r JOIN campaigns c ON r.request_date BETWEEN c.start_date AND c.end_date GROUP BY r.fk_product_id, c.campaign_name, c.campaign_type;",
      "Actual": "SELECT p.product_name, c.campaign_name, c.campaign_type, SUM(r.refund_amount) AS total_refund_amount FROM refunds_returns r JOIN orders o ON r.fk_order_id = o.order_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.unique_product_identifier JOIN campaigns c ON o.campaign_id = c.campaign_id GROUP BY p.product_name, c.campaign_name, c.campaign_type",
      "Expected_Error": null,
      "Actual_Error": "column p.product_name does not exist\nLINE 1: SELECT p.product_name, c.campaign_name, c.campaign_type, SUM...\n               ^\nHINT:  Perhaps you meant to reference the column \"oi.product_name\".\n"
    },
    {
      "NL": "What is the average star rating given by customers who have made more than 5 previous purchases?",
      "Expected": "SELECT AVG(submitted_review_star_rating) FROM product_reviews_and_ratings WHERE previous_product_purchases_count > 5",
      "Actual": "SELECT AVG(pr.submitted_review_star_rating) FROM product_reviews_and_ratings pr JOIN customers_loyalty_program clp ON pr.reviewing_customer_identifier = clp.associated_customer_reference_id WHERE clp.lifetime_loyalty_points_earned > 5",
      "Expected_Results": [
        {
          "avg": null
        }
      ],
      "Actual_Results": [
        {
          "avg": 4.5
        }
      ]
    },
    {
      "NL": "Find the official supplier business name, registered business address, and primary contact person name for each supplier who has supplied products to a customer who has placed an order, returned or requested a refund on a product that was added to their wishlist during the last 6 months, and also find the campaign name for each campaign that has a budget greater than the average spent for each campaign, the campaign start date, and the campaign end date.",
      "Expected": "SELECT T4.official_supplier_business_name, T4.registered_business_address, T4.primary_contact_person_name, T7.campaign_name, T7.start_date, T7.end_date FROM wishlist AS T1 INNER JOIN cart AS T2 ON T1.fk_user_id = T2.fk_user_id INNER JOIN refunds_returns AS T3 ON T2.id = T3.fk_order_id INNER JOIN suppliers AS T4 ON T4.supplier_unique_identifier = T3.fk_product_id INNER JOIN campaigns AS T7 ON T7.total_reach > ( SELECT AVG(T6.actual_spent) FROM campaigns AS T6 ) WHERE T1.added_at > NOW() - INTERVAL '6 month'",
      "Actual": "SELECT s.official_supplier_business_name, s.registered_business_address, s.primary_contact_person_name, c.campaign_name, c.start_date, c.end_date FROM suppliers s JOIN products p ON s.supplier_unique_identifier = p.associated_supplier_reference_id JOIN order_items oi ON p.unique_product_identifier = oi.product_id JOIN orders o ON oi.order_id = o.order_id JOIN refunds_returns rr ON oi.product_id = rr.fk_product_id JOIN wishlist w ON p.unique_product_identifier = w.fk_product_id JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE w.added_at >= NOW() - INTERVAL '6 months' AND c.budget > (SELECT AVG(actual_spent) FROM campaigns)",
      "Expected_Results": [
        {
          "official_supplier_business_name": "Tech Supplies Inc",
          "registered_business_address": "789 Business Ave, Suite 100, San Jose, CA 95110",
          "primary_contact_person_name": "Robert Wilson",
          "campaign_name": "Summer Sale 2024",
          "start_date": "2024-06-01T00:00:00",
          "end_date": "2024-06-30T00:00:00"
        },
        {
          "official_supplier_business_name": "Global Electronics",
          "registered_business_address": "456 Industry Rd, Shenzhen",
          "primary_contact_person_name": "Sarah Chen",
          "campaign_name": "Summer Sale 2024",
          "start_date": "2024-06-01T00:00:00",
          "end_date": "2024-06-30T00:00:00"
        },
        {
          "official_supplier_business_name": "Tech Supplies Inc",
          "registered_business_address": "789 Business Ave, Suite 100, San Jose, CA 95110",
          "primary_contact_person_name": "Robert Wilson",
          "campaign_name": "New Customer Welcome",
          "start_date": "2024-01-01T00:00:00",
          "end_date": "2024-12-31T00:00:00"
        },
        {
          "official_supplier_business_name": "Global Electronics",
          "registered_business_address": "456 Industry Rd, Shenzhen",
          "primary_contact_person_name": "Sarah Chen",
          "campaign_name": "New Customer Welcome",
          "start_date": "2024-01-01T00:00:00",
          "end_date": "2024-12-31T00:00:00"
        },
        {
          "official_supplier_business_name": "Tech Supplies Inc",
          "registered_business_address": "789 Business Ave, Suite 100, San Jose, CA 95110",
          "primary_contact_person_name": "Robert Wilson",
          "campaign_name": "Black Friday 2024",
          "start_date": "2024-11-29T00:00:00",
          "end_date": "2024-11-30T00:00:00"
        },
        {
          "official_supplier_business_name": "Global Electronics",
          "registered_business_address": "456 Industry Rd, Shenzhen",
          "primary_contact_person_name": "Sarah Chen",
          "campaign_name": "Black Friday 2024",
          "start_date": "2024-11-29T00:00:00",
          "end_date": "2024-11-30T00:00:00"
        }
      ],
      "Actual_Results": [
        {
          "official_supplier_business_name": "Tech Supplies Inc",
          "registered_business_address": "789 Business Ave, Suite 100, San Jose, CA 95110",
          "primary_contact_person_name": "Robert Wilson",
          "campaign_name": "Summer Sale 2024",
          "start_date": "2024-06-01T00:00:00",
          "end_date": "2024-06-30T00:00:00"
        },
        {
          "official_supplier_business_name": "Tech Supplies Inc",
          "registered_business_address": "789 Business Ave, Suite 100, San Jose, CA 95110",
          "primary_contact_person_name": "Robert Wilson",
          "campaign_name": "Summer Sale 2024",
          "start_date": "2024-06-01T00:00:00",
          "end_date": "2024-06-30T00:00:00"
        },
        {
          "official_supplier_business_name": "Global Electronics",
          "registered_business_address": "456 Industry Rd, Shenzhen",
          "primary_contact_person_name": "Sarah Chen",
          "campaign_name": "New Customer Welcome",
          "start_date": "2024-01-01T00:00:00",
          "end_date": "2024-12-31T00:00:00"
        }
      ]
    },
    {
      "NL": "Identify the top 10 suppliers with the highest average supplier rating, and list the total number of products they have supplied, the total quantity of their products in the inventory, and the average purchase price of their products. Also, find the average rating of the reviews for their products and the total number of reviews for their products. Filter the results to only include suppliers who have supplied products with a shelf life of more than 30 days.",
      "Expected": "SELECT s.supplier_unique_identifier, AVG(s.average_supplier_rating) AS average_rating, SUM(i.quantity) AS total_quantity, AVG(i.purchase_price) AS average_purchase_price, AVG(pr.submitted_review_star_rating) AS average_review_rating, COUNT(pr.review_unique_identifier) AS total_reviews FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id JOIN product_reviews_and_ratings pr ON i.referenced_product_id = pr.referenced_product_identifier WHERE i.shelf_life > 30 GROUP BY s.supplier_unique_identifier ORDER BY AVG(s.average_supplier_rating) DESC LIMIT 10",
      "Actual": "SELECT s.supplier_unique_identifier, s.official_supplier_business_name, s.average_supplier_rating, s.total_number_of_products_supplied, SUM(i.quantity) AS total_quantity_in_inventory, AVG(i.purchase_price) AS average_purchase_price, AVG(pr.submitted_review_star_rating) AS average_review_rating, COUNT(pr.review_unique_identifier) AS total_reviews FROM suppliers s JOIN inventory i ON s.supplier_unique_identifier = i.supplier_id JOIN products p ON i.referenced_product_id = p.unique_product_identifier LEFT JOIN product_reviews_and_ratings pr ON p.unique_product_identifier = pr.referenced_product_identifier WHERE i.shelf_life > 30 GROUP BY s.supplier_unique_identifier, s.official_supplier_business_name, s.average_supplier_rating, s.total_number_of_products_supplied ORDER BY s.average_supplier_rating DESC LIMIT 10;",
      "Expected_Results": [
        {
          "supplier_unique_identifier": 1,
          "average_rating": 4.8,
          "total_quantity": 500,
          "average_purchase_price": 800.0,
          "average_review_rating": 5.0,
          "total_reviews": 1
        },
        {
          "supplier_unique_identifier": 2,
          "average_rating": 4.5,
          "total_quantity": 200,
          "average_purchase_price": 1200.0,
          "average_review_rating": 4.0,
          "total_reviews": 1
        }
      ],
      "Actual_Results": [
        {
          "supplier_unique_identifier": 1,
          "official_supplier_business_name": "Tech Supplies Inc",
          "average_supplier_rating": 4.8,
          "total_number_of_products_supplied": 150,
          "total_quantity_in_inventory": 500,
          "average_purchase_price": 800.0,
          "average_review_rating": 5.0,
          "total_reviews": 1
        },
        {
          "supplier_unique_identifier": 2,
          "official_supplier_business_name": "Global Electronics",
          "average_supplier_rating": 4.5,
          "total_number_of_products_supplied": 300,
          "total_quantity_in_inventory": 200,
          "average_purchase_price": 1200.0,
          "average_review_rating": 4.0,
          "total_reviews": 1
        }
      ]
    },
    {
      "NL": "Find all customers who have shopped at least once, have a loyalty membership, and have provided feedback with an engagement score greater than 0.5. Also, list the average rating of the products they have reviewed, the total loyalty points they have accumulated, and the number of times they have edited their reviews. Filter the results to only include customers who are eligible for special promotions and have a loyalty tier level of 'Gold' or higher.",
      "Expected": "SELECT c.associated_customer_reference_id, AVG(pr.submitted_review_star_rating) AS average_rating, SUM(c.accumulated_loyalty_points_balance) AS total_loyalty_points, SUM(pr.total_number_of_edits_made) AS total_edits FROM customers_loyalty_program c JOIN product_reviews_and_ratings pr ON c.associated_customer_reference_id = pr.reviewing_customer_identifier WHERE c.eligible_for_special_promotions = TRUE AND c.loyalty_program_tier_level IN ('Gold', 'Platinum') AND c.customer_feedback_engagement_score > 0.5 AND pr.user_has_edited_review = TRUE GROUP BY c.associated_customer_reference_id",
      "Actual": "SELECT ci.person_first_name, ci.person_last_name, AVG(prar.submitted_review_star_rating) AS avg_review_rating, clp.accumulated_loyalty_points_balance, SUM(prar.total_number_of_edits_made) AS total_review_edits FROM customerinfo ci JOIN orders o ON ci.person_customer_id = o.person_customer_id JOIN customers_loyalty_program clp ON ci.person_customer_id = clp.associated_customer_reference_id JOIN product_reviews_and_ratings prar ON ci.person_customer_id = prar.reviewing_customer_identifier WHERE clp.eligible_for_special_promotions = TRUE AND clp.loyalty_program_tier_level IN ('Gold', 'Platinum', 'Diamond') GROUP BY ci.person_customer_id HAVING COUNT(o.order_id) >= 1 AND ci.person_loyalty_points > 0 AND clp.customer_feedback_engagement_score > 0.5",
      "Expected_Error": null,
      "Actual_Error": "column \"clp.accumulated_loyalty_points_balance\" must appear in the GROUP BY clause or be used in an aggregate function\nLINE 1: ...bmitted_review_star_rating) AS avg_review_rating, clp.accumu...\n                                                             ^\n"
    },
    {
      "NL": "Get the total number of products supplied, average supplier rating, primary contact person name, and primary contact email address for each supplier who has not supplied any products to a customer who has placed an order and also has not supplied any products to a customer who has returned or requested a refund on a product that was added to their wishlist during the last 6 months, and also find the campaign name for each campaign that has a budget greater than the average spent for each campaign, the campaign start date, and the campaign end date.",
      "Expected": "SELECT T2.total_number_of_products_supplied, T2.average_supplier_rating, T2.primary_contact_person_name, T2.primary_contact_email_address, T6.campaign_name, T6.start_date, T6.end_date FROM cart AS T1 INNER JOIN suppliers AS T2 ON T2.supplier_unique_identifier NOT IN ( SELECT T3.fk_product_id FROM cart AS T3 WHERE T3.fk_user_id IN ( SELECT T4.fk_user_id FROM wishlist AS T4 WHERE T4.added_at > NOW() - INTERVAL '6 month' ) OR T3.id IN ( SELECT T5.fk_order_id FROM refunds_returns AS T5 ) ) INNER JOIN campaigns AS T6 ON T6.total_reach > ( SELECT AVG(T7.actual_spent) FROM campaigns AS T7 ) WHERE T1.id ISNULL",
      "Actual": "SELECT s.total_number_of_products_supplied, s.average_supplier_rating, s.primary_contact_person_name, s.primary_contact_email_address, c.campaign_name, c.start_date, c.end_date FROM suppliers s LEFT JOIN orders o ON s.supplier_unique_identifier = p.associated_supplier_reference_id LEFT JOIN order_items oi ON o.order_id = oi.order_id LEFT JOIN products p ON oi.product_id = p.unique_product_identifier LEFT JOIN refunds_returns rr ON o.order_id = rr.fk_order_id AND oi.product_id = rr.fk_product_id LEFT JOIN wishlist w ON p.unique_product_identifier = w.fk_product_id WHERE s.supplier_unique_identifier NOT IN (SELECT p.associated_supplier_reference_id FROM products p JOIN order_items oi ON p.unique_product_identifier = oi.product_id JOIN orders o ON oi.order_id = o.order_id) AND s.supplier_unique_identifier NOT IN (SELECT p.associated_supplier_reference_id FROM products p JOIN refunds_returns rr ON p.unique_product_identifier = rr.fk_product_id JOIN wishlist w ON p.unique_product_identifier = w.fk_product_id WHERE w.added_at >= CURRENT_DATE - INTERVAL '6 months') JOIN campaigns c ON c.campaign_id = o.campaign_id WHERE c.budget > c.actual_spent",
      "Expected_Error": null,
      "Actual_Error": "syntax error at or near \"JOIN\"\nLINE 1: ...w.added_at >= CURRENT_DATE - INTERVAL '6 months') JOIN campa...\n                                                             ^\n"
    },
    {
      "NL": "Find the total number of orders made by customers who have given 5-star reviews and have purchased a product at least twice, along with the total amount spent by these customers and the average sentiment analysis score of their reviews",
      "Expected": "SELECT COUNT(T1.order_id) AS total_orders, SUM(T1.total_amount) AS total_amount_spent, AVG(T2.sentiment_analysis_score) AS avg_sentiment_score FROM orders AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier WHERE T2.submitted_review_star_rating = 5 AND T2.previous_product_purchases_count >= 2",
      "Actual": "SELECT COUNT(DISTINCT o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent, AVG(pr.sentiment_analysis_score) AS avg_sentiment_score FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN product_reviews_and_ratings pr ON oi.product_id = pr.referenced_product_identifier WHERE pr.submitted_review_star_rating = 5 AND o.person_customer_id IN (SELECT person_customer_id FROM orders GROUP BY person_customer_id HAVING COUNT(order_id) >= 2)",
      "Expected_Results": [
        {
          "total_orders": 1,
          "total_amount_spent": 1299.99,
          "avg_sentiment_score": 0.95
        }
      ],
      "Actual_Results": [
        {
          "total_orders": 0,
          "total_spent": null,
          "avg_sentiment_score": null
        }
      ]
    },
    {
      "NL": "Find the customer birthday special discount status and the total discount amount redeemed for customers who have placed orders with a total amount greater than $50 and have a loyalty program tier level of 'Gold', including the product name and quantity of each order item, and the total transaction amount, grouped by the customer reference ID?",
      "Expected": "SELECT clpm.customer_birthday_special_discount, SUM(clpm.total_discount_amount_redeemed) AS total_discount_amount_redeemed, oi.product_name, oi.quantity, tap.total_transaction_amount FROM customers_loyalty_program AS clpm INNER JOIN orders AS o ON clpm.associated_customer_reference_id = o.person_customer_id INNER JOIN order_items AS oi ON o.order_id = oi.order_id INNER JOIN transactions_and_payments AS tap ON o.order_id = tap.linked_order_reference_identifier WHERE o.total_amount > 50 AND clpm.loyalty_program_tier_level = 'Gold' GROUP BY clpm.associated_customer_reference_id, clpm.customer_birthday_special_discount, oi.product_name, oi.quantity, tap.total_transaction_amount",
      "Actual": "SELECT c.customer_birthday_special_discount, c.total_discount_amount_redeemed, oi.product_name, oi.quantity, t.total_transaction_amount, c.associated_customer_reference_id FROM customers_loyalty_program c JOIN orders o ON c.associated_customer_reference_id = o.person_customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE o.total_amount > 50 AND c.loyalty_program_tier_level = 'Gold' GROUP BY c.customer_birthday_special_discount, c.total_discount_amount_redeemed, oi.product_name, oi.quantity, t.total_transaction_amount, c.associated_customer_reference_id",
      "Expected_Results": [
        {
          "customer_birthday_special_discount": true,
          "total_discount_amount_redeemed": 250.0,
          "product_name": "iPhone 15 Pro",
          "quantity": 1,
          "total_transaction_amount": 1299.99
        }
      ],
      "Actual_Results": [
        {
          "customer_birthday_special_discount": true,
          "total_discount_amount_redeemed": 250.0,
          "product_name": "iPhone 15 Pro",
          "quantity": 1,
          "total_transaction_amount": 1299.99,
          "associated_customer_reference_id": 1
        }
      ]
    },
    {
      "NL": "Find the average annual loyalty spending threshold for customers who have participated in exclusive beta testing and have a higher total reach than the average total reach of all campaigns.",
      "Expected": "SELECT AVG(T1.annual_loyalty_spending_threshold) FROM customers_loyalty_program AS T1 INNER JOIN campaigns AS T2 ON T1.associated_customer_reference_id = T2.campaign_id WHERE T1.participation_in_exclusive_beta_testing = TRUE AND T2.total_reach > (SELECT AVG(total_reach) FROM campaigns)",
      "Actual": "SELECT AVG(annual_loyalty_spending_threshold) FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = true AND associated_customer_reference_id IN (SELECT person_customer_id FROM campaigns WHERE total_reach > (SELECT AVG(total_reach) FROM campaigns))",
      "Expected_Error": null,
      "Actual_Error": "column \"person_customer_id\" does not exist\nLINE 1: ...e AND associated_customer_reference_id IN (SELECT person_cus...\n                                                             ^\n"
    },
    {
      "NL": "What are the product names and average ratings of products with more than 5 reviews in the wishlist?",
      "Expected": "SELECT T2.product_name, AVG(T1.submitted_review_star_rating) FROM product_reviews_and_ratings AS T1 INNER JOIN wishlist AS T2 ON T1.referenced_product_identifier = T2.fk_product_id GROUP BY T2.product_name HAVING COUNT(T1.review_unique_identifier) > 5",
      "Actual": "SELECT p.product_name, AVG(pr.submitted_review_star_rating) AS average_rating FROM products p JOIN product_reviews_and_ratings pr ON p.unique_product_identifier = pr.referenced_product_identifier JOIN wishlist w ON p.unique_product_identifier = w.fk_product_id GROUP BY p.product_name HAVING COUNT(pr.review_unique_identifier) > 5",
      "Expected_Error": null,
      "Actual_Error": "column p.product_name does not exist\nLINE 1: SELECT p.product_name, AVG(pr.submitted_review_star_rating) ...\n               ^\nHINT:  Perhaps you meant to reference the column \"w.product_name\".\n"
    },
    {
      "NL": "Retrieve the total number of loyalty points earned by each customer who has participated in the exclusive beta testing program.",
      "Expected": "SELECT associated_customer_reference_id, SUM(lifetime_loyalty_points_earned) AS total_loyalty_points FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = true GROUP BY associated_customer_reference_id;",
      "Actual": "SELECT associated_customer_reference_id, SUM(accumulated_loyalty_points_balance) AS total_loyalty_points_earned FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = true GROUP BY associated_customer_reference_id",
      "Expected_Results": [
        {
          "associated_customer_reference_id": 1,
          "total_loyalty_points": 7500
        }
      ],
      "Actual_Results": [
        {
          "associated_customer_reference_id": 1,
          "total_loyalty_points_earned": 5000
        }
      ]
    },
    {
      "NL": "What is the average review rating of products with a retail price higher than 500 and a minimum threshold for restocking higher than 50, and what is the average textual review feedback length of these reviews?",
      "Expected": "SELECT AVG(T1.submitted_review_star_rating), AVG(T1.length_of_review_in_characters) FROM product_reviews_and_ratings AS T1 INNER JOIN products AS T2 ON T1.referenced_product_identifier = T2.unique_product_identifier WHERE T2.standard_retail_price_including_tax > 500 AND T2.minimum_threshold_for_restocking > 50",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the average loyalty points of customers who have made at least one order",
      "Expected": "SELECT AVG(T1.person_loyalty_points) FROM customerinfo AS T1 INNER JOIN wishlist AS T2 ON T1.person_customer_id = T2.fk_user_id INNER JOIN order_items AS T3 ON T2.fk_product_id = T3.product_id GROUP BY T1.person_loyalty_points",
      "Actual": "SELECT AVG(person_loyalty_points) FROM customerinfo WHERE person_customer_id IN (SELECT DISTINCT person_customer_id FROM orders)",
      "Expected_Results": [
        {
          "avg": 500.0
        },
        {
          "avg": 200.0
        }
      ],
      "Actual_Results": [
        {
          "avg": 483.3333333333333
        }
      ]
    },
    {
      "NL": "Find the total amount of all orders placed and the corresponding final billed amount for transactions where the first time customer transaction flag is true.",
      "Expected": "SELECT SUM(o.total_amount) as total_order_amount, SUM(t.final_billed_amount) as total_final_billed_amount FROM orders o JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE t.first_time_customer_transaction = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List the campaign names and the number of customers who have made a purchase through each campaign in the last 60 days.",
      "Expected": "SELECT c.campaign_name, COUNT(DISTINCT t.corresponding_customer_reference_identifier) FROM campaigns c JOIN transactions_and_payments t ON c.campaign_id = t.linked_order_reference_identifier WHERE t.transaction_date_and_time > NOW() - INTERVAL '60 day' GROUP BY c.campaign_name",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of customers who are premium members and have made at least one order in the last year, along with the average time spent on the site.",
      "Expected": "SELECT COUNT(DISTINCT ci.person_customer_id), AVG(e.time_spent_seconds) AS avg_time_spent_seconds FROM customerinfo ci JOIN events e ON ci.person_customer_id = e.person_customer_id WHERE ci.person_is_premium = TRUE AND e.event_timestamp >= NOW() - INTERVAL '1 year' AND e.event_type = 'order';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total amount spent by customers who have made more than one transaction.",
      "Expected": "SELECT T2.corresponding_customer_reference_identifier, SUM(T1.total_amount) FROM orders AS T1 INNER JOIN transactions_and_payments AS T2 ON T1.order_id = T2.linked_order_reference_identifier GROUP BY T2.corresponding_customer_reference_identifier HAVING COUNT(T1.order_id) > 1",
      "Actual": "SELECT SUM(total_transaction_amount) FROM transactions_and_payments WHERE corresponding_customer_reference_identifier IN (SELECT corresponding_customer_reference_identifier FROM transactions_and_payments GROUP BY corresponding_customer_reference_identifier HAVING COUNT(*) > 1)",
      "Expected_Results": [],
      "Actual_Results": [
        {
          "sum": null
        }
      ]
    },
    {
      "NL": "Find the total revenue generated from all campaigns that ended after January 1, 2023.",
      "Expected": "SELECT SUM(revenue_generated) FROM campaigns WHERE end_date > '2023-01-01'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the customers who have purchased products with an average rating greater than 4 and get the product name and rating for each of them.",
      "Expected": "SELECT T3.person_first_name, T3.person_last_name, T1.product_display_name, T1.aggregate_customer_review_rating FROM products AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.unique_product_identifier = T2.referenced_product_identifier INNER JOIN customerinfo AS T3 ON T2.reviewing_customer_identifier = T3.person_customer_id WHERE T1.aggregate_customer_review_rating > 4",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "How many orders were placed during a campaign with id 1?",
      "Expected": "SELECT COUNT(order_id) FROM orders WHERE campaign_id = 1",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all transactions where the customer has not previously made a purchase and the order was shipped to a billing address in the same city as the shipping address.",
      "Expected": "SELECT t.* FROM transactions_and_payments t JOIN cart c ON t.linked_order_reference_identifier = c.id WHERE t.first_time_customer_transaction = TRUE AND t.billing_address_city = t.shipping_address_city",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total amount spent by customers who have accumulated more than 1000 loyalty points and have placed orders with a total amount greater than $100, including the total discount applied and the tax amount, grouped by the loyalty program tier level?",
      "Expected": "SELECT SUM(o.total_amount) AS total_amount, clpm.loyalty_program_tier_level FROM customers_loyalty_program AS clpm INNER JOIN orders AS o ON clpm.associated_customer_reference_id = o.person_customer_id WHERE clpm.accumulated_loyalty_points_balance > 1000 AND o.total_amount > 100 GROUP BY clpm.loyalty_program_tier_level",
      "Actual": "SELECT c.loyalty_program_tier_level, SUM(o.total_amount) AS total_spent, SUM(o.discount_applied) AS total_discount, SUM(o.tax_amount) AS total_tax FROM customers_loyalty_program c JOIN orders o ON c.associated_customer_reference_id = o.person_customer_id WHERE c.accumulated_loyalty_points_balance > 1000 AND o.total_amount > 100 GROUP BY c.loyalty_program_tier_level",
      "Expected_Results": [
        {
          "total_amount": 1299.99,
          "loyalty_program_tier_level": "Gold"
        },
        {
          "total_amount": 799.99,
          "loyalty_program_tier_level": "Silver"
        }
      ],
      "Actual_Results": [
        {
          "loyalty_program_tier_level": "Gold",
          "total_spent": 1299.99,
          "total_discount": 50.0,
          "total_tax": 104.0
        },
        {
          "loyalty_program_tier_level": "Silver",
          "total_spent": 799.99,
          "total_discount": 25.0,
          "total_tax": 64.0
        }
      ]
    },
    {
      "NL": "Find the average star rating of reviews for products with a net weight greater than 1 kilogram.",
      "Expected": "SELECT AVG(T1.submitted_review_star_rating) FROM product_reviews_and_ratings AS T1 INNER JOIN products AS T2 ON T1.referenced_product_identifier = T2.unique_product_identifier WHERE T2.net_weight_in_kilograms > 1",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average rating of suppliers that have supplied more than 100 products.",
      "Expected": "SELECT AVG(average_supplier_rating) AS average_rating FROM suppliers WHERE total_number_of_products_supplied > 100;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get all wishlist items for users who have placed orders with a payment status of 'paid' and order status of 'delivered' and also get the shipping details of those orders.",
      "Expected": "SELECT w.*, s.* FROM wishlist w JOIN orders o ON w.fk_user_id = o.person_customer_id JOIN shipping s ON o.order_id = s.fk_order_id WHERE o.payment_status = 'paid' AND o.order_status = 'delivered'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Which customers have accumulated more than 1000 loyalty points and are eligible for free shipping?",
      "Expected": "SELECT associated_customer_reference_id FROM customers_loyalty_program WHERE accumulated_loyalty_points_balance > 1000 AND free_shipping_eligibility = TRUE",
      "Actual": "SELECT person_customer_id FROM customers_loyalty_program WHERE accumulated_loyalty_points_balance > 1000 AND free_shipping_eligibility = true",
      "Expected_Error": null,
      "Actual_Error": "column \"person_customer_id\" does not exist\nLINE 1: SELECT person_customer_id FROM customers_loyalty_program WHE...\n               ^\n"
    },
    {
      "NL": "Get the average time spent per session and the average cart value for sessions where the email was opened and a push notification was clicked.",
      "Expected": "SELECT AVG(time_spent_seconds) AS average_time_spent, AVG(cart_value) AS average_cart_value FROM events WHERE email_opened = true AND push_notification_clicked = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total revenue generated by each campaign along with the total number of transactions made during the campaign's active period.",
      "Expected": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, COUNT(t.transaction_unique_identifier) AS total_transactions FROM campaigns c LEFT JOIN transactions_and_payments t ON t.transaction_date_and_time BETWEEN c.start_date AND c.end_date GROUP BY c.campaign_name;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all the customers who have a total order value greater than $1000, have their newsletter subscription enabled, have a premium account, and have returned at least one product with a restocking fee, and also find the average number of products supplied by the supplier with the highest average supplier rating who is operating in the same country as the customer, and the total shipping cost for all the orders of these customers.",
      "Expected": "SELECT T1.person_customer_id, T1.person_first_name, T1.person_last_name, AVG(T3.total_number_of_products_supplied), SUM(T4.shipping_cost) FROM customerinfo AS T1 INNER JOIN refunds_returns AS T2 ON T1.person_customer_id = T2.fk_user_id INNER JOIN suppliers AS T3 ON T3.supplier_country_of_operation = T1.address_country INNER JOIN shipping AS T4 ON T4.fk_order_id = T2.fk_order_id WHERE T1.preferences_total_orders * T1.preferences_avg_spent_per_order > 1000 AND T1.preferences_newsletter_subscription = TRUE AND T1.person_is_premium = TRUE AND T2.restocking_fee > 0 AND T3.average_supplier_rating = (SELECT MAX(average_supplier_rating) FROM suppliers) GROUP BY T1.person_customer_id, T1.person_first_name, T1.person_last_name",
      "Actual": "SELECT c.person_customer_id, AVG(s.total_number_of_products_supplied) AS avg_products_supplied, SUM(o.shipping_fee) AS total_shipping_cost FROM customerinfo c JOIN orders o ON c.person_customer_id = o.person_customer_id JOIN refunds_returns r ON c.person_customer_id = r.fk_user_id JOIN suppliers s ON s.supplier_country_of_operation = c.address_country WHERE o.total_amount > 1000 AND c.preferences_newsletter_subscription = TRUE AND c.person_is_premium = TRUE AND r.restocking_fee > 0 GROUP BY c.person_customer_id HAVING COUNT(r.id) >= 1 ORDER BY s.average_supplier_rating DESC LIMIT 1",
      "Expected_Error": null,
      "Actual_Error": "column \"s.average_supplier_rating\" must appear in the GROUP BY clause or be used in an aggregate function\nLINE 1: ...rson_customer_id HAVING COUNT(r.id) >= 1 ORDER BY s.average_...\n                                                             ^\n"
    },
    {
      "NL": "Identify the highest and lowest stock levels for products supplied by suppliers who have an average supplier rating of less than 3.5, along with the product's last updated date and the supplier's official business name.",
      "Expected": "SELECT i.referenced_product_id, MIN(i.quantity) AS lowest_stock_level, MAX(i.quantity) AS highest_stock_level, i.last_updated, s.official_supplier_business_name FROM inventory i JOIN suppliers s ON i.supplier_id = s.supplier_unique_identifier WHERE s.average_supplier_rating < 3.5 GROUP BY i.referenced_product_id, i.last_updated, s.official_supplier_business_name",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the average refund amount and status for each return type?",
      "Expected": "SELECT T1.return_type, AVG(T1.refund_amount), T1.status FROM refunds_returns AS T1 INNER JOIN wishlist AS T2 ON T1.fk_product_id = T2.fk_product_id GROUP BY T1.return_type, T1.status",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the order id, total amount, and shipping fee for all orders with a payment status of 'paid' and a total amount greater than 100.",
      "Expected": "SELECT order_id, total_amount, shipping_fee FROM orders WHERE payment_status = 'paid' AND total_amount > 100",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Which customers have spent more than $1000 in the last year and have a lifetime loyalty points earned of more than 5000, and also show the average loyalty points balance and the count of orders for these customers, including the top 3 products they have ordered with the highest retail price?",
      "Expected": "SELECT clp.associated_customer_reference_id, AVG(clp.accumulated_loyalty_points_balance), COUNT(o.order_id), p.product_display_name, p.standard_retail_price_including_tax FROM customers_loyalty_program clp JOIN orders o ON clp.associated_customer_reference_id = o.person_customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.unique_product_identifier WHERE o.order_date > NOW() - INTERVAL '1 year' AND o.total_amount > 1000 AND clp.lifetime_loyalty_points_earned > 5000 GROUP BY clp.associated_customer_reference_id, p.product_display_name, p.standard_retail_price_including_tax ORDER BY p.standard_retail_price_including_tax DESC LIMIT 3",
      "Actual": "SELECT ci.person_first_name, ci.person_last_name, ci.person_email, SUM(t.final_billed_amount) AS total_spent, clp.lifetime_loyalty_points_earned, AVG(clp.accumulated_loyalty_points_balance) AS avg_loyalty_points_balance, COUNT(o.order_id) AS order_count, STRING_AGG(p.product_display_name || ' (' || p.standard_retail_price_including_tax || ')', ', ' ORDER BY p.standard_retail_price_including_tax DESC LIMIT 3) AS top_3_products FROM customerinfo ci JOIN transactions_and_payments t ON ci.person_customer_id = t.corresponding_customer_reference_identifier JOIN customers_loyalty_program clp ON ci.person_customer_id = clp.associated_customer_reference_id JOIN orders o ON ci.person_customer_id = o.person_customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.unique_product_identifier WHERE t.transaction_date_and_time >= NOW() - INTERVAL '1 year' AND clp.lifetime_loyalty_points_earned > 5000 GROUP BY ci.person_first_name, ci.person_last_name, ci.person_email HAVING SUM(t.final_billed_amount) > 1000",
      "Expected_Error": null,
      "Actual_Error": "syntax error at or near \"LIMIT\"\nLINE 1: ...DER BY p.standard_retail_price_including_tax DESC LIMIT 3) A...\n                                                             ^\n"
    },
    {
      "NL": "Find the number of orders and total amount of all orders for each shipping state that have a discount applied.",
      "Expected": "SELECT COUNT(order_id), SUM(total_amount), shipping_address_state FROM orders WHERE discount_applied IS NOT NULL GROUP BY shipping_address_state",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total amount spent by customers who have accumulated more than 1000 loyalty points, have a loyalty program tier level of 'gold', have not had any chargeback requests, have made a payment using the same billing and shipping address, have purchased at least one item with a price per unit greater than $50, and have a customer feedback engagement score greater than 4, and what is the average number of loyalty points earned by these customers, considering only orders with a total amount greater than $500 and a delivery date within the last 3 months?",
      "Expected": "SELECT SUM(O.total_amount), AVG(C.accumulated_loyalty_points_balance) FROM orders O INNER JOIN transactions_and_payments T ON O.order_id = T.linked_order_reference_identifier INNER JOIN customers_loyalty_program C ON T.corresponding_customer_reference_identifier = C.associated_customer_reference_id INNER JOIN order_items I ON O.order_id = I.order_id WHERE C.accumulated_loyalty_points_balance > 1000 AND C.loyalty_program_tier_level = 'gold' AND T.chargeback_request_status = FALSE AND T.billing_address_street = T.shipping_address_street AND T.billing_address_city = T.shipping_address_city AND T.billing_address_state = T.shipping_address_state AND T.billing_address_country = T.shipping_address_country AND T.billing_address_zip_code = T.shipping_address_zip_code AND I.price_per_unit > 50 AND C.customer_feedback_engagement_score > 4 AND O.total_amount > 500 AND O.delivery_date > NOW() - INTERVAL '3 month'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total number of orders, total transaction amount, and average loyalty points earned per order for customers who have made a purchase in the last 30 days, have a premium account, and have a total of at least 2 wishlist items, along with the average scroll depth percentage and click count for these customers",
      "Expected": "SELECT COUNT(DISTINCT t.linked_order_reference_identifier), SUM(t.total_transaction_amount), AVG(t.associated_loyalty_points_earned), AVG(e.scroll_depth_percentage), AVG(e.click_count) FROM customerinfo c JOIN transactions_and_payments t ON c.person_customer_id = t.corresponding_customer_reference_identifier JOIN events e ON c.person_customer_id = e.person_customer_id WHERE c.person_is_premium = TRUE AND t.transaction_date_and_time > NOW() - INTERVAL '30 day' AND c.preferences_wishlist_items >= 2 GROUP BY c.person_customer_id",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total revenue generated by each campaign along with the number of total conversions and the number of products added to wishlists during the campaign period.",
      "Expected": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, SUM(c.conversions) AS total_conversions, COUNT(w.id) AS total_wishlist_additions FROM campaigns c LEFT JOIN wishlist w ON w.added_at BETWEEN c.start_date AND c.end_date GROUP BY c.campaign_name;",
      "Actual": "SELECT c.campaign_name, c.revenue_generated, c.conversions, COUNT(w.id) AS total_wishlist_additions FROM campaigns c LEFT JOIN wishlist w ON c.campaign_id = w.added_from_source WHERE w.added_at BETWEEN c.start_date AND c.end_date GROUP BY c.campaign_name, c.revenue_generated, c.conversions",
      "Expected_Error": null,
      "Actual_Error": "operator does not exist: integer = added_from_source_enum\nLINE 1: ...campaigns c LEFT JOIN wishlist w ON c.campaign_id = w.added_...\n                                                             ^\nHINT:  No operator matches the given name and argument types. You might need to add explicit type casts.\n"
    },
    {
      "NL": "What are the total amounts of orders made by each customer who has left a review?",
      "Expected": "SELECT T1.total_amount FROM orders AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all products that have been added to a wishlist with a priority level of high and are currently out of stock, along with the customer's notes and the product's detailed description, considering only products that have a standard retail price less than $50 and are from a specific brand.",
      "Expected": "SELECT p.product_display_name, p.detailed_product_description, w.notes FROM wishlist w JOIN products p ON w.fk_product_id = p.unique_product_identifier JOIN inventory i ON p.unique_product_identifier = i.referenced_product_id WHERE w.priority_level = 'high' AND i.quantity = 0 AND p.standard_retail_price_including_tax < 50 AND p.global_brand_affiliation = 'Specific Brand'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the number of reviews and ratings where the review was flagged as inappropriate.",
      "Expected": "SELECT COUNT(*) FROM product_reviews_and_ratings WHERE flagged_as_inappropriate = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "For all the customers who have both placed an order and added at least one item to their wishlist, display the customer's name, order count, wishlist count, and average order total amount.",
      "Expected": "SELECT T1.person_customer_id, COUNT(T1.order_id), COUNT(T2.id), AVG(T1.total_amount) FROM orders AS T1 INNER JOIN wishlist AS T2 ON T1.person_customer_id = T2.fk_user_id GROUP BY T1.person_customer_id HAVING COUNT(T1.order_id) > 0 AND COUNT(T2.id) > 0;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the transaction details of all fraudulent transactions.",
      "Expected": "SELECT * FROM transactions_and_payments WHERE is_transaction_fraudulent = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the average amount spent per order for customers with a premium account?",
      "Expected": "SELECT AVG(preferences_avg_spent_per_order) FROM customerinfo WHERE person_is_premium = True",
      "Actual": "SELECT AVG(total_amount) FROM orders WHERE person_customer_id IN (SELECT person_customer_id FROM customerinfo WHERE person_is_premium = true)",
      "Expected_Results": [
        {
          "avg": 600.0
        }
      ],
      "Actual_Results": [
        {
          "avg": 1899.99
        }
      ]
    },
    {
      "NL": "Find the total number of loyalty points accumulated by customers who have redeemed more than 100 loyalty points and have at least one product in their cart with a promotional discount of more than 20%.",
      "Expected": "SELECT SUM(clp.accumulated_loyalty_points_balance) FROM customers_loyalty_program clp JOIN cart c ON clp.associated_customer_reference_id = c.fk_user_id JOIN products p ON c.fk_product_id = p.unique_product_identifier WHERE clp.lifetime_loyalty_points_redeemed > 100 AND p.percentage_discount_applied > 20;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all reviews with a rating of 5 and the customer has edited the review at least once.",
      "Expected": "SELECT * FROM product_reviews_and_ratings WHERE submitted_review_star_rating = 5 AND user_has_edited_review = TRUE AND total_number_of_edits_made > 0",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total amount of transactions for customers who have placed an order with a total amount greater than 100, have a loyalty program status with a balance greater than 100, and have made a transaction in the last 30 days. Also, include the customer's name and order status in the results.",
      "Expected": "SELECT SUM(tp.total_transaction_amount), ci.person_first_name, ci.person_last_name, o.order_status FROM transactions_and_payments tp INNER JOIN orders o ON tp.linked_order_reference_identifier = o.order_id INNER JOIN customerinfo ci ON tp.corresponding_customer_reference_identifier = ci.person_customer_id WHERE o.total_amount > 100 AND ci.account_account_balance > 100 AND tp.transaction_date_and_time >= NOW() - INTERVAL '30 day' GROUP BY ci.person_first_name, ci.person_last_name, o.order_status",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all products that have an average customer review rating greater than or equal to 4.5, and are supplied by a supplier with an average supplier rating greater than or equal to 4.5, and have a standard retail price including tax less than or equal to $100, and are flagged as environmentally sustainable, and are featured products, and have a total number of verified reviews greater than or equal to 1000, and have a shipping weight measurement in kilograms less than or equal to 5 kilograms.",
      "Expected": "SELECT p.* FROM products p INNER JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE p.aggregate_customer_review_rating >= 4.5 AND s.average_supplier_rating >= 4.5 AND p.standard_retail_price_including_tax <= 100 AND p.environmentally_sustainable_product = TRUE AND p.featured_product_flag = TRUE AND p.total_number_of_verified_reviews >= 1000 AND p.shipping_weight_measurement_in_kilograms <= 5",
      "Actual": "SELECT p.* FROM products p JOIN product_reviews_and_ratings prr ON p.unique_product_identifier = prr.referenced_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE prr.submitted_review_star_rating >= 4.5 AND s.average_supplier_rating >= 4.5 AND p.standard_retail_price_including_tax <= 100 AND p.environmentally_sustainable_product = true AND p.featured_product_flag = true AND prr.total_number_of_verified_reviews >= 1000 AND p.shipping_weight_measurement_in_kilograms <= 5 GROUP BY p.unique_product_identifier HAVING AVG(prr.submitted_review_star_rating) >= 4.5",
      "Expected_Error": null,
      "Actual_Error": "column prr.total_number_of_verified_reviews does not exist\nLINE 1: ...uct = true AND p.featured_product_flag = true AND prr.total_...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"p.total_number_of_verified_reviews\".\n"
    },
    {
      "NL": "Retrieve the total transaction amount for each transaction where the transaction status is 'completed' and the fraud detection flagged is false.",
      "Expected": "SELECT SUM(total_transaction_amount) FROM transactions_and_payments WHERE transaction_status = 'completed' AND fraud_detection_flagged = false;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of products supplied by each supplier, and the average rating of each supplier, and the total number of verified reviews for each product supplied by each supplier, and the average retail price of each product supplied by each supplier, and the total number of transactions made for each product supplied by each supplier.",
      "Expected": "SELECT t1.supplier_unique_identifier, COUNT(DISTINCT t2.unique_product_identifier), AVG(t1.average_supplier_rating), AVG(t2.total_number_of_verified_reviews), AVG(t2.standard_retail_price_including_tax), COUNT(DISTINCT t3.transaction_unique_identifier) FROM suppliers AS t1 INNER JOIN products AS t2 ON t1.supplier_unique_identifier = t2.associated_supplier_reference_id INNER JOIN transactions_and_payments AS t3 ON t3.linked_order_reference_identifier = t2.unique_product_identifier GROUP BY t1.supplier_unique_identifier",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of premium customers who have made more than 10 orders and have a loyalty points balance greater than 500.",
      "Expected": "SELECT COUNT(*) FROM customerinfo WHERE person_is_premium = true AND preferences_total_orders > 10 AND person_loyalty_points > 500;",
      "Actual": "SELECT COUNT(*) FROM customerinfo ci JOIN customers_loyalty_program clp ON ci.person_customer_id = clp.associated_customer_reference_id JOIN orders o ON ci.person_customer_id = o.person_customer_id WHERE ci.person_is_premium = true GROUP BY ci.person_customer_id HAVING COUNT(o.order_id) > 10 AND clp.accumulated_loyalty_points_balance > 500",
      "Expected_Error": null,
      "Actual_Error": "column \"clp.accumulated_loyalty_points_balance\" must appear in the GROUP BY clause or be used in an aggregate function\nLINE 1: ...son_customer_id HAVING COUNT(o.order_id) > 10 AND clp.accumu...\n                                                             ^\n"
    },
    {
      "NL": "Find all customers who have initiated a refund and have a transaction status of 'Completed'.",
      "Expected": "SELECT DISTINCT corresponding_customer_reference_identifier FROM transactions_and_payments WHERE refund_initiation_date IS NOT NULL AND transaction_status = 'Completed'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the average star rating of reviews for products that have received more than 50 helpful votes and were submitted by premium customers who have made more than 10 purchases, along with the customer's first name and last name, filtering out reviews that are flagged as inappropriate and sorting the results by the customer's last name in descending order.",
      "Expected": "SELECT AVG(prar.submitted_review_star_rating) AS average_star_rating, ci.person_first_name, ci.person_last_name FROM product_reviews_and_ratings prar JOIN customerinfo ci ON prar.reviewing_customer_identifier = ci.person_customer_id WHERE prar.number_of_helpful_votes_received > 50 AND ci.person_is_premium = TRUE AND ci.preferences_total_orders > 10 AND prar.flagged_as_inappropriate = FALSE GROUP BY ci.person_first_name, ci.person_last_name ORDER BY ci.person_last_name DESC;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of orders placed by customers who are premium members and have an active subscription.",
      "Expected": "SELECT COUNT(*) FROM orders INNER JOIN customerinfo ON orders.person_customer_id = customerinfo.person_customer_id WHERE customerinfo.person_is_premium = true AND customerinfo.account_has_active_subscription = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the details of all campaigns that have a start date later than '2022-01-01' and are of type 'email'",
      "Expected": "SELECT * FROM campaigns WHERE start_date > '2022-01-01' AND campaign_type = 'email'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the number of customers who are eligible for special promotions and have accumulated more than 1000 loyalty points, along with the total discount amount redeemed and the total number of helpful votes received by reviews submitted by these customers, grouped by the loyalty program tier level?",
      "Expected": "SELECT T1.loyalty_program_tier_level, COUNT(DISTINCT T1.associated_customer_reference_id), SUM(T1.total_discount_amount_redeemed), SUM(T2.number_of_helpful_votes_received) FROM customers_loyalty_program AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.associated_customer_reference_id = T2.reviewing_customer_identifier WHERE T1.accumulated_loyalty_points_balance > 1000 AND T1.eligible_for_special_promotions = TRUE GROUP BY T1.loyalty_program_tier_level",
      "Actual": "SELECT c.loyalty_program_tier_level, COUNT(DISTINCT c.associated_customer_reference_id) AS number_of_customers, SUM(c.total_discount_amount_redeemed) AS total_discount_amount_redeemed, SUM(r.number_of_helpful_votes_received) AS total_helpful_votes_received FROM customers_loyalty_program c LEFT JOIN product_reviews_and_ratings r ON c.associated_customer_reference_id = r.reviewing_customer_identifier WHERE c.eligible_for_special_promotions = TRUE AND c.accumulated_loyalty_points_balance > 1000 GROUP BY c.loyalty_program_tier_level",
      "Expected_Results": [
        {
          "loyalty_program_tier_level": "Gold",
          "count": 1,
          "sum": 25
        },
        {
          "loyalty_program_tier_level": "Silver",
          "count": 1,
          "sum": 15
        }
      ],
      "Actual_Results": [
        {
          "loyalty_program_tier_level": "Gold",
          "number_of_customers": 1,
          "total_discount_amount_redeemed": 250.0,
          "total_helpful_votes_received": 25
        },
        {
          "loyalty_program_tier_level": "Silver",
          "number_of_customers": 1,
          "total_discount_amount_redeemed": 150.0,
          "total_helpful_votes_received": 15
        }
      ]
    },
    {
      "NL": "Find the number of orders shipped in the past 24 hours, grouped by shipping status.",
      "Expected": "SELECT shipping_status, COUNT(*) FROM shipping WHERE shipped_date >= NOW() - INTERVAL '24 hours' GROUP BY shipping_status",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the average shipping cost for orders that have been shipped and have a shipping status of 'delivered'?",
      "Expected": "SELECT AVG(shipping_cost) FROM shipping WHERE shipping_status = 'delivered' AND shipped_date IS NOT NULL",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the order IDs and shipping costs for orders that have been shipped and have a shipping status of 'delivered'?",
      "Expected": "SELECT o.order_id, s.shipping_cost FROM orders o JOIN shipping s ON o.order_id = s.fk_order_id WHERE s.shipping_status = 'delivered' AND s.shipped_date IS NOT NULL",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total revenue generated for each campaign along with the total shipping cost for the corresponding orders",
      "Expected": "SELECT c.campaign_name, SUM(c.revenue_generated) AS total_revenue, SUM(s.shipping_cost) AS total_shipping_cost FROM campaigns c JOIN shipping s ON c.campaign_id = s.fk_order_id GROUP BY c.campaign_name",
      "Actual": "SELECT c.campaign_name, SUM(o.total_amount) AS total_revenue, SUM(o.shipping_fee) AS total_shipping_cost FROM campaigns c JOIN orders o ON c.campaign_id = o.campaign_id GROUP BY c.campaign_name",
      "Expected_Results": [],
      "Actual_Results": [
        {
          "campaign_name": "New Customer Welcome",
          "total_revenue": 799.99,
          "total_shipping_cost": 12.0
        },
        {
          "campaign_name": "Summer Sale 2024",
          "total_revenue": 3799.98,
          "total_shipping_cost": 15.0
        }
      ]
    },
    {
      "NL": "List all customers who have a newsletter subscription and their wishlist items.",
      "Expected": "SELECT person_email, product_name FROM customerinfo JOIN wishlist ON customerinfo.person_customer_id = wishlist.fk_user_id WHERE preferences_newsletter_subscription = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of loyalty points for customers with free shipping eligibility and the average supplier rating of their suppliers.",
      "Expected": "SELECT SUM(clpb.accumulated_loyalty_points_balance) AS total_loyalty_points, AVG(s.average_supplier_rating) AS average_supplier_rating FROM customers_loyalty_program clpb JOIN order_items oi ON clpb.associated_customer_reference_id = oi.order_id JOIN suppliers s ON oi.product_id = s.supplier_unique_identifier WHERE clpb.free_shipping_eligibility = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all reviews that have a sentiment analysis score greater than or equal to 0.8, and are from customers who have made at least 5 previous purchases, and have a review approval moderation status of 'Approved', and have a review moderator note containing the word 'Excellent', and are associated with products that have a standard retail price including tax greater than $50, and are from suppliers with an average supplier rating greater than or equal to 4.5, and are flagged as environmentally sustainable, and have a total number of verified reviews greater than or equal to 500.",
      "Expected": "SELECT prr.* FROM product_reviews_and_ratings prr INNER JOIN products p ON prr.referenced_product_identifier = p.unique_product_identifier INNER JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE prr.sentiment_analysis_score >= 0.8 AND prr.previous_product_purchases_count >= 5 AND prr.review_approval_moderation_status = 'Approved' AND prr.review_moderator_notes LIKE '%Excellent%' AND p.standard_retail_price_including_tax > 50 AND s.average_supplier_rating >= 4.5 AND p.environmentally_sustainable_product = TRUE AND p.total_number_of_verified_reviews >= 500",
      "Actual": "SELECT prar.* FROM product_reviews_and_ratings prar JOIN customers_loyalty_program clp ON prar.reviewing_customer_identifier = clp.associated_customer_reference_id JOIN products p ON prar.referenced_product_identifier = p.unique_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier WHERE prar.sentiment_analysis_score >= 0.8 AND clp.previous_product_purchases_count >= 5 AND prar.review_approval_moderation_status = 'Approved' AND prar.review_moderator_notes LIKE '%Excellent%' AND p.standard_retail_price_including_tax > 50 AND s.average_supplier_rating >= 4.5 AND p.environmentally_sustainable_product = true AND p.total_number_of_verified_reviews >= 500",
      "Expected_Error": null,
      "Actual_Error": "column clp.previous_product_purchases_count does not exist\nLINE 1: ...er WHERE prar.sentiment_analysis_score >= 0.8 AND clp.previo...\n                                                             ^\n"
    },
    {
      "NL": "What is the average supplier rating?",
      "Expected": "SELECT AVG(average_supplier_rating) FROM suppliers",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the average revenue generated per campaign?",
      "Expected": "SELECT AVG(revenue_generated) FROM campaigns",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all unique product identifiers where the standard retail price is greater than the promotional price, and the percentage discount is greater than 0.",
      "Expected": "SELECT unique_product_identifier FROM products WHERE standard_retail_price_including_tax > promotional_discounted_price AND percentage_discount_applied > 0",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total discount amount redeemed and the last loyalty point update date for customers who have an accumulated loyalty points balance greater than 500 and are eligible for special promotions.",
      "Expected": "SELECT total_discount_amount_redeemed, last_loyalty_point_update_date FROM customers_loyalty_program WHERE accumulated_loyalty_points_balance > 500 AND eligible_for_special_promotions = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the total number of loyalty points earned by customers who have made more than 5 orders and have free shipping eligibility.",
      "Expected": "SELECT SUM(l.lifetime_loyalty_points_earned) FROM customers_loyalty_program l JOIN customerinfo c ON l.associated_customer_reference_id = c.person_customer_id WHERE c.preferences_total_orders > 5 AND l.free_shipping_eligibility = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the average time spent on the events related to orders that have a payment method of 'Credit Card' and occurred in the year 2022, grouped by the event type.",
      "Expected": "SELECT e.event_type, AVG(e.time_spent_seconds) AS avg_time_spent FROM events e JOIN orders o ON e.order_id = o.order_id WHERE o.payment_method = 'Credit Card' AND e.event_timestamp BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY e.event_type;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve a comprehensive report for each customer, which includes the total time spent on the site, average cart value, number of unique sessions, the most common device platform, and the average review rating. Additionally, for each customer, calculate the total amount spent on orders, the average shipping fee per item, and the average tax amount per item. This report should be ordered by the total time spent in descending order.",
      "Expected": "SELECT e.person_customer_id, SUM(e.time_spent_seconds) AS total_time_spent, AVG(e.cart_value) AS avg_cart_value, COUNT(DISTINCT e.session_id) AS unique_sessions, MODE() WITHIN GROUP (ORDER BY e.device_platform) AS most_common_device_platform, AVG(e.review_rating) AS avg_review_rating, COALESCE(SUM(oi.total_price), 0) AS total_amount_spent, COALESCE(AVG(oi.shipping_fee), 0) AS avg_shipping_fee_per_item, COALESCE(AVG(oi.tax_amount), 0) AS avg_tax_amount_per_item FROM events e LEFT JOIN order_items oi ON e.order_id = oi.order_id GROUP BY e.person_customer_id ORDER BY total_time_spent DESC;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total transaction amount and the review approval moderation status for transactions that have been flagged as fraudulent and have a review approval moderation status of 'approved'.",
      "Expected": "SELECT T2.total_transaction_amount, T1.review_approval_moderation_status FROM product_reviews_and_ratings AS T1 INNER JOIN transactions_and_payments AS T2 ON T1.referenced_product_identifier = T2.linked_order_reference_identifier WHERE T2.is_transaction_fraudulent = TRUE AND T1.review_approval_moderation_status = 'approved'",
      "Actual": "SELECT total_transaction_amount, review_approval_moderation_status FROM transactions_and_payments WHERE is_transaction_fraudulent = true AND review_approval_moderation_status = 'approved'",
      "Expected_Error": null,
      "Actual_Error": "column \"review_approval_moderation_status\" does not exist\nLINE 1: SELECT total_transaction_amount, review_approval_moderation_...\n                                         ^\n"
    },
    {
      "NL": "Find all female customers above 40 years old with more than 1000 loyalty points.",
      "Expected": "SELECT * FROM customerinfo WHERE person_gender = 'F' AND EXTRACT(YEAR FROM AGE(CURRENT_DATE, person_date_of_birth)) > 40 AND person_loyalty_points > 1000",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all transactions where the customer has made a purchase using a digital wallet and the product is currently in stock, also find the quantity of the product in the inventory.",
      "Expected": "SELECT t.transaction_unique_identifier, t.digital_wallet_used, i.quantity FROM transactions_and_payments t JOIN inventory i ON t.linked_order_reference_identifier = i.referenced_product_id WHERE t.digital_wallet_used IS NOT NULL AND i.stock_status = 'In Stock'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Analyze the engagement of customers by calculating the average time spent on the website, the total number of clicks, and the number of reviews they have provided, for customers who have placed an order in the past year and have a loyalty tier level of 'Gold'. The results should be grouped by city and ordered by the number of reviews in descending order.",
      "Expected": "SELECT e.location_city, AVG(e.time_spent_seconds) AS avg_time_spent, SUM(e.click_count) AS total_clicks, COUNT(e.review_rating) AS total_reviews FROM events e JOIN customerinfo c ON e.person_customer_id = c.person_customer_id JOIN customers_loyalty_program cl ON c.person_customer_id = cl.associated_customer_reference_id WHERE e.event_timestamp > NOW() - INTERVAL '1 year' AND cl.loyalty_program_tier_level = 'Gold' GROUP BY e.location_city ORDER BY total_reviews DESC;",
      "Actual": "SELECT e.location_city, AVG(e.time_spent_seconds) AS avg_time_spent, SUM(e.click_count) AS total_clicks, COUNT(pr.review_unique_identifier) AS number_of_reviews FROM events e LEFT JOIN product_reviews_and_ratings pr ON e.person_customer_id = pr.reviewing_customer_identifier JOIN orders o ON e.person_customer_id = o.person_customer_id JOIN customers_loyalty_program clp ON e.person_customer_id = clp.associated_customer_reference_id WHERE o.order_date >= NOW() - INTERVAL '1 year' AND clp.loyalty_program_tier_level = 'Gold' GROUP BY e.location_city ORDER BY number_of_reviews DESC",
      "Expected_Results": [
        {
          "location_city": "New York",
          "avg_time_spent": 300.0,
          "total_clicks": 15,
          "total_reviews": 0
        }
      ],
      "Actual_Results": []
    },
    {
      "NL": "List all columns for the orders table",
      "Expected": "SELECT * FROM information_schema.columns WHERE table_name = 'orders'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the details of all wishlist items that have been added by customers who have made at least one purchase with a total transaction amount greater than $100.",
      "Expected": "SELECT w.* FROM wishlist w JOIN cart c ON w.fk_user_id = c.fk_user_id JOIN transactions_and_payments t ON c.id = t.linked_order_reference_identifier WHERE t.total_transaction_amount > 100",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the total number of customers who are eligible for special promotions and have an accumulated loyalty points balance greater than 1000.",
      "Expected": "SELECT COUNT(*) FROM customers_loyalty_program WHERE eligible_for_special_promotions = true AND accumulated_loyalty_points_balance > 1000;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Calculate the total quantity of inventory that is past the expiry date for all products.",
      "Expected": "SELECT SUM(i.quantity) AS total_expired_quantity FROM inventory i WHERE i.expiry_date < CURRENT_DATE;",
      "Actual": "SELECT SUM(quantity) FROM inventory WHERE expiry_date < CURRENT_DATE",
      "Expected_Results": [
        {
          "total_expired_quantity": 200
        }
      ],
      "Actual_Results": [
        {
          "sum": 200
        }
      ]
    },
    {
      "NL": "Retrieve all the columns from the customerinfo table where the customer's preferred language is 'English'.",
      "Expected": "SELECT * FROM customerinfo WHERE person_preferred_language = 'English';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total amount of all orders shipped to the city of New York and their corresponding product names",
      "Expected": "SELECT SUM(T1.total_amount), T3.product_name FROM orders AS T1 INNER JOIN wishlist AS T3 ON T1.person_customer_id = T3.fk_user_id WHERE T1.shipping_address_city = 'New York' GROUP BY T3.product_name",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of products in each cart for users who have opened their email and have a review rating greater than 3",
      "Expected": "SELECT COUNT(DISTINCT c.fk_product_id) FROM cart c JOIN events e ON c.fk_user_id = e.person_customer_id WHERE e.email_opened = TRUE AND e.review_rating > 3 GROUP BY c.fk_user_id",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the product details and the average review rating for products that have been purchased by customers who have also opened an email.",
      "Expected": "SELECT p.product_display_name, p.aggregate_customer_review_rating FROM products p JOIN events e ON p.unique_product_identifier = e.order_item_id WHERE e.email_opened = TRUE;",
      "Actual": "SELECT p.product_display_name, p.detailed_product_description, AVG(pr.submitted_review_star_rating) AS average_review_rating FROM products p JOIN order_items oi ON p.unique_product_identifier = oi.product_id JOIN orders o ON oi.order_id = o.order_id JOIN events e ON o.order_id = e.order_id JOIN product_reviews_and_ratings pr ON p.unique_product_identifier = pr.referenced_product_identifier WHERE e.email_opened = true GROUP BY p.unique_product_identifier, p.product_display_name, p.detailed_product_description",
      "Expected_Results": [
        {
          "product_display_name": "iPhone 15 Pro",
          "aggregate_customer_review_rating": 4.8
        }
      ],
      "Actual_Results": [
        {
          "product_display_name": "iPhone 15 Pro",
          "detailed_product_description": "Latest flagship smartphone from Apple",
          "average_review_rating": 5.0
        }
      ]
    },
    {
      "NL": "What are the total transaction amounts for each payment method used and the corresponding total billed amounts?",
      "Expected": "SELECT payment_method_used, SUM(total_transaction_amount) as total_transaction_amount, SUM(final_billed_amount) as total_billed_amount FROM transactions_and_payments GROUP BY payment_method_used",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all customers who have a total loyalty points value greater than 1000 and are subscribed to the newsletter.",
      "Expected": "SELECT person_first_name, person_last_name, person_loyalty_points, preferences_newsletter_subscription FROM customerinfo WHERE person_loyalty_points > 1000 AND preferences_newsletter_subscription = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve a comprehensive list of products that have received reviews with a sentiment analysis score higher than 3.5, along with the average number of verified reviews and the total number of edits made to those reviews. Additionally, provide the product display name, primary material composition, and the estimated production cost per unit, considering only those products that have been reviewed more than 100 times.",
      "Expected": "SELECT p.product_display_name, p.primary_material_composition, p.estimated_production_cost_per_unit, AVG(prr.sentiment_analysis_score) AS avg_sentiment_score, SUM(prr.total_number_of_edits_made) AS total_edits_made FROM product_reviews_and_ratings prr JOIN products p ON prr.referenced_product_identifier = p.unique_product_identifier WHERE prr.sentiment_analysis_score > 3.5 GROUP BY p.unique_product_identifier HAVING COUNT(prr.review_unique_identifier) > 100;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of transactions for each campaign and the total revenue generated for each campaign.",
      "Expected": "SELECT T2.campaign_name, COUNT(T1.linked_order_reference_identifier), SUM(T1.final_billed_amount) FROM transactions_and_payments T1 INNER JOIN campaigns T2 ON T1.linked_order_reference_identifier = T2.campaign_id GROUP BY T2.campaign_name",
      "Actual": "SELECT c.campaign_name, COUNT(t.transaction_unique_identifier) AS total_transactions, SUM(t.final_billed_amount) AS total_revenue FROM campaigns c JOIN orders o ON c.campaign_id = o.campaign_id JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier GROUP BY c.campaign_name",
      "Expected_Results": [
        {
          "campaign_name": "New Customer Welcome",
          "count": 1,
          "sum": 774.99
        },
        {
          "campaign_name": "Summer Sale 2024",
          "count": 1,
          "sum": 1249.99
        }
      ],
      "Actual_Results": [
        {
          "campaign_name": "New Customer Welcome",
          "total_transactions": 1,
          "total_revenue": 774.99
        },
        {
          "campaign_name": "Summer Sale 2024",
          "total_transactions": 1,
          "total_revenue": 1249.99
        }
      ]
    },
    {
      "NL": "Get the customer birthday special discount status and the order date for customers who have placed orders with a payment status of 'paid' and have participated in exclusive beta testing.",
      "Expected": "SELECT cltp.customer_birthday_special_discount, ord.order_date FROM customers_loyalty_program cltp JOIN orders ord ON cltp.associated_customer_reference_id = ord.person_customer_id WHERE ord.payment_status = 'paid' AND cltp.participation_in_exclusive_beta_testing = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all premium customers who have an active subscription and a wishlist with more than 1 item.",
      "Expected": "SELECT ci.person_customer_id, ci.person_first_name, ci.person_last_name, w.id AS wishlist_id, COUNT(w.fk_product_id) AS item_count FROM customerinfo ci JOIN wishlist w ON ci.person_customer_id = w.fk_user_id WHERE ci.person_is_premium = true AND ci.account_has_active_subscription = true GROUP BY ci.person_customer_id, ci.person_first_name, ci.person_last_name, w.id HAVING COUNT(w.fk_product_id) > 1;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of reviews left by customers who have a non-premium account.",
      "Expected": "SELECT COUNT(*) AS total_reviews FROM product_reviews_and_ratings pr INNER JOIN customerinfo c ON pr.reviewing_customer_identifier = c.person_customer_id WHERE c.person_is_premium = FALSE;",
      "Actual": "SELECT COUNT(*) FROM product_reviews_and_ratings WHERE reviewing_customer_identifier IN (SELECT person_customer_id FROM customerinfo WHERE person_is_premium = FALSE)",
      "Expected_Results": [
        {
          "total_reviews": 1
        }
      ],
      "Actual_Results": [
        {
          "count": 1
        }
      ]
    },
    {
      "NL": "What are the total amounts and shipping fees for orders placed by customers who have made previous purchases at least five times, and what are the associated review scores of the orders, grouped by the customer's identifier and the order's delivery date?",
      "Expected": "SELECT SUM(total_amount) AS total_order_amount, SUM(shipping_fee) AS total_shipping_fee, AVG(sentiment_analysis_score) AS average_review_score, T1.person_customer_id, T1.delivery_date FROM orders AS T1 INNER JOIN product_reviews_and_ratings AS T2 ON T1.person_customer_id = T2.reviewing_customer_identifier WHERE T2.previous_product_purchases_count >= 5 GROUP BY T1.person_customer_id, T1.delivery_date",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of customers who have more than 1000 accumulated loyalty points balance and are eligible for special promotions.",
      "Expected": "SELECT COUNT(*) FROM customers_loyalty_program WHERE accumulated_loyalty_points_balance > 1000 AND eligible_for_special_promotions = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the details of all customers who have active subscription and are premium.",
      "Expected": "SELECT * FROM customerinfo WHERE account_has_active_subscription = TRUE AND person_is_premium = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Identify the top 5 products with the highest total refund amounts, considering only completed refund requests.",
      "Expected": "SELECT p.unique_product_identifier, p.product_display_name, SUM(r.refund_amount) as total_refund_amount FROM products p JOIN refunds_returns r ON p.unique_product_identifier = r.fk_product_id WHERE r.status = 'completed' GROUP BY p.unique_product_identifier, p.product_display_name ORDER BY total_refund_amount DESC LIMIT 5;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the campaign names and the total amount of each order for all the orders?",
      "Expected": "SELECT T1.campaign_name, T2.total_amount FROM campaigns AS T1 INNER JOIN orders AS T2 ON T1.campaign_id = T2.campaign_id",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total revenue generated from campaigns that have generated more than $1000 in revenue and also list the average shipping cost for orders placed under these campaigns.",
      "Expected": "SELECT c.campaign_name, SUM(o.total_amount) AS total_revenue, AVG(s.shipping_cost) AS average_shipping_cost FROM campaigns c JOIN orders o ON c.campaign_id = o.campaign_id JOIN shipping s ON o.order_id = s.fk_order_id WHERE c.revenue_generated > 1000 GROUP BY c.campaign_name",
      "Actual": "SELECT c.campaign_name, SUM(t.final_billed_amount) AS total_revenue, AVG(o.shipping_fee) AS average_shipping_cost FROM campaigns c JOIN orders o ON c.campaign_id = o.campaign_id JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE c.revenue_generated > 1000 GROUP BY c.campaign_name",
      "Expected_Results": [],
      "Actual_Results": [
        {
          "campaign_name": "New Customer Welcome",
          "total_revenue": 774.99,
          "average_shipping_cost": 12.0
        },
        {
          "campaign_name": "Summer Sale 2024",
          "total_revenue": 1249.99,
          "average_shipping_cost": 15.0
        }
      ]
    },
    {
      "NL": "Retrieve the average sentiment analysis score of reviews for products that have had a promotional discount applied and were added to the wishlist within the last 90 days. Additionally, include the total number of reviews for these products and the average esthetic rating given by customers.",
      "Expected": "SELECT p.product_display_name, AVG(prr.sentiment_analysis_score) AS average_sentiment, COUNT(prr.review_unique_identifier) AS total_reviews, AVG(prr.submitted_review_star_rating) AS average_rating FROM product_reviews_and_ratings prr JOIN products p ON prr.referenced_product_identifier = p.unique_product_identifier JOIN wishlist w ON p.unique_product_identifier = w.fk_product_id WHERE p.percentage_discount_applied > 0 AND w.added_at >= CURRENT_DATE - INTERVAL '90 days' GROUP BY p.product_display_name;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the product names and their corresponding prices in the wishlist where the billing address city is 'New York' in the transactions table?",
      "Expected": "SELECT w.product_name, w.price_at_addition FROM wishlist w JOIN transactions_and_payments tp ON w.fk_user_id = tp.corresponding_customer_reference_identifier WHERE tp.billing_address_city = 'New York'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the top 5 customers based on the total amount spent on orders, along with the number of orders and the average order value, filtering for orders placed on a desktop device.",
      "Expected": "SELECT e.person_customer_id, COUNT(o.order_id) AS number_of_orders, SUM(o.total_amount) AS total_spent, AVG(o.total_amount) AS average_order_value FROM events e JOIN orders o ON e.order_id = o.order_id WHERE e.device_type = 'desktop' GROUP BY e.person_customer_id ORDER BY total_spent DESC LIMIT 5;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the total transaction amount and final billed amount for all transactions where the transaction is marked as fraudulent and the total transaction amount is greater than 1000.",
      "Expected": "SELECT total_transaction_amount, final_billed_amount FROM transactions_and_payments WHERE is_transaction_fraudulent = true AND total_transaction_amount > 1000;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all order IDs and their corresponding shipping costs where the delivery date is after '2020-01-01' and the shipping status is 'delivered'.",
      "Expected": "SELECT T1.order_id, T2.shipping_cost FROM orders AS T1 INNER JOIN shipping AS T2 ON T1.order_id = T2.fk_order_id WHERE T1.delivery_date > '2020-01-01' AND T2.shipping_status = 'delivered';",
      "Actual": "SELECT fk_order_id, shipping_cost FROM shipping WHERE delivery_date > '2020-01-01' AND shipping_status = 'delivered'",
      "Expected_Error": null,
      "Actual_Error": "column \"delivery_date\" does not exist\nLINE 1: ...CT fk_order_id, shipping_cost FROM shipping WHERE delivery_d...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the total number of transactions, the total transaction amount, and the average transaction amount for each supplier's transactions.",
      "Expected": "SELECT s.official_supplier_business_name, COUNT(t.transaction_unique_identifier) AS total_transactions, SUM(t.total_transaction_amount) AS total_transaction_amount, AVG(t.total_transaction_amount) AS average_transaction_amount FROM transactions_and_payments t, suppliers s WHERE t.linked_order_reference_identifier = s.supplier_unique_identifier GROUP BY s.official_supplier_business_name;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average income of customers who have a wishlist and have ordered a product at least once.",
      "Expected": "SELECT AVG(T1.person_income) AS average_income FROM customerinfo AS T1 INNER JOIN cart AS T2 ON T1.person_customer_id = T2.fk_user_id WHERE T1.preferences_wishlist_items > 0 AND T1.preferences_total_orders > 0",
      "Actual": "SELECT AVG(person_income) FROM customerinfo WHERE person_customer_id IN (SELECT fk_user_id FROM wishlist) AND person_customer_id IN (SELECT person_customer_id FROM orders)",
      "Expected_Results": [
        {
          "average_income": 67500.0
        }
      ],
      "Actual_Results": [
        {
          "avg": 67500.0
        }
      ]
    },
    {
      "NL": "Retrieve the total quantity of each product in the inventory with a stock status of 'available' and a stock threshold greater than or equal to 10.",
      "Expected": "SELECT referenced_product_id, SUM(quantity) AS total_quantity FROM inventory WHERE stock_status = 'available' AND stock_threshold >= 10 GROUP BY referenced_product_id;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the total prices and product names of the order items for a specific order?",
      "Expected": "SELECT oi.total_price, p.product_display_name FROM order_items oi JOIN products p ON oi.product_id = p.unique_product_identifier WHERE oi.order_id = 1;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total revenue generated by all campaigns and the total cost per acquisition",
      "Expected": "SELECT SUM(revenue_generated) AS total_revenue, SUM(cost_per_acquisition) AS total_cost_per_acquisition FROM campaigns",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total cart value and the event type for each cart status where the cart status is 'active' and the event type is 'checkout'",
      "Expected": "SELECT SUM(c.total_price), e.event_type FROM cart c JOIN events e ON c.id = e.order_id WHERE c.cart_status = 'active' AND e.event_type = 'checkout' GROUP BY e.event_type",
      "Actual": "SELECT SUM(cart_value) AS total_cart_value, event_type FROM events WHERE cart_status = 'active' AND event_type = 'checkout' GROUP BY event_type",
      "Expected_Error": null,
      "Actual_Error": "column \"cart_status\" does not exist\nLINE 1: ...AS total_cart_value, event_type FROM events WHERE cart_statu...\n                                                             ^\n"
    },
    {
      "NL": "List the details of all cart items that have a total price of more than $100.",
      "Expected": "SELECT * FROM cart WHERE total_price > 100;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Show all products in the cart for the user with user id 123.",
      "Expected": "SELECT id, fk_product_id, price_per_unit, quantity, total_price FROM cart WHERE fk_user_id = 123;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "For each product in the cart, list the product display name, price per unit in the cart, and the total number of units ordered, along with the customer's review sentiment score if available.",
      "Expected": "SELECT p.product_display_name, c.price_per_unit, c.quantity, r.sentiment_analysis_score FROM cart c JOIN products p ON c.fk_product_id = p.unique_product_identifier LEFT JOIN product_reviews_and_ratings r ON p.unique_product_identifier = r.referenced_product_identifier;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total discount amount redeemed by all customers who are eligible for special promotions and have accumulated more than 1000 loyalty points?",
      "Expected": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program WHERE eligible_for_special_promotions = TRUE AND accumulated_loyalty_points_balance > 1000",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the total loyalty points earned by loyalty members who enrolled after '2020-01-01', and what is their average spending threshold?",
      "Expected": "SELECT SUM(lifetime_loyalty_points_earned) AS total_points, AVG(annual_loyalty_spending_threshold) AS avg_spending FROM customers_loyalty_program WHERE initial_enrollment_date > '2020-01-01'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the details of all campaigns that have a target audience of 'young adults' and also find the names of suppliers who have supplied products in these campaigns with the quantity supplied.",
      "Expected": "SELECT c.campaign_name, c.target_audience, s.official_supplier_business_name, ca.quantity FROM campaigns c JOIN cart ca ON c.campaign_id = ca.fk_product_id JOIN suppliers s ON ca.fk_user_id = s.supplier_unique_identifier WHERE c.target_audience = 'young adults'",
      "Actual": "SELECT c.campaign_name, s.official_supplier_business_name, i.total_number_of_products_supplied FROM campaigns c JOIN orders o ON c.campaign_id = o.campaign_id JOIN order_items oi ON o.order_id = oi.order_id JOIN inventory i ON oi.product_id = i.referenced_product_id JOIN suppliers s ON i.supplier_id = s.supplier_unique_identifier WHERE c.target_audience = 'young adults'",
      "Expected_Error": null,
      "Actual_Error": "column i.total_number_of_products_supplied does not exist\nLINE 1: ...campaign_name, s.official_supplier_business_name, i.total_nu...\n                                                             ^\nHINT:  Perhaps you meant to reference the column \"s.total_number_of_products_supplied\".\n"
    },
    {
      "NL": "What is the total reach of each campaign and the total number of reviews submitted by each customer?",
      "Expected": "SELECT SUM(c.total_reach) AS total_campaign_reach, COUNT(prar.review_unique_identifier) AS total_customer_reviews FROM campaigns c JOIN product_reviews_and_ratings prar ON c.campaign_id = prar.referenced_product_identifier GROUP BY prar.reviewing_customer_identifier",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the order ids, customer ids, customer names, customer emails, customer phone numbers, order dates, total prices, discounts applied, tax amounts, shipping fees, estimated delivery dates, and cart statuses of customers who have made orders with total prices greater than 100, discounts applied greater than 10, tax amounts greater than 5, shipping fees greater than 10, and estimated delivery dates within the next 30 days, who are also eligible for special promotions, have loyalty points greater than 1000, have active subscriptions, are not premium, have a gender of 'M', an income greater than 50000, and an average spent per order greater than 100?",
      "Expected": "SELECT T1.id, T2.person_customer_id, T2.person_first_name, T2.person_last_name, T2.person_email, T2.person_phone_number, T1.last_activity_timestamp, T1.total_price, T1.discount_applied, T1.tax_amount, T1.shipping_fee, T1.estimated_delivery_date, T1.cart_status FROM cart AS T1 INNER JOIN customerinfo AS T2 ON T1.fk_user_id = T2.person_customer_id INNER JOIN customers_loyalty_program AS T3 ON T2.person_customer_id = T3.associated_customer_reference_id WHERE T1.total_price > 100 AND T1.discount_applied > 10 AND T1.tax_amount > 5 AND T1.shipping_fee > 10 AND T1.estimated_delivery_date > NOW() AND T1.estimated_delivery_date < NOW() + INTERVAL '30 day' AND T3.eligible_for_special_promotions = TRUE AND T3.accumulated_loyalty_points_balance > 1000 AND T2.account_has_active_subscription = TRUE AND T2.person_is_premium = FALSE AND T2.person_gender = 'M' AND T2.person_income > 50000 AND T2.preferences_avg_spent_per_order > 100",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the order id, total amount, and shipping address for orders where the order status is 'shipped' and the payment status is 'paid'.",
      "Expected": "SELECT order_id, total_amount, shipping_address_street FROM orders WHERE order_status = 'shipped' AND payment_status = 'paid';",
      "Actual": "SELECT order_id, total_amount, shipping_address FROM orders WHERE order_status = 'shipped' AND payment_status = 'paid';",
      "Expected_Error": null,
      "Actual_Error": "column \"shipping_address\" does not exist\nLINE 1: SELECT order_id, total_amount, shipping_address FROM orders ...\n                                       ^\n"
    },
    {
      "NL": "List all events where the device browser is 'Chrome' and the event type is 'purchase'.",
      "Expected": "SELECT * FROM events WHERE device_browser = 'Chrome' AND event_type = 'purchase'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the order ID, order date, and total amount for orders where the shipping fee is greater than 10 and the order status is 'completed'.",
      "Expected": "SELECT order_id, order_date, total_amount FROM orders WHERE shipping_fee > 10 AND order_status = 'completed';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total wishlist quantity for each customer with their loyalty points and preferred language?",
      "Expected": "SELECT SUM(w.quantity), c.person_loyalty_points, c.person_preferred_language FROM wishlist w FULL OUTER JOIN customerinfo c ON w.fk_user_id = c.person_customer_id GROUP BY c.person_loyalty_points, c.person_preferred_language",
      "Actual": "SELECT c.person_customer_id, SUM(w.quantity) AS total_wishlist_quantity, c.person_loyalty_points, c.person_preferred_language FROM customerinfo c JOIN wishlist w ON c.person_customer_id = w.fk_user_id GROUP BY c.person_customer_id, c.person_loyalty_points, c.person_preferred_language",
      "Expected_Results": [
        {
          "sum": null,
          "person_loyalty_points": 300,
          "person_preferred_language": "Spanish"
        },
        {
          "sum": null,
          "person_loyalty_points": 750,
          "person_preferred_language": "English"
        },
        {
          "sum": null,
          "person_loyalty_points": 1000,
          "person_preferred_language": "English"
        },
        {
          "sum": 1,
          "person_loyalty_points": 500,
          "person_preferred_language": "English"
        },
        {
          "sum": 1,
          "person_loyalty_points": 200,
          "person_preferred_language": "English"
        }
      ],
      "Actual_Results": [
        {
          "person_customer_id": 1,
          "total_wishlist_quantity": 1,
          "person_loyalty_points": 500,
          "person_preferred_language": "English"
        },
        {
          "person_customer_id": 2,
          "total_wishlist_quantity": 1,
          "person_loyalty_points": 200,
          "person_preferred_language": "English"
        }
      ]
    },
    {
      "NL": "List all refunds that have been initiated by the customer.",
      "Expected": "SELECT * FROM refunds_returns WHERE refund_initiated_by = 'customer';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total revenue generated from orders placed in the last 30 days.",
      "Expected": "SELECT SUM(total_amount) FROM orders WHERE order_date >= NOW() - INTERVAL '30 days';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the average total amount spent on orders for each campaign type, along with the campaign name, and sort by average total amount in descending order.",
      "Expected": "SELECT c.campaign_type, c.campaign_name, AVG(o.total_amount) AS avg_total_amount FROM orders o JOIN campaigns c ON o.campaign_id = c.campaign_id GROUP BY c.campaign_type, c.campaign_name ORDER BY avg_total_amount DESC",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the shipping carrier for the order with the highest shipping cost, along with the product name and total price for each order item in that order, and also include the customer notes and refund status for any refunds or returns related to those order items.",
      "Expected": "SELECT T3.carrier, T1.product_name, T1.total_price, T4.customer_notes, T4.refund_status FROM order_items AS T1 INNER JOIN shipping AS T3 ON T1.order_id = T3.fk_order_id INNER JOIN refunds_returns AS T4 ON T1.order_item_id = T4.fk_product_id WHERE T3.shipping_cost = ( SELECT MAX(shipping_cost) FROM shipping )",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all customers who have made a purchase in the last 30 days, have a premium account, and have spent an average of more than $50 per order. Also, include details of their most recent event interaction, including the type of event, the device used, and the location of the event.",
      "Expected": "SELECT ci.*, e.event_type, e.device_platform, e.location_city, e.location_country FROM customerinfo ci JOIN events e ON ci.person_customer_id = e.person_customer_id WHERE ci.account_has_active_subscription = true AND ci.person_is_premium = true AND ci.preferences_avg_spent_per_order > 50 AND e.event_timestamp >= CURRENT_DATE - INTERVAL '30 days'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total price of the order items where the item status is 'delivered' and the return period is greater than 30 days?",
      "Expected": "SELECT SUM(total_price) FROM order_items WHERE item_status = 'delivered' AND return_period > 30",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average supplier rating and the supplier's country of operation for suppliers who have supplied more than 1000 products",
      "Expected": "SELECT average_supplier_rating, supplier_country_of_operation FROM suppliers WHERE total_number_of_products_supplied > 1000",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the names and email addresses of all customers who have placed more than one order, along with the shipping address and carrier for their most recent order",
      "Expected": "SELECT c.person_first_name, c.person_last_name, c.person_email, s.shipping_address, s.carrier FROM customerinfo c JOIN orders o ON c.person_customer_id = o.person_customer_id JOIN shipping s ON o.order_id = s.fk_order_id WHERE c.preferences_total_orders > 1 ORDER BY o.order_date DESC LIMIT 1",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List the review unique identifier, review submission date, and submitted review star rating for reviews that have more than 5 helpful votes and are verified.",
      "Expected": "SELECT review_unique_identifier, customer_review_submission_date, submitted_review_star_rating FROM product_reviews_and_ratings WHERE number_of_helpful_votes_received > 5 AND verification_status_of_reviewer = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total amount of refund made by each person with the corresponding wishlist status.",
      "Expected": "SELECT SUM(T1.refund_amount), T2.wishlist_status FROM refunds_returns AS T1 INNER JOIN wishlist AS T2 ON T1.fk_user_id = T2.fk_user_id GROUP BY T2.wishlist_status",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the average final billed amount for transactions that are not fraudulent.",
      "Expected": "SELECT AVG(final_billed_amount) AS avg_final_billed_amount FROM transactions_and_payments WHERE is_transaction_fraudulent = false;",
      "Actual": "SELECT AVG(final_billed_amount) FROM transactions_and_payments WHERE is_transaction_fraudulent = FALSE",
      "Expected_Results": [
        {
          "avg_final_billed_amount": 1012.49
        }
      ],
      "Actual_Results": [
        {
          "avg": 1012.49
        }
      ]
    },
    {
      "NL": "Retrieve the names and email addresses of customers whose loyalty membership will expire within the next 30 days and who have not made any loyalty point redemptions in the last 6 months.",
      "Expected": "SELECT c.person_first_name, c.person_last_name, c.person_email FROM customerinfo c JOIN customers_loyalty_program clp ON c.person_customer_id = clp.associated_customer_reference_id WHERE clp.expiration_date_of_loyalty_points BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '30 days' AND (clp.last_redemption_date IS NULL OR clp.last_redemption_date < CURRENT_DATE - INTERVAL '6 months');",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total amount spent by each customer in the transactions_and_payments table, grouping by customer reference id.",
      "Expected": "SELECT corresponding_customer_reference_identifier, SUM(final_billed_amount) AS total_amount_spent FROM transactions_and_payments GROUP BY corresponding_customer_reference_identifier;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the official business name of each supplier, the average rating of each supplier, and the number of products supplied by each supplier for suppliers that have products which were ordered by customers who have opened an email, sorted by the total number of products supplied in descending order.",
      "Expected": "SELECT T1.official_supplier_business_name, T1.average_supplier_rating, T1.total_number_of_products_supplied FROM suppliers AS T1 INNER JOIN events AS T2 ON T1.supplier_unique_identifier = T2.order_id WHERE T2.event_type = 'email_opened' GROUP BY T1.official_supplier_business_name, T1.average_supplier_rating, T1.total_number_of_products_supplied ORDER BY T1.total_number_of_products_supplied DESC",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total transaction amount for each customer who has made at least one transaction using a digital wallet.",
      "Expected": "SELECT SUM(total_transaction_amount) FROM transactions_and_payments WHERE digital_wallet_used IS NOT NULL GROUP BY corresponding_customer_reference_identifier",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total amount spent and average supplier rating for each order with its corresponding supplier information.",
      "Expected": "SELECT SUM(o.total_amount), AVG(s.average_supplier_rating) FROM orders o LEFT JOIN suppliers s ON o.campaign_id = s.supplier_unique_identifier GROUP BY s.supplier_unique_identifier",
      "Actual": "SELECT o.order_id, SUM(oi.total_price) AS total_amount_spent, s.average_supplier_rating, s.official_supplier_business_name, s.registered_business_address FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.unique_product_identifier JOIN suppliers s ON p.associated_supplier_reference_id = s.supplier_unique_identifier GROUP BY o.order_id, s.average_supplier_rating, s.official_supplier_business_name, s.registered_business_address",
      "Expected_Results": [
        {
          "sum": 3799.98,
          "avg": 4.8
        },
        {
          "sum": 799.99,
          "avg": 4.5
        }
      ],
      "Actual_Results": [
        {
          "order_id": 1,
          "total_amount_spent": 999.99,
          "average_supplier_rating": 4.8,
          "official_supplier_business_name": "Tech Supplies Inc",
          "registered_business_address": "789 Business Ave, Suite 100, San Jose, CA 95110"
        },
        {
          "order_id": 2,
          "total_amount_spent": 1499.99,
          "average_supplier_rating": 4.5,
          "official_supplier_business_name": "Global Electronics",
          "registered_business_address": "456 Industry Rd, Shenzhen"
        },
        {
          "order_id": 3,
          "total_amount_spent": 1999.98,
          "average_supplier_rating": 4.8,
          "official_supplier_business_name": "Tech Supplies Inc",
          "registered_business_address": "789 Business Ave, Suite 100, San Jose, CA 95110"
        }
      ]
    },
    {
      "NL": "List all carts along with the product quantity and total discounted price for each cart where the cart was added more than 30 days ago.",
      "Expected": "SELECT id, fk_product_id, quantity, discounted_total_price FROM cart WHERE added_at < NOW() - INTERVAL '30 days';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total amount spent on all campaigns?",
      "Expected": "SELECT SUM(actual_spent) FROM campaigns",
      "Actual": "SELECT SUM(budget) FROM campaigns",
      "Expected_Results": [
        {
          "sum": 15000.0
        }
      ],
      "Actual_Results": [
        {
          "sum": 175000.0
        }
      ]
    },
    {
      "NL": "Find the total number of orders and total amount spent for each month in 2022.",
      "Expected": "SELECT CAST(EXTRACT(MONTH FROM order_date) AS TEXT) AS month, COUNT(order_id) AS total_orders, SUM(total_amount) AS total_amount FROM orders WHERE CAST(EXTRACT(YEAR FROM order_date) AS TEXT) = '2022' GROUP BY month",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of reviews and the average review sentiment score for each product, ordered by the total number of reviews in descending order.",
      "Expected": "SELECT p.product_display_name, COUNT(pr.review_unique_identifier) AS total_reviews, AVG(pr.sentiment_analysis_score) AS average_sentiment FROM products p JOIN product_reviews_and_ratings pr ON p.unique_product_identifier = pr.referenced_product_identifier GROUP BY p.product_display_name ORDER BY total_reviews DESC;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Calculate the average total amount of orders placed within the campaigns that generated more than $500 in revenue, along with the campaign name.",
      "Expected": "SELECT c.campaign_name, AVG(o.total_amount) AS average_total_amount FROM orders o JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE c.revenue_generated > 500 GROUP BY c.campaign_name;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of wishlist records for each user, along with the total number of products supplied by each supplier, and also find the total reach and revenue generated for each campaign that has a higher budget than the average budget of all campaigns, and also find the shipping cost and shipping status for each shipping record where the shipping address is in the same city as the registered business address of the supplier with the highest average supplier rating, and also find the average supplier rating and official business name for each supplier who operates in the same country as the supplier with the highest average supplier rating.",
      "Expected": "WITH ranked_suppliers AS (SELECT supplier_unique_identifier, total_number_of_products_supplied, average_supplier_rating, official_supplier_business_name, supplier_country_of_operation, registered_business_address, ROW_NUMBER() OVER (ORDER BY average_supplier_rating DESC) AS rank FROM suppliers), top_supplier AS (SELECT supplier_country_of_operation, registered_business_address FROM ranked_suppliers WHERE rank = 1), campaign_stats AS (SELECT campaign_id, total_reach, revenue_generated, budget FROM campaigns WHERE budget > (SELECT AVG(budget) FROM campaigns)), shipping_stats AS (SELECT shipping_cost, shipping_status FROM shipping WHERE shipping_city IN (SELECT registered_business_address FROM top_supplier)), wishlist_stats AS (SELECT fk_user_id, COUNT(*) AS total_wishlist_records FROM wishlist GROUP BY fk_user_id) SELECT ws.fk_user_id, ws.total_wishlist_records, s.total_number_of_products_supplied, cs.total_reach, cs.revenue_generated, ss.shipping_cost, ss.shipping_status, s.average_supplier_rating, s.official_supplier_business_name FROM wishlist_stats ws JOIN suppliers s ON 1 = 1 JOIN top_supplier ts ON s.supplier_country_of_operation = ts.supplier_country_of_operation JOIN campaign_stats cs ON 1 = 1 JOIN shipping_stats ss ON 1 = 1",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Provide the loyalty tier level and preferred language of customers who have purchased products from the wishlist with a total discount amount redeemed of more than $10.",
      "Expected": "SELECT T2.loyalty_program_tier_level, T1.person_preferred_language FROM customerinfo AS T1 INNER JOIN customers_loyalty_program AS T2 ON T1.person_customer_id = T2.associated_customer_reference_id INNER JOIN wishlist AS T3 ON T1.person_customer_id = T3.fk_user_id WHERE T2.total_discount_amount_redeemed > 10",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average order value and total orders for customers who have placed at least one order in the last 30 days, and have a loyalty program status with a balance greater than 100. Also, include the customer's name and occupation in the results.",
      "Expected": "SELECT AVG(o.total_amount), COUNT(o.order_id), ci.person_first_name, ci.person_last_name, ci.person_occupation FROM orders o INNER JOIN customerinfo ci ON o.person_customer_id = ci.person_customer_id WHERE o.order_date >= NOW() - INTERVAL '30 day' AND ci.account_account_balance > 100 GROUP BY ci.person_first_name, ci.person_last_name, ci.person_occupation",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the customer's name and total loyalty points earned from all transactions for customers who have more than 100 loyalty points.",
      "Expected": "SELECT T1.person_first_name, T1.person_last_name, COALESCE(SUM(T2.associated_loyalty_points_earned), 0) FROM customerinfo AS T1 LEFT JOIN transactions_and_payments AS T2 ON T1.person_customer_id = T2.corresponding_customer_reference_identifier WHERE T1.person_loyalty_points > 100 GROUP BY T1.person_first_name, T1.person_last_name",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of loyalty points for customers who have participated in exclusive beta testing and have a loyalty program tier level of 'Platinum'.",
      "Expected": "SELECT SUM(c.person_loyalty_points) FROM customerinfo c JOIN customers_loyalty_program clp ON c.person_customer_id = clp.associated_customer_reference_id WHERE clp.participation_in_exclusive_beta_testing = true AND clp.loyalty_program_tier_level = 'Platinum';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all customers who have made more than 10 orders with their email addresses and total orders count.",
      "Expected": "SELECT person_email, preferences_total_orders FROM customerinfo WHERE preferences_total_orders > 10;",
      "Actual": "SELECT c.person_email, COUNT(o.order_id) AS total_orders FROM customerinfo c JOIN orders o ON c.person_customer_id = o.person_customer_id GROUP BY c.person_email HAVING COUNT(o.order_id) > 10",
      "Expected_Results": [
        {
          "person_email": "john.doe@email.com",
          "preferences_total_orders": 12
        },
        {
          "person_email": "michael.j@email.com",
          "preferences_total_orders": 15
        },
        {
          "person_email": "david.b@email.com",
          "preferences_total_orders": 20
        }
      ],
      "Actual_Results": []
    },
    {
      "NL": "Find the total number of verified reviews written by premium customers who have made more than 5 purchases and have an account balance greater than $500.",
      "Expected": "SELECT COUNT(*) FROM product_reviews_and_ratings AS prr JOIN customerinfo AS ci ON prr.reviewing_customer_identifier = ci.person_customer_id WHERE prr.verification_status_of_reviewer = TRUE AND ci.person_is_premium = TRUE AND ci.preferences_total_orders > 5 AND ci.account_account_balance > 500;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the names of the campaigns with a budget greater than $10,000, along with the names of the suppliers who supply products with a quantity greater than 50 and have an average rating greater than 3, and the total revenue generated by these campaigns.",
      "Expected": "SELECT T3.campaign_name, T5.official_supplier_business_name, SUM(T3.revenue_generated) FROM campaigns AS T1 INNER JOIN campaigns AS T3 ON T1.campaign_id = T3.campaign_id INNER JOIN inventory AS T4 ON T3.campaign_id = T4.referenced_product_id INNER JOIN suppliers AS T5 ON T4.supplier_id = T5.supplier_unique_identifier WHERE T3.budget > 10000 AND T4.quantity > 50 AND T5.average_supplier_rating > 3 GROUP BY T3.campaign_name, T5.official_supplier_business_name",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the names of the suppliers who supply products with a quantity greater than 100 and have an average rating greater than 4, along with the product names and their current stock status.",
      "Expected": "SELECT T3.official_supplier_business_name, T2.referenced_product_id, T2.stock_status FROM inventory AS T1 INNER JOIN inventory AS T2 ON T1.id = T2.id INNER JOIN suppliers AS T3 ON T2.supplier_id = T3.supplier_unique_identifier WHERE T2.quantity > 100 AND T3.average_supplier_rating > 4",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the order status and total amount for all orders with shipping address in California.",
      "Expected": "SELECT order_status, SUM(total_amount) AS total_amount FROM orders WHERE shipping_address_state = 'California' GROUP BY order_status",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Fetch all items in the wishlist for the user with user id 123.",
      "Expected": "SELECT id, fk_product_id, price_at_addition, discount_at_addition, quantity FROM wishlist WHERE fk_user_id = 123;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total number of products, along with their names, and the quantity in stock for products with a stock status of 'in stock'.",
      "Expected": "SELECT T2.product_display_name, T1.quantity, COUNT(T1.referenced_product_id) FROM inventory AS T1 INNER JOIN products AS T2 ON T1.referenced_product_id = T2.unique_product_identifier WHERE T1.stock_status = 'in stock' GROUP BY T2.product_display_name, T1.quantity",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total number of helpful votes received by each product and the total price of each order item for the product?",
      "Expected": "SELECT SUM(prar.number_of_helpful_votes_received) AS total_helpful_votes, SUM(oi.total_price) AS total_order_item_price FROM product_reviews_and_ratings prar JOIN order_items oi ON prar.referenced_product_identifier = oi.product_id GROUP BY oi.product_id",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the list of customers who have earned the most loyalty points in the last year, along with their total spending, average order value, and the number of orders they have placed, considering only customers who have made at least 5 purchases and have a loyalty tier level of 'Gold' or higher.",
      "Expected": "SELECT cl.associated_customer_reference_id, SUM(o.total_amount), AVG(o.total_amount), COUNT(DISTINCT o.order_id) FROM orders o JOIN customers_loyalty_program cl ON o.person_customer_id = cl.associated_customer_reference_id JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE cl.loyalty_program_tier_level IN ('Gold', 'Platinum') AND o.order_date > NOW() - INTERVAL '1 year' GROUP BY cl.associated_customer_reference_id HAVING COUNT(DISTINCT o.order_id) >= 5 ORDER BY SUM(cl.accumulated_loyalty_points_balance) DESC",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the number of orders that have been cancelled or returned, along with the total amount of discounts applied to these orders, and the average review rating for these orders. Include only orders made by customers who have also completed a survey. Group the results by the customer ID.",
      "Expected": "SELECT o.person_customer_id, COUNT(o.order_id), SUM(o.discount_applied), AVG(e.review_rating) FROM orders o INNER JOIN events e ON o.order_id = e.order_id INNER JOIN refunds_returns rr ON o.order_id = rr.fk_order_id WHERE o.order_status IN ('Cancelled', 'Returned') AND e.event_type = 'Survey Completed' GROUP BY o.person_customer_id",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve detailed product information for all items that have been part of orders shipped after January 1, 2023, with a promotional discount greater than 20%, and which have a shipping status indicating they are delivered, grouping the results by product category and listing the count of such products in each category.",
      "Expected": "SELECT p.product_category_primary, COUNT(*) as product_count FROM products p JOIN order_items oi ON p.unique_product_identifier = oi.product_id JOIN shipping s ON oi.order_id = s.fk_order_id WHERE s.shipped_date > '2023-01-01' AND p.promotional_discounted_price > 0.20 AND s.shipping_status = 'Delivered' GROUP BY p.product_category_primary;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the order ids of the orders where the tax amount is more than 100 and the item status is delivered in the order items",
      "Expected": "SELECT T1.order_id FROM order_items AS T1 INNER JOIN orders AS T2 ON T1.order_id = T2.order_id WHERE T2.tax_amount > 100 AND T1.item_status = 'delivered'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total discount amount redeemed by customers who have a lifetime loyalty points earned greater than 1000 and have an anniversary reward voucher status of True?",
      "Expected": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program WHERE lifetime_loyalty_points_earned > 1000 AND anniversary_reward_voucher_status = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the list of customer names, loyalty program tier levels, and total amount spent by customers who have participated in exclusive beta testing and have made orders with a total amount greater than 100",
      "Expected": "SELECT ci.person_first_name, ci.person_last_name, clp.loyalty_program_tier_level, SUM(o.total_amount) FROM customers_loyalty_program clp JOIN customerinfo ci ON clp.associated_customer_reference_id = ci.person_customer_id JOIN orders o ON ci.person_customer_id = o.person_customer_id WHERE clp.participation_in_exclusive_beta_testing = TRUE AND o.total_amount > 100 GROUP BY ci.person_first_name, ci.person_last_name, clp.loyalty_program_tier_level",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List the product identifiers and review submission dates of reviews with more than 10 helpful votes.",
      "Expected": "SELECT T1.referenced_product_identifier, T1.customer_review_submission_date FROM product_reviews_and_ratings AS T1 WHERE T1.number_of_helpful_votes_received > 10",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the total impressions and clicks for each campaign name where the campaign has a start date after '2020-01-01' and there is at least one order item with a matching product id in the inventory table?",
      "Expected": "SELECT c.campaign_name, SUM(c.impressions), SUM(c.clicks) FROM campaigns c JOIN inventory i ON c.campaign_id = i.referenced_product_id WHERE c.start_date > '2020-01-01' GROUP BY c.campaign_name",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the average amount spent per order by customers who have more than 100 loyalty points?",
      "Expected": "SELECT AVG(preferences_avg_spent_per_order) FROM customerinfo WHERE person_loyalty_points > 100",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all reviews where the review's star rating is above 4 and the review is flagged as inappropriate, showing the review text, product identifier, and customer identifier.",
      "Expected": "SELECT textual_review_feedback, referenced_product_identifier, reviewing_customer_identifier FROM product_reviews_and_ratings WHERE submitted_review_star_rating > 4 AND flagged_as_inappropriate = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all transactions made by customers who have purchased a product that is currently in stock and has a low inventory turnover rate, and also show the corresponding shipping details for those transactions, including the estimated delivery date and shipping cost.",
      "Expected": "SELECT t.transaction_unique_identifier, t.corresponding_customer_reference_identifier, t.transaction_date_and_time, s.estimated_delivery, s.shipping_cost FROM transactions_and_payments t JOIN shipping s ON t.linked_order_reference_identifier = s.fk_order_id JOIN inventory i ON t.linked_order_reference_identifier = i.referenced_product_id WHERE i.inventory_turnover_rate < 0.5 AND i.stock_status = 'In Stock'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Which events have been triggered by customers who have placed an order with a total amount greater than $100 and what is the average time spent by these customers during the events?",
      "Expected": "SELECT T3.event_type, AVG(T3.time_spent_seconds) FROM orders AS T1 INNER JOIN customerinfo AS T2 ON T1.person_customer_id = T2.person_customer_id INNER JOIN events AS T3 ON T2.person_customer_id = T3.person_customer_id WHERE T1.total_amount > 100 GROUP BY T3.event_type",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average conversion rate and ROI of all campaigns that had a positive review sentiment score (greater than 0.5) for at least one of their associated products. Also, include the campaign name and status in the results.",
      "Expected": "SELECT c.campaign_name, c.campaign_status, AVG(c.conversions * 1.0 / c.clicks) AS avg_conversion_rate, AVG(c.roi) AS avg_roi FROM campaigns c JOIN product_reviews_and_ratings prr ON c.campaign_id = prr.referenced_product_identifier WHERE prr.sentiment_analysis_score > 0.5 GROUP BY c.campaign_name, c.campaign_status;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total revenue generated across all campaigns?",
      "Expected": "SELECT SUM(revenue_generated) FROM campaigns;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all the orders whose shipment status is not shipped and their respective customers' total wishlist value exceeds 1000, for each customer display their name, order id, order date, and total wishlist value.",
      "Expected": "SELECT DISTINCT T2.order_id, T2.order_date, T1.fk_user_id, SUM(T1.price_at_addition) FROM wishlist AS T1 INNER JOIN orders AS T2 ON T1.fk_user_id = T2.person_customer_id INNER JOIN shipping AS T3 ON T2.order_id = T3.fk_order_id WHERE T3.shipping_status != 'shipped' GROUP BY T2.order_id, T1.fk_user_id HAVING SUM(T1.price_at_addition) > 1000;",
      "Actual": "SELECT ci.person_first_name, ci.person_last_name, o.order_id, o.order_date, SUM(w.price_at_addition * w.quantity) AS total_wishlist_value FROM customerinfo ci JOIN orders o ON ci.person_customer_id = o.person_customer_id JOIN wishlist w ON ci.person_customer_id = w.fk_user_id WHERE o.shipping_status != 'shipped' GROUP BY ci.person_customer_id, o.order_id, o.order_date HAVING SUM(w.price_at_addition * w.quantity) > 1000",
      "Expected_Error": null,
      "Actual_Error": "column o.shipping_status does not exist\nLINE 1: ...t w ON ci.person_customer_id = w.fk_user_id WHERE o.shipping...\n                                                             ^\n"
    },
    {
      "NL": "Get the total number of orders and total spent for customers who have a newsletter subscription",
      "Expected": "SELECT SUM(preferences_total_orders), SUM(preferences_avg_spent_per_order) FROM customerinfo WHERE preferences_newsletter_subscription = TRUE",
      "Actual": "SELECT COUNT(o.order_id) AS total_orders, SUM(o.total_amount) AS total_spent FROM customerinfo ci JOIN orders o ON ci.person_customer_id = o.person_customer_id WHERE ci.preferences_newsletter_subscription = true",
      "Expected_Results": [
        {
          "sum": 1800.0
        }
      ],
      "Actual_Results": [
        {
          "total_orders": 3,
          "total_spent": 4599.97
        }
      ]
    },
    {
      "NL": "Get the total number of orders for customers who have more than 100 loyalty points.",
      "Expected": "SELECT COUNT(person_customer_id) FROM customerinfo WHERE person_loyalty_points > 100",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total accumulated loyalty points for customers who have participated in exclusive beta testing and have ordered products with a promotional discount greater than 10%.",
      "Expected": "SELECT clp.associated_customer_reference_id, SUM(clp.accumulated_loyalty_points_balance) AS total_loyalty_points \nFROM customers_loyalty_program clp\nJOIN cart c ON clp.associated_customer_reference_id = c.fk_user_id\nJOIN products p ON c.fk_product_id = p.unique_product_identifier\nWHERE clp.participation_in_exclusive_beta_testing = TRUE AND p.percentage_discount_applied > 10\nGROUP BY clp.associated_customer_reference_id;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of wishlist items for all customers who have  purchased a product with the category 'Fashion', along with the number of order items for each customer.",
      "Expected": "SELECT SUM(T1.preferences_wishlist_items), COUNT(T3.order_id) FROM customerinfo T1 INNER JOIN order_items T2 ON T1.person_customer_id = T2.order_id INNER JOIN events T3 ON T3.person_customer_id = T1.person_customer_id WHERE T2.product_name = 'Fashion'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all products that have a higher standard retail price and are also perishable, along with their corresponding inventory quantities and last restock dates.",
      "Expected": "SELECT p.standard_retail_price_including_tax, p.perishable_product_flag, i.quantity, i.last_restock_date FROM products p JOIN inventory i ON p.unique_product_identifier = i.referenced_product_id WHERE p.perishable_product_flag = TRUE AND p.standard_retail_price_including_tax > (SELECT AVG(standard_retail_price_including_tax) FROM products)",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all reviews with a rating of 5 and a verification status of true, along with the corresponding product identifier and review submission date.",
      "Expected": "SELECT referenced_product_identifier, customer_review_submission_date FROM product_reviews_and_ratings WHERE submitted_review_star_rating = 5 AND verification_status_of_reviewer = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total amount of all orders where the order status is 'delivered' and the customer has clicked on a push notification.",
      "Expected": "SELECT SUM(o.total_amount) FROM orders o JOIN events e ON o.order_id = e.order_id WHERE o.order_status = 'delivered' AND e.push_notification_clicked = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the list of products that have been added to a user's wishlist more than 5 times and have a low stock status, including the product's name, the supplier's business name, and the last updated stock date.",
      "Expected": "SELECT p.product_display_name, s.official_supplier_business_name, i.last_updated FROM products p JOIN inventory i ON p.unique_product_identifier = i.referenced_product_id JOIN suppliers s ON i.supplier_id = s.supplier_unique_identifier JOIN wishlist w ON p.unique_product_identifier = w.fk_product_id WHERE i.stock_status = 'Low' GROUP BY p.product_display_name, s.official_supplier_business_name, i.last_updated HAVING COUNT(w.fk_product_id) > 5;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the product name and the actual_spent of the campaigns for products with total_reach greater than 100?",
      "Expected": "SELECT T2.product_display_name, T1.actual_spent FROM campaigns AS T1 INNER JOIN products AS T2 ON T1.target_audience = T2.product_category_primary WHERE T1.total_reach > 100;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the business names of suppliers from the USA?",
      "Expected": "SELECT official_supplier_business_name FROM suppliers WHERE supplier_country_of_operation = 'USA'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all customers who are eligible for special promotions and have accumulated more than 1000 loyalty points, along with their first and last names and email addresses.",
      "Expected": "SELECT clp.eligible_for_special_promotions, ci.person_first_name, ci.person_last_name, ci.person_email FROM customers_loyalty_program clp JOIN customerinfo ci ON clp.associated_customer_reference_id = ci.person_customer_id WHERE clp.eligible_for_special_promotions = true AND clp.accumulated_loyalty_points_balance > 1000;",
      "Actual": "SELECT ci.person_first_name, ci.person_last_name, ci.person_email FROM customerinfo ci JOIN customers_loyalty_program clp ON ci.person_customer_id = clp.associated_customer_reference_id WHERE clp.eligible_for_special_promotions = true AND clp.accumulated_loyalty_points_balance > 1000",
      "Expected_Results": [
        {
          "eligible_for_special_promotions": true,
          "person_first_name": "John",
          "person_last_name": "Doe",
          "person_email": "john.doe@email.com"
        },
        {
          "eligible_for_special_promotions": true,
          "person_first_name": "Jane",
          "person_last_name": "Smith",
          "person_email": "jane.smith@email.com"
        }
      ],
      "Actual_Results": [
        {
          "person_first_name": "John",
          "person_last_name": "Doe",
          "person_email": "john.doe@email.com"
        },
        {
          "person_first_name": "Jane",
          "person_last_name": "Smith",
          "person_email": "jane.smith@email.com"
        }
      ]
    },
    {
      "NL": "Find the average quantity and total price of products in the cart for each product where the cart status is 'Active', and the recommended products are not null, and the wishlist flag is true, and the product id is in the wishlist. Group the result by product id and calculate the standard deviation of the total price for each group.",
      "Expected": "SELECT T2.fk_product_id, AVG(T1.quantity) AS average_quantity, AVG(T1.total_price) AS average_total_price, stddev(T1.total_price) AS std_dev_total_price FROM cart AS T1 INNER JOIN wishlist AS T2 ON T1.fk_product_id = T2.fk_product_id WHERE T1.cart_status = 'Active' AND T1.recommended_products IS NOT NULL AND T1.wishlist_flag = true AND T2.fk_product_id = T1.fk_product_id GROUP BY T2.fk_product_id",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average time spent by customers on the website who have made a purchase and have also completed a survey.",
      "Expected": "SELECT AVG(e.time_spent_seconds) FROM events e JOIN cart c ON e.person_customer_id = c.fk_user_id WHERE e.event_type = 'purchase' AND e.survey_completed = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average review rating and the sum of cart value for each event type.",
      "Expected": "SELECT event_type, AVG(review_rating) AS avg_review_rating, SUM(cart_value) AS sum_cart_value FROM events GROUP BY event_type",
      "Actual": "SELECT e.event_type, AVG(pr.submitted_review_star_rating) AS average_review_rating, SUM(e.cart_value) AS total_cart_value FROM events e LEFT JOIN product_reviews_and_ratings pr ON e.person_customer_id = pr.reviewing_customer_identifier GROUP BY e.event_type",
      "Expected_Results": [
        {
          "event_type": "Cart Add",
          "avg_review_rating": null,
          "sum_cart_value": 1499.99
        },
        {
          "event_type": "Purchase",
          "avg_review_rating": null,
          "sum_cart_value": 999.99
        },
        {
          "event_type": "Review",
          "avg_review_rating": 5.0,
          "sum_cart_value": null
        }
      ],
      "Actual_Results": [
        {
          "event_type": "Cart Add",
          "average_review_rating": 4.0,
          "total_cart_value": 1499.99
        },
        {
          "event_type": "Purchase",
          "average_review_rating": 5.0,
          "total_cart_value": 999.99
        },
        {
          "event_type": "Review",
          "average_review_rating": null,
          "total_cart_value": null
        }
      ]
    },
    {
      "NL": "Give me the total amount of sales made in the last month from the 'orders' table.",
      "Expected": "SELECT SUM(total_amount) AS total_sales FROM orders WHERE order_date >= (CURRENT_DATE - INTERVAL '1 month');",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total quantity of products in the inventory for each order and the order status",
      "Expected": "SELECT SUM(T2.quantity), T1.order_status FROM orders AS T1 INNER JOIN wishlist AS T3 ON T1.person_customer_id = T3.fk_user_id INNER JOIN inventory AS T2 ON T3.fk_product_id = T2.referenced_product_id GROUP BY T1.order_status",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total loyalty points balance and the total discount amount redeemed for customers with a loyalty membership?",
      "Expected": "SELECT SUM(accumulated_loyalty_points_balance) , SUM(total_discount_amount_redeemed) FROM customers_loyalty_program",
      "Actual": "SELECT SUM(accumulated_loyalty_points_balance) AS total_loyalty_points, SUM(total_discount_amount_redeemed) AS total_discount_redeemed FROM customers_loyalty_program",
      "Expected_Results": [
        {
          "sum": 400.0
        }
      ],
      "Actual_Results": [
        {
          "total_loyalty_points": 7500,
          "total_discount_redeemed": 400.0
        }
      ]
    },
    {
      "NL": "Find all events for orders where the order status is 'cancelled' and the payment status is 'pending' and the total amount is less than 50, along with the event type, the device platform, and the location city, and also find the campaign name for each order.",
      "Expected": "SELECT e.event_type, e.device_platform, e.location_city, c.campaign_name FROM events e JOIN orders o ON e.order_id = o.order_id JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE o.order_status = 'cancelled' AND o.payment_status = 'pending' AND o.total_amount < 50",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the product name, standard retail price, and expected lead time for products in the 'Electronics' category with a product status of active, an estimated production cost per unit less than 50, and a net weight greater than 1 kilogram.",
      "Expected": "SELECT p.product_display_name, p.standard_retail_price_including_tax, p.expected_lead_time_in_business_days FROM products p WHERE p.product_category_primary = 'Electronics' AND p.active_product_status = true AND p.estimated_production_cost_per_unit < 50 AND p.net_weight_in_kilograms > 1",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List the products with a featured product flag set to true, along with their associated supplier reference id, sorted by their standard retail price in descending order.",
      "Expected": "SELECT unique_product_identifier, associated_supplier_reference_id, standard_retail_price_including_tax FROM products WHERE featured_product_flag = TRUE ORDER BY standard_retail_price_including_tax DESC;",
      "Actual": "SELECT product_display_name, associated_supplier_reference_id FROM products WHERE featured_product_flag = true ORDER BY standard_retail_price_including_tax DESC",
      "Expected_Results": [
        {
          "unique_product_identifier": 2,
          "associated_supplier_reference_id": 2,
          "standard_retail_price_including_tax": 1499.99
        },
        {
          "unique_product_identifier": 1,
          "associated_supplier_reference_id": 1,
          "standard_retail_price_including_tax": 999.99
        }
      ],
      "Actual_Results": [
        {
          "product_display_name": "Samsung 4K Smart TV",
          "associated_supplier_reference_id": 2
        },
        {
          "product_display_name": "iPhone 15 Pro",
          "associated_supplier_reference_id": 1
        }
      ]
    },
    {
      "NL": "Retrieve the names and descriptions of products that are currently in the cart of users who have participated in the exclusive beta testing of the loyalty program and have a loyalty membership unique identifier greater than 1000.",
      "Expected": "SELECT p.product_display_name, p.detailed_product_description FROM products p JOIN cart c ON p.unique_product_identifier = c.fk_product_id JOIN customers_loyalty_program clp ON c.fk_user_id = clp.associated_customer_reference_id WHERE clp.participation_in_exclusive_beta_testing = TRUE AND clp.loyalty_membership_unique_identifier > 1000;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Show the total number of reviews submitted by customers who have flagged their reviews as inappropriate.",
      "Expected": "SELECT COUNT(*) FROM product_reviews_and_ratings WHERE flagged_as_inappropriate = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List the average star rating of reviews that were submitted by customers who have previously purchased the product more than 3 times.",
      "Expected": "SELECT AVG(submitted_review_star_rating) FROM product_reviews_and_ratings WHERE previous_product_purchases_count > 3;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the average time spent by customers in seconds on the website who are premium members.",
      "Expected": "SELECT AVG(time_spent_seconds) AS average_time_spent FROM events WHERE person_customer_id IN (SELECT person_customer_id FROM customerinfo WHERE person_is_premium = true)",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average lifetime loyalty points earned by customers who have exceeded their annual loyalty spending threshold and have a loyalty program tier level of 'gold'",
      "Expected": "SELECT AVG(lifetime_loyalty_points_earned) FROM customers_loyalty_program WHERE annual_loyalty_spending_threshold < lifetime_loyalty_points_earned AND loyalty_program_tier_level = 'gold'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the order IDs and total amounts of orders placed by customers who have made previous purchases of at least 5 products.",
      "Expected": "SELECT orders.order_id, orders.total_amount FROM orders INNER JOIN product_reviews_and_ratings ON orders.person_customer_id = product_reviews_and_ratings.reviewing_customer_identifier WHERE product_reviews_and_ratings.previous_product_purchases_count >= 5;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List the loyalty points balance of all customers who have products in the wishlist with a price greater than $100.",
      "Expected": "SELECT T1.accumulated_loyalty_points_balance FROM customers_loyalty_program AS T1 JOIN wishlist AS T2 ON T1.associated_customer_reference_id = T2.fk_user_id WHERE T2.price_at_addition > 100",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total price of each order in the cart, along with the campaign name, start date, and end date of the corresponding campaign, using the estimated delivery date to join the two tables.",
      "Expected": "SELECT T1.total_price, T2.campaign_name, T2.start_date, T2.end_date FROM cart T1 INNER JOIN campaigns T2 ON T1.estimated_delivery_date BETWEEN T2.start_date AND T2.end_date",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the event type, device type, and location city for events where the cart value was greater than 500 and the event occurred in the year 2022",
      "Expected": "SELECT event_type, device_type, location_city FROM events WHERE cart_value > 500 AND EXTRACT(YEAR FROM event_timestamp) = 2022;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the order details of orders with a total amount greater than 1000 that were shipped from the United States?",
      "Expected": "SELECT o.* FROM orders o JOIN shipping s ON o.order_id = s.fk_order_id WHERE o.total_amount > 1000 AND s.shipping_country = 'United States'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the list of customers who have added items to their wishlist at least twice, along with the total amount spent by these customers on transactions that included a gift card or store credit usage, along with the average transaction amount and the device platform used for the last event they triggered, filtering for customers who have enabled email notifications and have a loyalty points balance above 1000.",
      "Expected": "SELECT ci.person_customer_id, ci.person_first_name, ci.person_last_name, ci.securityemail_notifications, ci.person_loyalty_points, SUM(tp.final_billed_amount) AS total_spent_with_gifts, AVG(tp.final_billed_amount) AS average_transaction_amount, e.device_platform, e.event_timestamp AS last_event_time FROM customerinfo ci JOIN transactions_and_payments tp ON ci.person_customer_id = tp.corresponding_customer_reference_identifier JOIN events e ON ci.person_customer_id = e.person_customer_id JOIN wishlist w ON ci.person_customer_id = w.fk_user_id WHERE ci.securityemail_notifications = TRUE AND ci.person_loyalty_points > 1000 AND tp.gift_card_or_store_credit_usage = TRUE GROUP BY ci.person_customer_id, ci.person_first_name, ci.person_last_name, ci.securityemail_notifications, ci.person_loyalty_points, e.device_platform, e.event_timestamp HAVING COUNT(w.id) >= 2 ORDER BY total_spent_with_gifts DESC;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the product id, quantity, and total price for all order items in orders where the product name contains the word 'Laptop', the order status is 'Pending', and the shipping address is located in a city that starts with the letter 'N'. Also, find the total number of products supplied by suppliers who are located in the same city and country of operation as the shipping address. Order the results in descending order of total price.",
      "Expected": "WITH order_items_filtered AS ( SELECT order_item_id, product_id, quantity, total_price, order_id FROM order_items WHERE product_name LIKE '%Laptop%' ), orders_filtered AS ( SELECT order_id, shipping_address_city, shipping_address_country FROM orders WHERE order_status = 'Pending' AND shipping_address_city LIKE 'N%' ), suppliers_filtered AS ( SELECT total_number_of_products_supplied, registered_business_address, supplier_country_of_operation FROM suppliers ) SELECT order_items_filtered.product_id, order_items_filtered.quantity, order_items_filtered.total_price, SUM(suppliers_filtered.total_number_of_products_supplied) AS total_products_supplied FROM order_items_filtered INNER JOIN orders_filtered ON orders_filtered.order_id = order_items_filtered.order_id INNER JOIN suppliers_filtered ON suppliers_filtered.registered_business_address LIKE orders_filtered.shipping_address_city AND suppliers_filtered.supplier_country_of_operation = orders_filtered.shipping_address_country GROUP BY order_items_filtered.product_id, order_items_filtered.quantity, order_items_filtered.total_price ORDER BY order_items_filtered.total_price DESC;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of active subscriptions and the average loyalty points of customers who have an active subscription and a premium account, grouped by city.",
      "Expected": "SELECT address_city, COUNT(account_has_active_subscription) AS total_active_subscriptions, AVG(person_loyalty_points) AS avg_loyalty_points FROM customerinfo WHERE account_has_active_subscription = TRUE AND person_is_premium = TRUE GROUP BY address_city;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the names of all suppliers who have supplied products to campaigns with a budget greater than 1000 and also find the campaign names and their start dates.",
      "Expected": "SELECT s.official_supplier_business_name, c.campaign_name, c.start_date FROM suppliers s JOIN cart ca ON s.supplier_unique_identifier = ca.fk_user_id JOIN campaigns c ON ca.fk_product_id = c.campaign_id WHERE c.budget > 1000",
      "Actual": "SELECT s.official_supplier_business_name, c.campaign_name, c.start_date FROM suppliers s JOIN orders o ON s.supplier_unique_identifier = o.campaign_id JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE c.budget > 1000",
      "Expected_Results": [
        {
          "official_supplier_business_name": "Tech Supplies Inc",
          "campaign_name": "Summer Sale 2024",
          "start_date": "2024-06-01T00:00:00"
        },
        {
          "official_supplier_business_name": "Global Electronics",
          "campaign_name": "New Customer Welcome",
          "start_date": "2024-01-01T00:00:00"
        }
      ],
      "Actual_Results": [
        {
          "official_supplier_business_name": "Tech Supplies Inc",
          "campaign_name": "Summer Sale 2024",
          "start_date": "2024-06-01T00:00:00"
        },
        {
          "official_supplier_business_name": "Tech Supplies Inc",
          "campaign_name": "Summer Sale 2024",
          "start_date": "2024-06-01T00:00:00"
        },
        {
          "official_supplier_business_name": "Global Electronics",
          "campaign_name": "New Customer Welcome",
          "start_date": "2024-01-01T00:00:00"
        }
      ]
    },
    {
      "NL": "Find the average shipping cost for orders that have been shipped from the city of New York.",
      "Expected": "SELECT AVG(shipping_cost) FROM shipping WHERE shipping_city = 'New York' AND shipped_date IS NOT NULL",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all events that occurred on orders which have been shipped to the United States, including the event timestamp and the shipping date.",
      "Expected": "SELECT e.event_timestamp, s.shipped_date FROM events e JOIN shipping s ON e.order_id = s.fk_order_id WHERE s.shipping_country = 'United States';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Which customers initiated a refund for their order and how much was the refund amount?",
      "Expected": "SELECT T1.person_customer_id, T2.refund_amount FROM orders AS T1 INNER JOIN refunds_returns AS T2 ON T1.order_id = T2.fk_order_id WHERE T2.refund_initiated_by = 'customer'",
      "Actual": "SELECT customerinfo.person_first_name, customerinfo.person_last_name, refunds_returns.refund_amount FROM customerinfo JOIN refunds_returns ON customerinfo.person_customer_id = refunds_returns.fk_user_id",
      "Expected_Results": [],
      "Actual_Results": [
        {
          "person_first_name": "John",
          "person_last_name": "Doe",
          "refund_amount": 999.99
        },
        {
          "person_first_name": "Jane",
          "person_last_name": "Smith",
          "refund_amount": 1499.99
        }
      ]
    },
    {
      "NL": "What is the total price of all order items with a warranty period of more than 30 days?",
      "Expected": "SELECT SUM(total_price) FROM order_items WHERE warranty_period > 30",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of reviews and the average rating for products that have been discontinued.",
      "Expected": "SELECT p.product_display_name, COUNT(prar.review_unique_identifier) AS total_reviews, AVG(prar.submitted_review_star_rating) AS avg_rating FROM product_reviews_and_ratings AS prar JOIN products AS p ON prar.referenced_product_identifier = p.unique_product_identifier WHERE p.official_product_discontinuation_date IS NOT NULL GROUP BY p.product_display_name;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of orders that have a payment status of paid and were created in the year 2022.",
      "Expected": "SELECT COUNT(order_id) FROM orders WHERE EXTRACT(YEAR FROM created_at) = 2022 AND payment_status = 'paid'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the total amount spent by customers in the past year, grouped by their preferred language.",
      "Expected": "SELECT person_preferred_language, SUM(T.total_transaction_amount) FROM customerinfo AS C INNER JOIN transactions_and_payments AS T ON C.person_customer_id = T.corresponding_customer_reference_identifier WHERE T.transaction_date_and_time > NOW() - INTERVAL '1 year' GROUP BY C.person_preferred_language",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the product names from order items along with the order date for those orders that have a promotional offer applied and the payment method used is 'Credit Card'.",
      "Expected": "SELECT oi.product_name, o.order_date FROM order_items oi JOIN orders o ON oi.order_id = o.order_id JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE t.promotional_offer_applied = true AND t.payment_method_used = 'Credit Card';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total revenue generated and campaign name from the campaigns table and the shipping cost from the shipping table where the campaign status is 'active' and the shipping status is 'shipped'.",
      "Expected": "SELECT c.revenue_generated, c.campaign_name, s.shipping_cost FROM campaigns c JOIN shipping s ON c.campaign_id = s.fk_order_id WHERE c.campaign_status = 'active' AND s.shipping_status = 'shipped'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of units ordered and the estimated production cost for each product listed in the order_items table, joining with the products table to include the cost.",
      "Expected": "SELECT SUM(order_items.quantity) AS total_units_ordered, products.estimated_production_cost_per_unit FROM order_items JOIN products ON order_items.product_id = products.unique_product_identifier GROUP BY products.estimated_production_cost_per_unit;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the average accumulated loyalty points balance across all customers who have participated in exclusive beta testing?",
      "Expected": "SELECT AVG(accumulated_loyalty_points_balance) FROM customers_loyalty_program WHERE participation_in_exclusive_beta_testing = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the shipping address, shipping city, shipping state, shipping zipcode, and estimated delivery date for each order that has a total discount amount redeemed greater than 100, and has a free shipping eligibility as true, and the order's shipping record has a shipping status as 'shipped', and the order's shipping record has a tracking number that starts with 'ABC', and the order's shipping record has a shipping cost greater than 20",
      "Expected": "SELECT T3.shipping_address, T3.shipping_city, T3.shipping_state, T3.shipping_zipcode, T3.estimated_delivery FROM customers_loyalty_program AS T1 INNER JOIN shipping AS T3 ON T1.associated_customer_reference_id = T3.fk_order_id WHERE T1.total_discount_amount_redeemed > 100 AND T1.free_shipping_eligibility IS TRUE AND T3.shipping_status = 'shipped' AND T3.tracking_number LIKE 'ABC%' AND T3.shipping_cost > 20",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all refunds along with their processing dates, refund amounts, and reasons, where the refund amount is greater than $100.",
      "Expected": "SELECT processed_date, refund_amount, reason FROM refunds_returns WHERE refund_amount > 100;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all customers who have more than 1000 lifetime loyalty points earned and have a loyalty program tier level of 'Gold'.",
      "Expected": "SELECT * FROM customers_loyalty_program WHERE lifetime_loyalty_points_earned > 1000 AND loyalty_program_tier_level = 'Gold';",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Calculate the total discount applied and the total tax amount for orders placed in the year 2022, with a refund status of true in the transactions_and_payments table.",
      "Expected": "SELECT SUM(o.discount_applied) AS total_discount_applied, SUM(o.tax_amount) AS total_tax_amount FROM orders o JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier WHERE EXTRACT(YEAR FROM o.order_date) = 2022 AND t.refund_status = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the average shipping costs for transactions from the 'new customer campaign'?",
      "Expected": "SELECT AVG(T2.shipping_cost) FROM transactions_and_payments T1 INNER JOIN shipping T2 ON T1.linked_order_reference_identifier = T2.fk_order_id INNER JOIN campaigns T3 ON T1.linked_order_reference_identifier = T3.campaign_id WHERE T3.campaign_name = 'new customer campaign'",
      "Actual": "SELECT AVG(t.shipping_fee) FROM transactions_and_payments t JOIN orders o ON t.linked_order_reference_identifier = o.order_id JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE c.campaign_name = 'new customer campaign'",
      "Expected_Error": null,
      "Actual_Error": "column t.shipping_fee does not exist\nLINE 1: SELECT AVG(t.shipping_fee) FROM transactions_and_payments t ...\n                   ^\nHINT:  Perhaps you meant to reference the column \"o.shipping_fee\".\n"
    },
    {
      "NL": "Find the names of customers who have an active subscription and are located in New York City, along with the total number of products supplied by their preferred supplier.",
      "Expected": "SELECT ci.person_first_name, ci.person_last_name, s.total_number_of_products_supplied FROM customerinfo ci JOIN inventory i ON ci.securitytwo_factor_enabled = true JOIN suppliers s ON i.supplier_id = s.supplier_unique_identifier WHERE ci.account_has_active_subscription = true AND ci.address_city = 'New York City'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all customers who have made a transaction using cryptocurrency.",
      "Expected": "SELECT DISTINCT c.person_first_name, c.person_last_name FROM customerinfo c JOIN transactions_and_payments t ON c.person_customer_id = t.corresponding_customer_reference_identifier WHERE t.cryptocurrency_payment_flag = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the exclusive coupon codes assigned to customers in the loyalty program at the platinum level?",
      "Expected": "SELECT exclusive_coupon_codes_assigned FROM customers_loyalty_program WHERE loyalty_program_tier_level = 'Platinum'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the average total price of carts that have a discounted total price greater than 100 and a cart status of 'Checked Out'?",
      "Expected": "SELECT AVG(discounted_total_price) FROM cart WHERE discounted_total_price > 100 AND cart_status = 'Checked Out'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the campaign name, target audience, and total price for all campaigns where the campaign type is 'email' and the cart status is 'checkedout'.",
      "Expected": "SELECT c.campaign_name, c.target_audience, ct.total_price FROM campaigns c JOIN cart ct ON c.campaign_id = ct.fk_product_id WHERE c.campaign_type = 'email' AND ct.cart_status = 'checkedout'",
      "Actual": "SELECT c.campaign_name, c.target_audience, o.total_amount FROM campaigns c JOIN orders o ON c.campaign_id = o.campaign_id WHERE c.campaign_type = 'email' AND o.cart_status = 'checkedout'",
      "Expected_Error": null,
      "Actual_Error": "column o.cart_status does not exist\nLINE 1: ...o.campaign_id WHERE c.campaign_type = 'email' AND o.cart_sta...\n                                                             ^\n"
    },
    {
      "NL": "Retrieve the total amount and delivery date of orders that were shipped after '2023-01-01' and have a discount applied greater than 0.",
      "Expected": "SELECT total_amount, delivery_date FROM orders WHERE shipping_date > '2023-01-01' AND discount_applied > 0;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the shipping details of all orders that have a budget greater than $10,000 and list the supplier details of the product shipped.",
      "Expected": "SELECT sh.id, sh.fk_order_id, sh.estimated_delivery, sh.shipped_date, sh.shipping_cost, sh.shipping_address, sh.shipping_city, sh.shipping_state, sh.shipping_zipcode, sh.shipping_country, sh.shipping_status, sh.tracking_number, sh.carrier, s.supplier_unique_identifier, s.total_number_of_products_supplied, s.average_supplier_rating, s.official_supplier_business_name, s.registered_business_address, s.primary_contact_person_name, s.primary_contact_phone_number, s.primary_contact_email_address, s.supplier_country_of_operation, s.supplier_tax_identification_number, s.preferred_payment_terms_description FROM shipping sh JOIN campaigns c ON sh.fk_order_id = c.campaign_id JOIN suppliers s ON c.campaign_id = s.supplier_unique_identifier WHERE c.budget > 10000;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the details of suppliers from the United States who supplied products for orders with a total amount greater than 500?",
      "Expected": "SELECT s.* FROM suppliers s JOIN orders o ON s.supplier_unique_identifier = o.campaign_id JOIN shipping sh ON o.order_id = sh.fk_order_id WHERE sh.shipping_country = 'United States' AND o.total_amount > 500",
      "Actual": "SELECT DISTINCT s.* FROM suppliers s JOIN orders o ON s.supplier_unique_identifier = (SELECT oi.associated_supplier_reference_id FROM order_items oi WHERE oi.order_id = o.order_id LIMIT 1) WHERE s.supplier_country_of_operation = 'United States' AND o.total_amount > 500",
      "Expected_Error": null,
      "Actual_Error": "column oi.associated_supplier_reference_id does not exist\nLINE 1: ...rders o ON s.supplier_unique_identifier = (SELECT oi.associa...\n                                                             ^\n"
    },
    {
      "NL": "What are the order IDs, order dates, and shipping addresses of orders for which refunds have been initiated, along with the corresponding refund amounts and return conditions, for customers who have not opened emails and have a review rating of 5 in their events?",
      "Expected": "SELECT o.order_id, o.order_date, o.shipping_address_street, o.shipping_address_city, o.shipping_address_state, o.shipping_address_country, o.shipping_address_postalcode, rr.refund_amount, rr.return_condition FROM orders o JOIN refunds_returns rr ON o.order_id = rr.fk_order_id JOIN events e ON o.order_id = e.order_id WHERE e.email_opened = false AND e.review_rating = 5",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the product details of products with available stock quantity greater than 50 and estimated replenishment date within the next 7 days",
      "Expected": "SELECT * FROM products WHERE available_stock_quantity_in_units > 50 AND estimated_replenishment_date BETWEEN CURRENT_DATE AND CURRENT_DATE + INTERVAL '7 days'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the total number of products supplied by each supplier along with their average rating.",
      "Expected": "SELECT total_number_of_products_supplied, average_supplier_rating FROM suppliers;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average total transaction amount for each order that has a review with a star rating of 5.",
      "Expected": "SELECT o.order_id, AVG(t.total_transaction_amount) AS average_transaction_amount FROM orders o JOIN transactions_and_payments t ON o.order_id = t.linked_order_reference_identifier JOIN product_reviews_and_ratings r ON o.order_id = r.referenced_product_identifier WHERE r.submitted_review_star_rating = 5 GROUP BY o.order_id;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the loyalty program tier and total spent for all customers who have ever purchased a product from the 'Electronics' category and have a lifetime loyalty points balance greater than 1000",
      "Expected": "SELECT T1.loyalty_program_tier_level, SUM(T2.total_price) FROM customers_loyalty_program AS T1 INNER JOIN order_items AS T2 ON T1.associated_customer_reference_id = T2.order_id INNER JOIN products AS T3 ON T2.product_id = T3.unique_product_identifier WHERE T3.product_category_primary = 'Electronics' AND T1.lifetime_loyalty_points_earned > 1000 GROUP BY T1.loyalty_program_tier_level",
      "Actual": "SELECT clp.loyalty_program_tier_level, SUM(tap.final_billed_amount) AS total_spent FROM customers_loyalty_program clp JOIN transactions_and_payments tap ON clp.associated_customer_reference_id = tap.corresponding_customer_reference_identifier JOIN orders o ON tap.linked_order_reference_identifier = o.order_id JOIN order_items oi ON o.order_id = oi.order_id WHERE clp.accumulated_loyalty_points_balance > 1000 AND oi.product_category_primary = 'Electronics' GROUP BY clp.loyalty_program_tier_level",
      "Expected_Error": null,
      "Actual_Error": "column oi.product_category_primary does not exist\nLINE 1: ...clp.accumulated_loyalty_points_balance > 1000 AND oi.product...\n                                                             ^\n"
    },
    {
      "NL": "Get the count of customers from the customerinfo table who have more than 100 loyalty points and the average spent per order is greater than 1000.",
      "Expected": "SELECT COUNT(person_customer_id) FROM customerinfo WHERE person_loyalty_points > 100 AND preferences_avg_spent_per_order > 1000;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the review ratings, customer review submission dates and review approval moderation statuses for all reviews with helpful votes received greater than 10?",
      "Expected": "SELECT submitted_review_star_rating, customer_review_submission_date, review_approval_moderation_status FROM product_reviews_and_ratings WHERE number_of_helpful_votes_received > 10",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What are the reviews for products with a high aggregate customer review rating and what is the shipping status for orders of these products?",
      "Expected": "SELECT T1.textual_review_feedback, T2.shipping_status FROM product_reviews_and_ratings AS T1 INNER JOIN products AS T3 ON T1.referenced_product_identifier = T3.unique_product_identifier INNER JOIN shipping AS T2 ON T2.fk_order_id = T1.review_unique_identifier WHERE T3.aggregate_customer_review_rating > 4",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the average loyalty points earned by customers who have active subscriptions and are premium members.",
      "Expected": "SELECT AVG(person_loyalty_points) FROM customerinfo WHERE account_has_active_subscription = TRUE AND person_is_premium = TRUE",
      "Actual": "SELECT AVG(c.person_loyalty_points) FROM customerinfo c JOIN customers_loyalty_program l ON c.person_customer_id = l.associated_customer_reference_id WHERE c.account_has_active_subscription = true AND c.person_is_premium = true",
      "Expected_Results": [
        {
          "avg": 750.0
        }
      ],
      "Actual_Results": [
        {
          "avg": 500.0
        }
      ]
    },
    {
      "NL": "Find the total number of products supplied by the supplier with the highest average rating, along with the supplier's official business name.",
      "Expected": "SELECT s.total_number_of_products_supplied, s.official_supplier_business_name FROM suppliers s ORDER BY s.average_supplier_rating DESC LIMIT 1;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List the total transaction amount and corresponding customer reference for transactions that are flagged as fraudulent.",
      "Expected": "SELECT total_transaction_amount, corresponding_customer_reference_identifier FROM transactions_and_payments WHERE is_transaction_fraudulent = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total number of verified reviews and the aggregate customer review rating for the product with the highest rating.",
      "Expected": "SELECT total_number_of_verified_reviews, aggregate_customer_review_rating FROM products ORDER BY aggregate_customer_review_rating DESC LIMIT 1;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of reviews submitted by premium customers.",
      "Expected": "SELECT COUNT(*) FROM product_reviews_and_ratings pr JOIN customerinfo ci ON pr.reviewing_customer_identifier = ci.person_customer_id WHERE ci.person_is_premium = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the campaign name and the budget for the campaign with campaign_id 1?",
      "Expected": "SELECT T1.campaign_name, T1.budget FROM campaigns AS T1 INNER JOIN events AS T2 ON T1.campaign_id = T2.order_id WHERE T1.campaign_id = 1;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all orders where shipping status is 'shipped' and order status is 'delivered' along with shipping details.",
      "Expected": "SELECT o.*, s.* FROM orders o JOIN shipping s ON o.order_id = s.fk_order_id WHERE s.shipping_status = 'shipped' AND o.order_status = 'delivered'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List the names of products purchased by customers who are eligible for special promotions and have a loyalty tier level of 'Silver' or higher.",
      "Expected": "SELECT DISTINCT oi.product_name FROM order_items oi JOIN customers_loyalty_program clp ON oi.order_id = clp.associated_customer_reference_id WHERE clp.eligible_for_special_promotions = TRUE AND clp.loyalty_program_tier_level IN ('Silver', 'Gold', 'Platinum')",
      "Actual": "SELECT DISTINCT p.product_name FROM products p JOIN order_items oi ON p.unique_product_identifier = oi.product_id JOIN orders o ON oi.order_id = o.order_id JOIN customers_loyalty_program clp ON o.person_customer_id = clp.associated_customer_reference_id WHERE clp.eligible_for_special_promotions = TRUE AND clp.loyalty_program_tier_level IN ('Silver', 'Gold', 'Platinum')",
      "Expected_Error": null,
      "Actual_Error": "column p.product_name does not exist\nLINE 1: SELECT DISTINCT p.product_name FROM products p JOIN order_it...\n                        ^\nHINT:  Perhaps you meant to reference the column \"oi.product_name\".\n"
    },
    {
      "NL": "Find the top 5 customers who have made the highest total cart value in events, considering only those with an active subscription and their last order was made within the last 6 months, and also include the product categories they frequently purchase.",
      "Expected": "SELECT ci.person_first_name, ci.person_last_name, ci.preferences_favorite_category, SUM(e.cart_value) AS total_cart_value FROM events e JOIN customerinfo ci ON e.person_customer_id = ci.person_customer_id JOIN products p ON e.order_item_id = p.unique_product_identifier WHERE ci.account_has_active_subscription = true AND ci.preferences_last_order_date >= current_date - INTERVAL '6 months' GROUP BY ci.person_first_name, ci.person_last_name, ci.preferences_favorite_category ORDER BY total_cart_value DESC LIMIT 5;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all the campaigns that have a budget greater than 1000 and have impressions greater than 1000.",
      "Expected": "SELECT * FROM campaigns WHERE budget > 1000 AND impressions > 1000",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total transaction amount, payment method used, and transaction date and time for transactions that occurred within the last 30 days and corresponding order status is 'delivered', and not cancelled or pending. The transaction method used should be either 'Credit Card' or 'PayPal', and the total transaction amount should be greater than $100.00.",
      "Expected": "SELECT T1.total_transaction_amount, T1.payment_method_used, T1.transaction_date_and_time FROM transactions_and_payments AS T1 INNER JOIN orders AS T2 ON T1.linked_order_reference_identifier = T2.order_id WHERE T1.transaction_date_and_time >= NOW() - INTERVAL '30 days' AND T2.order_status = 'delivered' AND T2.order_status NOT IN ('cancelled', 'pending') AND T1.payment_method_used IN ('Credit Card', 'PayPal') AND T1.total_transaction_amount > 100.00",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Retrieve the total order value for each customer who has made at least one purchase, along with the average review rating for products in their orders, excluding those customers whose reviews have been flagged as inappropriate and considering only verified reviewers. Additionally, filter the results to show only those customers who have spent more than $500 in total and include the city of their last delivery.",
      "Expected": "SELECT o.person_customer_id, SUM(oi.total_price) AS total_order_value, AVG(prar.submitted_review_star_rating) AS avg_review_rating, o.shipping_address_city FROM orders o JOIN order_items oi ON o.order_id = oi.order_id LEFT JOIN product_reviews_and_ratings prar ON oi.product_id = prar.referenced_product_identifier WHERE prar.verification_status_of_reviewer = TRUE AND prar.flagged_as_inappropriate = FALSE GROUP BY o.person_customer_id, o.shipping_address_city HAVING SUM(oi.total_price) > 500",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find all the customers who have placed orders with a total amount greater than $100 and have an active subscription.",
      "Expected": "SELECT DISTINCT ci.person_customer_id FROM orders o INNER JOIN customerinfo ci ON o.person_customer_id = ci.person_customer_id WHERE o.total_amount > 100 AND ci.account_has_active_subscription = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total amount and discount applied for all orders placed in the last month.",
      "Expected": "SELECT total_amount, discount_applied FROM orders WHERE order_date >= NOW() - INTERVAL '1 month'",
      "Actual": "SELECT SUM(total_amount) AS total_amount, SUM(discount_applied) AS total_discount FROM orders WHERE order_date >= NOW() - INTERVAL '1 month'",
      "Expected_Results": [],
      "Actual_Results": [
        {
          "total_amount": null,
          "total_discount": null
        }
      ]
    },
    {
      "NL": "List all campaigns with an end date in the current year that have a budget greater than the actual spent.",
      "Expected": "SELECT campaign_name FROM campaigns WHERE EXTRACT(YEAR FROM end_date) = EXTRACT(YEAR FROM CURRENT_DATE) AND budget > actual_spent",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List the wishlist items for customers who have more than 100 loyalty points and are subscribed to the newsletter.",
      "Expected": "SELECT w.product_name, w.fk_user_id, c.person_first_name, c.person_last_name FROM wishlist w JOIN customerinfo c ON w.fk_user_id = c.person_customer_id WHERE c.person_loyalty_points > 100 AND c.preferences_newsletter_subscription = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total loyalty points earned by customers who have made at least one order and are eligible for special promotions",
      "Expected": "SELECT SUM(clp.lifetime_loyalty_points_earned) FROM customers_loyalty_program clp JOIN customerinfo ci ON clp.associated_customer_reference_id = ci.person_customer_id JOIN orders o ON ci.person_customer_id = o.person_customer_id WHERE clp.eligible_for_special_promotions = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the total number of customers who have active subscriptions and are premium?",
      "Expected": "SELECT COUNT(person_customer_id) FROM customerinfo WHERE account_has_active_subscription = TRUE AND person_is_premium = TRUE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "List all order items for a specific order identified by order_id 12345.",
      "Expected": "SELECT * FROM order_items WHERE order_id = 12345;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the campaign name and total reviews made by customers who purchased products linked to the given campaign ID. Order the results by the total reviews made in descending order.",
      "Expected": "SELECT T1.campaign_name, COUNT(T2.reviewing_customer_identifier) AS total_reviews FROM campaigns T1 INNER JOIN product_reviews_and_ratings T2 ON T1.campaign_id = T2.referenced_product_identifier GROUP BY T1.campaign_name ORDER BY total_reviews DESC;",
      "Actual": "SELECT c.campaign_name, COUNT(pr.review_unique_identifier) AS total_reviews FROM campaigns c JOIN orders o ON c.campaign_id = o.campaign_id JOIN order_items oi ON o.order_id = oi.order_id JOIN product_reviews_and_ratings pr ON oi.product_id = pr.referenced_product_identifier WHERE c.campaign_id = [given_campaign_id] GROUP BY c.campaign_name ORDER BY total_reviews DESC",
      "Expected_Error": null,
      "Actual_Error": "syntax error at or near \"[\"\nLINE 1: ...ferenced_product_identifier WHERE c.campaign_id = [given_cam...\n                                                             ^\n"
    },
    {
      "NL": "Get the order details of customers who have made a purchase in the last 30 days and have loyalty points greater than 100.",
      "Expected": "SELECT o.* FROM orders o INNER JOIN customerinfo ci ON o.person_customer_id = ci.person_customer_id WHERE o.order_date > NOW() - INTERVAL '30 day' AND ci.person_loyalty_points > 100;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the average total price of all the items in the cart and the average discount applied",
      "Expected": "SELECT AVG(total_price) AS average_total_price, AVG(discount_applied) AS average_discount FROM cart",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Show the quantity, last_updated, and supplier_id of products in inventory for products with a quantity greater than 50 and a stock_threshold of less than 20.",
      "Expected": "SELECT quantity, last_updated, supplier_id FROM inventory WHERE quantity > 50 AND stock_threshold < 20",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Calculate the total loyalty points earned by customers from the last 30 days.",
      "Expected": "SELECT SUM(associated_loyalty_points_earned) FROM transactions_and_payments WHERE transaction_date_and_time >= NOW() - INTERVAL '30 days';",
      "Actual": "SELECT SUM(accumulated_loyalty_points_balance) FROM customers_loyalty_program WHERE last_loyalty_point_update_date >= NOW() - INTERVAL '30 days'",
      "Expected_Results": [
        {
          "sum": 80
        }
      ],
      "Actual_Results": [
        {
          "sum": 7500
        }
      ]
    },
    {
      "NL": "Find the total revenue generated and the number of conversions for campaigns that ended after January 1, 2023, and had a ROI greater than 200%",
      "Expected": "SELECT SUM(revenue_generated) AS total_revenue, SUM(conversions) AS total_conversions FROM campaigns WHERE end_date > '2023-01-01' AND roi > 200;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the campaign name, campaign status, and the total refund amount for each campaign",
      "Expected": "SELECT c.campaign_name, c.campaign_status, SUM(rr.refund_amount) AS total_refund FROM campaigns c JOIN refunds_returns rr ON c.campaign_id = rr.fk_order_id GROUP BY c.campaign_name, c.campaign_status",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total amount of all orders that were created after the start date of a specific campaign with id 1.",
      "Expected": "SELECT SUM(o.total_amount) FROM orders o JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE c.campaign_id = 1 AND o.created_at > c.start_date",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the total refund amount, order item id, product name, item status, and standard retail price including tax for each refundable order item that has a total price greater than 100, and has a return period less than 30 days, and belongs to a customer who has a lifetime loyalty points earned greater than 1000, and has an anniversary reward voucher status as true, and order item's product belongs to a supplier with a minimum threshold for restocking greater than 50",
      "Expected": "SELECT T3.refund_amount, T1.order_item_id, T1.product_name, T1.item_status, T2.standard_retail_price_including_tax FROM order_items AS T1 INNER JOIN products AS T2 ON T1.product_id = T2.unique_product_identifier INNER JOIN refunds_returns AS T3 ON T1.order_id = T3.fk_order_id AND T1.product_id = T3.fk_product_id INNER JOIN customers_loyalty_program AS T4 ON T3.fk_user_id = T4.associated_customer_reference_id WHERE T1.total_price > 100 AND T1.return_period < 30 AND T4.lifetime_loyalty_points_earned > 1000 AND T4.anniversary_reward_voucher_status IS TRUE AND T2.minimum_threshold_for_restocking > 50",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the average restocking fee for returns that have been processed?",
      "Expected": "SELECT AVG(restocking_fee) FROM refunds_returns WHERE processed_date IS NOT NULL",
      "Actual": "SELECT AVG(restocking_fee) FROM refunds_returns WHERE status = 'processed';",
      "Expected_Results": [
        {
          "avg": 0.0
        }
      ],
      "Actual_Results": [
        {
          "avg": null
        }
      ]
    },
    {
      "NL": "Get the total quantity of products in the inventory that have a stock threshold greater than 50 and a safety stock less than 20.",
      "Expected": "SELECT SUM(quantity) FROM inventory WHERE stock_threshold > 50 AND safety_stock < 20;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the customer information, including their loyalty points and registration date, along with the transaction details, including the transaction date and payment method, and the inventory details, including the quantity and last restock date, for customers who have purchased a product with a quantity greater than 20 and a payment method of credit card, and also check if the customer has a valid subscription and the transaction amount is greater than 50.",
      "Expected": "SELECT T1.person_first_name, T1.person_last_name, T1.person_loyalty_points, T1.person_registration_date, T2.linked_order_reference_identifier, T2.transaction_unique_identifier, T2.transaction_date_and_time, T2.payment_method_used, T3.quantity, T3.last_restock_date FROM customerinfo AS T1 INNER JOIN transactions_and_payments AS T2 ON T2.corresponding_customer_reference_identifier = T1.person_customer_id INNER JOIN inventory AS T3 ON T3.referenced_product_id = T2.linked_order_reference_identifier WHERE T1.account_has_active_subscription = TRUE AND T2.total_transaction_amount > 50 AND T2.payment_method_used = 'Credit Card' AND T3.quantity > 20",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total amount redeemed by customers who are eligible for special promotions.",
      "Expected": "SELECT SUM(total_discount_amount_redeemed) FROM customers_loyalty_program WHERE eligible_for_special_promotions = TRUE;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find out how many products are in stock and what is their current stock status?",
      "Expected": "SELECT quantity , stock_status FROM inventory WHERE stock_status = 'In Stock'",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Find the total number of unique customers who have both reviewed a product and completed a survey.",
      "Expected": "SELECT COUNT(DISTINCT person_customer_id) FROM events WHERE event_type = 'review' INTERSECT SELECT COUNT(DISTINCT person_customer_id) FROM events WHERE survey_completed = true;",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "What is the average amount spent by customers in the last 365 days, and what is their average lifetime loyalty points earned?",
      "Expected": "SELECT AVG(total_amount), AVG(lifetime_loyalty_points_earned) FROM orders JOIN customers_loyalty_program ON orders.person_customer_id = customers_loyalty_program.associated_customer_reference_id WHERE orders.order_date > NOW() - INTERVAL '365 day'",
      "Actual": "SELECT AVG(t.final_billed_amount) AS avg_amount_spent, AVG(l.lifetime_loyalty_points_earned) AS avg_lifetime_loyalty_points_earned FROM transactions_and_payments t JOIN customers_loyalty_program l ON t.corresponding_customer_reference_identifier = l.associated_customer_reference_id WHERE t.transaction_date_and_time >= NOW() - INTERVAL '365 days'",
      "Expected_Results": [
        {
          "avg": null
        }
      ],
      "Actual_Results": [
        {
          "avg_amount_spent": 1012.49,
          "avg_lifetime_loyalty_points_earned": 5750.0
        }
      ]
    },
    {
      "NL": "Find the names of products, their corresponding categories and the names of suppliers who supply them, the products being fragile, the suppliers have an average rating of more than 3, the products have a net weight of less than 1 kilogram, and the quantity in stock is more than 50. Also, sort the results by the product names in descending order.",
      "Expected": "SELECT T1.product_display_name, T1.product_category_primary, T3.official_supplier_business_name FROM products AS T1 INNER JOIN inventory AS T2 ON T1.unique_product_identifier = T2.referenced_product_id INNER JOIN suppliers AS T3 ON T2.supplier_id = T3.supplier_unique_identifier WHERE T1.fragile_item_indicator = TRUE AND T3.average_supplier_rating > 3 AND T1.net_weight_in_kilograms < 1 AND T2.quantity > 50 ORDER BY T1.product_display_name DESC",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    },
    {
      "NL": "Get the transaction unique identifier, transaction date and time, and payment method used for transactions with a total transaction amount greater than 1000 and a refund status of false.",
      "Expected": "SELECT transaction_unique_identifier, transaction_date_and_time, payment_method_used FROM transactions_and_payments WHERE total_transaction_amount > 1000 AND refund_status = FALSE",
      "Actual": "/* Error generating SQL: 'choices' */",
      "Expected_Error": null,
      "Actual_Error": "can't execute an empty query"
    }
  ]
}