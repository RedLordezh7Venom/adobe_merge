[
    {
        "NL": "Find the average time spent on the website by users who clicked on a push notification and completed a survey.",
        "Query": "SELECT AVG(T2.time_spent) FROM push_notifications AS T1 INNER JOIN user_survey_interactions AS T2 ON T1.user_id = T2.user_id WHERE T1.notification_type = 'push' AND T2.survey_completed = TRUE"
    },
    {
        "NL": "Get the count of wishlist items for each user and sort them in descending order.",
        "Query": "SELECT COUNT(*) ,  username FROM wishlist GROUP BY username ORDER BY COUNT(*) DESC"
    },
    {
        "NL": "Find the products in the cart that have a promotional discounted price less than $50, along with the customer's loyalty program tier level and the customer's accumulated loyalty points balance.",
        "Query": "SELECT p.product_name, c.loyalty_program_tier_level, c.loyalty_points_balance FROM cart c JOIN product p ON c.product_id = p.product_id WHERE p.promo_discounted_price < 50"
    },
    {
        "NL": "What is the total discount amount redeemed by customers who have participated in exclusive beta testing and have a loyalty membership unique identifier greater than 1000?",
        "Query": "SELECT SUM(t2.discount_amount) FROM customers AS t1 INNER JOIN beta_test_participants AS t2 ON t1.customer_id = t2.customer_id WHERE t1.loyalty_membership_id > 1000"
    },
    {
        "NL": "Retrieve the total amount of all orders that contain products from the cart of user with ID 123 and have a shipping date after January 1, 2023.",
        "Query": "SELECT SUM(o.total_amount) FROM orders o JOIN cart_items ci ON o.id = ci.order_id JOIN cart c ON ci.cart_id = c.id JOIN users u ON c.user_id = u.id WHERE u.id = 123 AND o.shipping_date > '2023-01-01'"
    },
    {
        "NL": "What are the campaign names of the campaigns that have generated more than $1000 in revenue and have a cost per acquisition of less than $10?",
        "Query": "SELECT campaign_name FROM campaigns WHERE revenue > 1000 AND cost_per_acquisition < 10"
    },
    {
        "NL": "Show the average rating of reviews submitted by customers who are verified and have active subscriptions, and the number of helpful votes they received.",
        "Query": "SELECT AVG(r.rating) ,  COUNT(hv.helpful) FROM reviews r JOIN customers c ON r.customer_id = c.customer_id JOIN subscriptions s ON c.customer_id = s.customer_id JOIN verification v ON c.customer_id = v.customer_id WHERE v.verified = TRUE AND s.active = TRUE"
    },
    {
        "NL": "Find the product name and average review rating for products with more than 100 reviews",
        "Query": "SELECT product_name ,  avg(review_rating) FROM reviews GROUP BY product_name HAVING count(review_id)  >  100"
    },
    {
        "NL": "Find the total number of orders placed by premium customers who have purchased products with an average supplier rating greater than 4 and have a total number of verified reviews greater than 1000, along with the total amount spent by these customers, the average rating given by them, and the total number of helpful votes received by their reviews.",
        "Query": "SELECT COUNT(*) ,  SUM(total_amount) ,  AVG(avg_rating) ,  SUM(helpful_votes) FROM orders JOIN customers ON orders.customer_id = customers.id JOIN suppliers ON orders.supplier_id = suppliers.id JOIN reviews ON orders.order_id = reviews.order_id JOIN supplier_ratings ON suppliers.id = supplier_ratings.supplier_id WHERE customers.premium = TRUE AND avg_rating > 4 AND total_reviews > 1000"
    },
    {
        "NL": "List the orders with a discount applied greater than 10% in any currency.",
        "Query": "SELECT * FROM orders WHERE total_amount * 100 - discount_amount > 10 * total_amount"
    },
    {
        "NL": "Find the total number of products and the total price for each cart associated with a specific user.",
        "Query": "SELECT COUNT(DISTINCT c.id) ,  SUM(p.price * c.quantity) FROM carts c JOIN cart_items ci ON c.id = ci.cart_id JOIN products p ON ci.product_id = p.id WHERE c.user_id = 1;"
    },
    {
        "NL": "List all items in the wishlist where the expected purchase date is within the next 30 days and the priority level is 'high'.",
        "Query": "SELECT * FROM wishlist WHERE expected_purchase_date BETWEEN CURRENT_DATE + INTERVAL '30 day' AND CURRENT_DATE + INTERVAL '30 day' AND priority_level = 'high';"
    },
    {
        "NL": "Find the total number of products supplied by each supplier, along with the average supplier rating and the number of inventories associated with each supplier, ordered by the total number of products supplied in descending order.",
        "Query": "SELECT COUNT(*) AS total_products, AVG(rating) AS avg_rating, COUNT(inventory_id) AS total_inventories FROM supplier JOIN product ON supplier.id = product.supplier_id GROUP BY supplier.id ORDER BY COUNT(*) DESC"
    },
    {
        "NL": "Retrieve the total time spent and the average scroll depth percentage for events where the event type is 'purchase' and the device platform is 'mobile'.",
        "Query": "SELECT SUM(t2.time_spent), (SUM(t2.time_spent) * 100 / (SELECT MAX(scroll_depth) FROM events)) FROM events AS t1 INNER JOIN event_details AS t2 ON t1.event_id = t2.event_id WHERE t1.event_type = 'purchase' AND t1.device_platform = 'mobile';"
    },
    {
        "NL": "Find all reviews of products that have been purchased more than 5 times, with the customer's review submission date and the total number of helpful votes received.",
        "Query": "SELECT r.review_submission_date, COUNT(r.review_submission_date) AS total_purchases, COUNT(hv.helpful_votes) AS helpful_votes FROM reviews r JOIN product_reviews pr ON r.review_id = pr.review_id JOIN purchases p ON pr.product_id = p.product_id JOIN helpful_votes hv ON r.review_id = hv.review_id GROUP BY r.review_submission_date HAVING COUNT(p.product_id) > 5"
    },
    {
        "NL": "Find the estimated delivery date and shipping cost for orders where the event type is 'order_placed' and the shipping status is 'shipped'.",
        "Query": "SELECT estimated_delivery_date, shipping_cost FROM orders WHERE event_type = 'order_placed' AND shipping_status = 'shipped'"
    },
    {
        "NL": "Analyze the total number of clicks and the average time spent by customers from the United States who visited product pages of 'Electronics' category products and view those who spent the most time on the site, including product names and their respective suppliers.",
        "Query": "SELECT T1.product_name, T1.supplier, SUM(T2.clicks) AS total_clicks, AVG(T2.time_spent) AS avg_time_spent, ROW_NUMBER() OVER (ORDER BY SUM(T2.time_spent) DESC) AS rank FROM products AS T1 INNER JOIN product_visits AS T2 ON T1.product_id = T2.product_id WHERE T2.country = 'United States' AND T1.category = 'Electronics' GROUP BY T1.product_name, T1.supplier"
    },
    {
        "NL": "List all the campaigns with their corresponding campaign status, start date, end date and total revenue generated, and also list the total quantity of products in the cart for each campaign",
        "Query": "SELECT c.campaign_id, c.campaign_status, c.start_date, c.end_date, SUM(r.revenue) AS total_revenue, SUM(p.quantity) AS total_quantity FROM campaigns c JOIN campaign_products cp ON c.campaign_id = cp.campaign_id JOIN products p ON cp.product_id = p.product_id JOIN campaign_revenue r ON c.campaign_id = r.campaign_id GROUP BY c.campaign_id"
    },
    {
        "NL": "List the anniversary_reward_voucher_status of customers and their corresponding shipping_status for orders with fk_order_id = 67890.",
        "Query": "SELECT anniversary_reward_voucher_status, shipping_status FROM orders WHERE fk_order_id = 67890"
    },
    {
        "NL": "Retrieve the loyalty_program_tier_level of customers who have reviewed a product referenced_product_identifier = 12345. Provide the review_unique_identifier and associated_review_image_urls.",
        "Query": "SELECT t2.loyalty_program_tier_level, t1.review_unique_identifier, t1.associated_review_image_urls FROM reviews t1 INNER JOIN customers t2 ON t1.customer_id = t2.customer_id WHERE t1.referenced_product_identifier = 12345"
    },
    {
        "NL": "Find the total amount of all orders placed in the month of January 2023, along with the average tax amount applied to those orders.",
        "Query": "SELECT SUM(total_amount) AS total_amount, AVG(tax_amount) AS average_tax FROM orders WHERE EXTRACT(MONTH FROM order_date) = 1 AND EXTRACT(YEAR FROM order_date) = 2023"
    },
    {
        "NL": "What is the total shipping cost for orders that have been shipped?",
        "Query": "SELECT SUM(t2.cost) FROM orders AS t1 INNER JOIN shipments AS t2 ON t1.id = t2.order_id WHERE t2.shipped = TRUE"
    },
    {
        "NL": "Get the wishlists with the name of the wishlist item and its price at addition, along with the order status of the orders with matching campaign ID.",
        "Query": "SELECT T1.name, T1.price, T2.status FROM wishlist_items AS T1 INNER JOIN orders AS T2 ON T1.campaign_id = T2.campaign_id"
    },
    {
        "NL": "For each distinct product name in the wishlist, find the corresponding product id and brand name from the wishlist, as well as the order item id and item status from the order items table, where the wishlist product id matches the order item product id, and include the corresponding shipping address, shipping city, and shipping state from the shipping table.",
        "Query": "SELECT DISTINCT w.product_id, w.product_name, o.order_item_id, o.item_status, s.shipping_address, s.shipping_city, s.shipping_state FROM wishlist w JOIN order_items o ON w.product_id = o.product_id JOIN shipping s ON o.order_id = s.order_id"
    },
    {
        "NL": "Retrieve all refunds initiated by the users where the refund status is 'pending'.",
        "Query": "SELECT * FROM refunds WHERE user_id IN (SELECT id FROM users WHERE status = 'active') AND status = 'pending';"
    },
    {
        "NL": "Find the total amount of all orders placed by customers from the United States that were shipped using standard shipping methods and include a discount.",
        "Query": "SELECT SUM(o.total_amount - o.discount) FROM orders o JOIN customers c ON o.customer_id = c.id JOIN shipments s ON o.id = s.order_id WHERE c.country = 'United States' AND s.shipping_method = 'Standard';"
    },
    {
        "NL": "Find the event type, the campaign name, and the total number of products supplied by each supplier for events where the device type is 'mobile' and the campaign status is 'completed' and the supplier tax identification number is '123456789'.",
        "Query": "SELECT event_type, campaign_name, COUNT(*) FROM events WHERE device_type = 'mobile' AND campaign_status = 'completed' AND supplier_tax_id = '123456789' GROUP BY event_type, campaign_name"
    },
    {
        "NL": "Find the average total transaction amount for customers who have made at least one purchase and have loyalty points greater than 1000, along with the number of wishlist items and average spent per order for these customers, grouped by city and country",
        "Query": "SELECT AVG(T2.total_amount) AS avg_total_amount, COUNT(T1.id) AS num_customers, COUNT(T1.wishlist_items) AS num_wishlist_items, AVG(T2.total_amount / T1.num_orders) AS avg_spent_per_order FROM customers AS T1 INNER JOIN orders AS T2 ON T1.id = T2.customer_id WHERE T1.loyalty_points > 1000 GROUP BY T1.city, T1.country"
    },
    {
        "NL": "List all the orders where the order status is 'Shipped' and the device platform is 'Windows'.",
        "Query": "SELECT * FROM orders WHERE status = 'Shipped' AND device_platform = 'Windows';"
    },
    {
        "NL": "Retrieve the inventory of products with stock status as 'reorder'.",
        "Query": "SELECT * FROM products WHERE stock_status = 'reorder';"
    },
    {
        "NL": "Find all campaigns with their corresponding total reach, impressions and email open rate where the campaign type is 'Social Media' and the target audience is 'Young Adults', and also find the total refund amount for each campaign",
        "Query": "SELECT c.id, c.name, c.total_reach, c.impressions, c.email_open_rate, c.total_refund FROM campaigns c JOIN campaign_targeting ct ON c.id = ct.campaign_id WHERE ct.target_audience = 'Young Adults' AND c.campaign_type = 'Social Media'"
    },
    {
        "NL": "Find the average shipping cost for orders shipped to the United States",
        "Query": "SELECT AVG(s.shipping_cost) FROM orders o JOIN shipments s ON o.id = s.order_id WHERE s.country = 'United States';"
    },
    {
        "NL": "Find the total billed amount for transactions where the corresponding customer made a refund and the refund amount was more than $50.",
        "Query": "SELECT SUM(t1.amount) FROM transactions t1 JOIN refunds r ON t1.id = r.transaction_id WHERE r.amount > 50"
    },
    {
        "NL": "Show the total amount of refunds and the total restocking fees for items in the inventory that belong to products that have a featured product flag set to true",
        "Query": "SELECT SUM(refund_amount) AS total_refunds, SUM(restocking_fee) AS total_restocking_fees FROM inventory WHERE featured_product = TRUE"
    },
    {
        "NL": "What is the average aggregate customer review rating for all products from suppliers in the USA, who have an average supplier rating of at least 4.5, and what is the average total number of products supplied by these suppliers?",
        "Query": "SELECT AVG(r.rating) ,  AVG(p.num_products) FROM reviews r JOIN products p ON r.product_id = p.id JOIN suppliers s ON p.supplier_id = s.id WHERE s.country = 'USA' AND r.rating >= 4.5"
    },
    {
        "NL": "Show the total number of customers who have an active subscription and a Loyalty points greater than 1000.",
        "Query": "SELECT COUNT(*) FROM customers WHERE subscription_status = 'active' AND loyalty_points > 1000;"
    },
    {
        "NL": "What is the product id and quantity for each order that has a transaction review score of more than 4.5 and has been fully paid?",
        "Query": "SELECT product_id, quantity FROM orders WHERE transaction_review_score > 4.5 AND payment_status = 'fully_paid'"
    },
    {
        "NL": "Find the names of products that have received a review with a sentiment analysis score greater than 0.7 and have a total number of verified reviews of at least 50.",
        "Query": "SELECT DISTINCT product_name FROM reviews WHERE sentiment_score > 0.7 GROUP BY product_name HAVING COUNT(verified) >= 50"
    },
    {
        "NL": "List the inventory ids and referenced product ids of all inventory items with quantity less than the safety stock and the supplier id is 1.",
        "Query": "SELECT i.id, p.id FROM inventory i JOIN products p ON i.product_id = p.id WHERE i.quantity < (SELECT safety_stock FROM products WHERE id = 1) AND i.supplier_id = 1;"
    },
    {
        "NL": "Get the total discount amount redeemed and the total number of products supplied for customers who are eligible for special promotions and have a supplier with more than 100 products supplied",
        "Query": "SELECT SUM(discount_amount) ,  COUNT(*) FROM customers JOIN supplier ON customers.supplier_id = supplier.id JOIN products ON supplier.id = products.supplier_id WHERE supplier.num_products > 100 AND customers.promotion_eligible = true"
    },
    {
        "NL": "Find the total transaction amount and the number of reviews for each customer who has made a transaction and submitted a review for the same product.",
        "Query": "SELECT SUM(t.amount), COUNT(r.review_id) FROM transactions t JOIN reviews r ON t.product_id = r.product_id WHERE t.customer_id = r.customer_id GROUP BY t.customer_id"
    },
    {
        "NL": "Retrieve the product display name, promotional price, and the loyalty membership unique identifier for customers who have redeemed loyalty points for products that are in stock and have an aggregate customer review rating of at least 4.",
        "Query": "SELECT t1.name, t2.price, t3.customer_id FROM products AS t1 INNER JOIN product_reviews AS t2 ON t1.id = t2.product_id INNER JOIN loyalty_memberships AS t3 ON t3.customer_id = t2.customer_id WHERE t1.in_stock = TRUE AND t2.rating >= 4"
    },
    {
        "NL": "Find all orders in the cart where the product is a featured product and the estimated delivery date is after today.",
        "Query": "SELECT * FROM cart WHERE product_id IN (SELECT id FROM featured_products) AND estimated_delivery_date > CURRENT_DATE"
    },
    {
        "NL": "Find the total number of products supplied by each supplier and list them in descending order.",
        "Query": "SELECT COUNT(*) ,  s.supplier_name FROM products p JOIN suppliers s ON p.supplier_id = s.supplier_id GROUP BY s.supplier_name ORDER BY COUNT(*) DESC"
    },
    {
        "NL": "Retrieve the total amount of discounts applied to orders within the last year, grouped by campaign.",
        "Query": "SELECT SUM(total_amount) AS total_amount FROM orders WHERE created_at >= NOW() - INTERVAL '1 year' GROUP BY campaign"
    },
    {
        "NL": "Identify the top 5 customers who have the highest total number of edits made in their reviews and have submitted reviews with a review_unique_identifier that is either 100 or 200. Additionally, for these customers, find the average time spent on the product review page and the total number of events where they clicked more than 3 times and spent more than 10 seconds on the page, considering only events that happened after June 1, 2022. The results should be ordered by the total number of edits in descending order.",
        "Query": "SELECT customers.*, AVG(time_spent) AS avg_time_spent, COUNT(events) AS total_events \nFROM customers \nJOIN (\n  SELECT review_unique_identifier, COUNT(*) AS edit_count \n  FROM reviews \n  WHERE review_unique_identifier IN (100, 200) \n  GROUP BY review_unique_identifier \n) AS edit_counts ON customers.customer_id = edit_counts.review_unique_identifier \nJOIN (\n  SELECT customer_id, SUM(CASE WHEN events > 3 AND time_spent > 10 THEN 1 ELSE 0 END) AS click_events \n  FROM events \n  WHERE event_date >= '2022-06-01' \n  GROUP BY customer_id \n) AS event_counts ON customers.customer_id = event_counts.customer_id \nWHERE customers.customer_id IN (\n  SELECT review_unique_identifier \n  FROM reviews \n  GROUP BY review_unique_identifier \n  HAVING COUNT(*) = (SELECT MAX(edit_count) FROM (\n    SELECT review_unique_identifier, COUNT(*) AS edit_count \n    FROM reviews \n    WHERE review_unique_identifier IN (100, 200) \n    GROUP BY review_unique_identifier \n  ) AS edit_counts) \n) \nGROUP BY customers.customer_id \nORDER BY edit_count DESC LIMIT 5;"
    },
    {
        "NL": "Find all the orders with total price greater than 100 and the item is returnable.",
        "Query": "SELECT * FROM orders WHERE total_price > 100 AND returnable = TRUE"
    },
    {
        "NL": "Retrieve the official business name of suppliers who provide products with an expected restock date this month and have a supplier rating above 4.5, along with the names of customers who have ordered from these suppliers.",
        "Query": "SELECT T1.name, T2.customer_name FROM suppliers AS T1 INNER JOIN orders AS T2 ON T1.id = T2.supplier_id WHERE T1.restock_date BETWEEN NOW() AND NOW() + INTERVAL '1 month' AND T1.rating > 4.5"
    },
    {
        "NL": "Get the list of customers who have viewed their wishlist at least once and have made a purchase, along with their wishlist details, the number of reviews they have submitted, and the total amount spent by them. Include the event type and device platform for each customer.",
        "Query": "SELECT c.customer_id, c.name, c.email, c.wishlist_id, c.event_type, c.device_platform, COUNT(r.review_id) AS num_reviews, SUM(o.total_amount) AS total_spent, w.wishlist_details FROM customers c JOIN wishlist w ON c.customer_id = w.customer_id JOIN purchase o ON c.customer_id = o.customer_id JOIN review r ON c.customer_id = r.customer_id WHERE c.customer_id IN (SELECT customer_id FROM wishlist WHERE viewed = TRUE) GROUP BY c.customer_id"
    },
    {
        "NL": "List all customers who have registered after January 1, 2022, and have a loyalty point balance greater than 1000.",
        "Query": "SELECT * FROM customers WHERE registration_date > '2022-01-01' AND loyalty_points > 1000"
    },
    {
        "NL": "Find all reviews with a sentiment analysis score greater than 4 that were submitted by customers who have made more than 10 previous purchases and were reviewed on the same day as the last restock date of their associated product, excluding those products that are currently out of stock.",
        "Query": "SELECT reviews.* FROM reviews JOIN customers ON reviews.customer_id = customers.id JOIN products ON reviews.product_id = products.id WHERE reviews.sentiment_score > 4 AND customers.purchases_count > 10 AND reviews.review_date = (SELECT MAX(review_date) FROM reviews r JOIN products p ON r.product_id = p.id WHERE p.restock_date = (SELECT MIN(restock_date) FROM products p WHERE p.out_of_stock = FALSE))"
    },
    {
        "NL": "Find all products with a standard retail price greater than $50 and the customers who have redeemed more than 1000 loyalty points and have an anniversary reward voucher status as true.",
        "Query": "SELECT p.* ,  c.* FROM products p JOIN customers c ON p.customer_id = c.customer_id WHERE p.retail_price > 50 AND c.loyalty_points > 1000 AND c.anniversary_reward = TRUE"
    },
    {
        "NL": "Retrieve the first name, last name, and total discount amount redeemed for customers who are eligible for special promotions and have more than 1000 loyalty points.",
        "Query": "SELECT first_name, last_name, SUM(discount_amount) FROM customers WHERE loyalty_points > 1000 AND is_promo_eligible = TRUE GROUP BY first_name, last_name"
    },
    {
        "NL": "What is the total revenue generated by each campaign and the total amount spent by each order?",
        "Query": "SELECT campaign_id, SUM(revenue) AS total_revenue, SUM(amount) AS total_spent FROM orders GROUP BY campaign_id"
    },
    {
        "NL": "Find the total orders for each customer who has a preferred payment method and sort the results in ascending order.",
        "Query": "SELECT COUNT(*) ,  customer_id FROM orders WHERE payment_method IN ('credit card', 'paypal') GROUP BY customer_id ORDER BY COUNT(*) ASC"
    },
    {
        "NL": "Get the campaign name and total revenue generated for each campaign from the given campaign ID. Also, find the total billed amount in the transactions table for each campaign ID. Order the results by the total revenue in descending order.",
        "Query": "SELECT T1.campaign_name, T1.total_revenue, T2.total_billed FROM campaigns AS T1 INNER JOIN ( SELECT campaign_id, SUM(amount) AS total_billed FROM transactions GROUP BY campaign_id ) AS T2 ON T1.campaign_id = T2.campaign_id WHERE T1.campaign_id = 'given_campaign_id' ORDER BY T1.total_revenue DESC"
    },
    {
        "NL": "Calculate the total revenue generated by successful campaigns that ended in the last 30 days.",
        "Query": "SELECT SUM(campaign_revenue) FROM campaigns WHERE campaign_status = 'successful' AND campaign_end_date >= CURRENT_DATE - INTERVAL '30 days';"
    },
    {
        "NL": "Find the total number of products supplied by each supplier along with the corresponding inventory quantity for products with a safety stock greater than 10.",
        "Query": "SELECT COUNT(DISTINCT s.id) AS supplier_count ,  SUM(i.quantity) AS total_inventory FROM suppliers s JOIN products p ON s.id = p.supplier_id JOIN inventory i ON p.id = i.product_id WHERE i.quantity > 10 GROUP BY s.id"
    },
    {
        "NL": "List the customer loyalty program details for customers who have placed orders with a total amount greater than $100, including their loyalty points balance, loyalty tier level, and the campaign name for the order.",
        "Query": "SELECT c.loyalty_points, c.loyalty_tier, o.campaign_name FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING SUM(o.total_amount) > 100"
    },
    {
        "NL": "Find the total revenue generated by each campaign type along with the total quantity of inventory for each product",
        "Query": "SELECT SUM(c.revenue), SUM(p.quantity) FROM campaigns c JOIN campaign_products cp ON c.id = cp.campaign_id JOIN products p ON cp.product_id = p.id GROUP BY c.type"
    },
    {
        "NL": "List the average number of stars given by customers who have placed more than 10 orders.",
        "Query": "SELECT AVG(stars) FROM customers JOIN orders ON customers.id = orders.customer_id GROUP BY customers.id HAVING COUNT(orders.id) > 10"
    },
    {
        "NL": "Find the top 5 most purchased products with their average rating from customers who have purchased at least 2 products and have a loyalty membership tier level of Platinum, along with the total number of reviews for each product and the total loyalty points earned by each customer.",
        "Query": "SELECT product_id, AVG(rating) AS avg_rating, COUNT(review_id) AS total_reviews, SUM(loyalty_points) AS total_points FROM orders JOIN customers ON orders.customer_id = customers.customer_id JOIN products ON orders.product_id = products.product_id JOIN loyalty_program ON customers.customer_id = loyalty_program.customer_id WHERE loyalty_program.tier_level = 'Platinum' GROUP BY product_id HAVING COUNT(DISTINCT orders.product_id) >= 2 ORDER BY total_reviews DESC LIMIT 5"
    },
    {
        "NL": "Find the total revenue generated by campaigns that were successful, defined as campaigns with an actual spent less than the budget.",
        "Query": "SELECT SUM(campaign_budget) FROM campaigns WHERE campaign_status = 'successful' AND campaign_actual_spent < campaign_budget"
    },
    {
        "NL": "Retrieve the product display names and the number of orders for products that have been reviewed with a rating above 4 in the past month, along with the customer's first name and last name who placed the order.",
        "Query": "SELECT T1.product_name, COUNT(T2.order_id) FROM products AS T1 INNER JOIN orders AS T2 ON T1.product_id = T2.product_id INNER JOIN order_reviews AS T3 ON T2.order_id = T3.order_id WHERE T3.review_date >= NOW() - INTERVAL '1 month' AND T3.rating > 4 GROUP BY T1.product_name"
    },
    {
        "NL": "Get the total quantity of all products in the inventory with a stock status of 'in stock' and a warehouse location of 'main warehouse', along with the product identifier and last updated timestamp.",
        "Query": "SELECT SUM(quantity), product_id, last_updated FROM inventory WHERE stock_status = 'in stock' AND warehouse_location = 'main warehouse' GROUP BY product_id, last_updated"
    },
    {
        "NL": "Get the top 5 products with highest average customer review rating.",
        "Query": "SELECT product_id, AVG(review_rating) FROM customer_reviews GROUP BY product_id ORDER BY AVG(review_rating) DESC LIMIT 5;"
    },
    {
        "NL": "Get the average amount spent per order by each customer for orders placed in the last 30 days.",
        "Query": "SELECT AVG(o.amount) ,  c.customer_id ,  c.customer_name FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date >= NOW() - INTERVAL '30 days' GROUP BY c.customer_id ,  c.customer_name"
    },
    {
        "NL": "Retrieve all reviews where the reviewer is verified and the review has received more than 5 helpful votes.",
        "Query": "SELECT * FROM reviews WHERE verified = TRUE AND helpful_votes > 5"
    },
    {
        "NL": "Retrieve the details of products in the wishlist along with customer's first and last name for wishlists that have a reminder set and the product is still in stock.",
        "Query": "SELECT p.name, p.price, p.stock, c.first_name, c.last_name FROM products p JOIN wishlist w ON p.id = w.product_id JOIN customers c ON w.customer_id = c.id WHERE w.reminder = 'true' AND p.stock > 0"
    },
    {
        "NL": "Retrieve the details of products that have been returned more than once due to 'damaged' reasons, along with the average cart value of those returns and the customer's email who initiated the returns, excluding products that are no longer active.",
        "Query": "SELECT p.name, c.email, AVG(r.cart_value) FROM returns r JOIN customers c ON r.customer_id = c.id JOIN products p ON r.product_id = p.id WHERE r.return_reason = 'damaged' AND p.is_active = FALSE GROUP BY r.customer_id, r.product_id"
    },
    {
        "NL": "How many campaigns are of type 'email' and have an email open rate greater than 0.5?",
        "Query": "SELECT COUNT(*) FROM campaigns WHERE campaign_type = 'email' AND email_open_rate > 0.5;"
    },
    {
        "NL": "Which products are shipped to the same state where shipping status is 'Delivered' and estimated delivery is within the next 7 days?",
        "Query": "SELECT DISTINCT product_id FROM orders WHERE state = ( SELECT state FROM orders WHERE shipping_status = 'Delivered' AND estimated_delivery BETWEEN NOW() + INTERVAL '7 days' AND NOW() + INTERVAL '8 days' )"
    },
    {
        "NL": "Find the total billed amount and the transaction date for all transactions that were part of campaigns with an ROI greater than 100% and used the payment method 'Credit Card'.",
        "Query": "SELECT SUM(t.billed_amount) ,  t.transaction_date FROM transactions t JOIN campaign_transactions ct ON t.id = ct.transaction_id JOIN campaigns c ON ct.campaign_id = c.id WHERE c.ROI > 100 AND t.payment_method = 'Credit Card'"
    },
    {
        "NL": "Find the total amount spent by each customer on orders that included items with a warranty period of more than 1 year, and include only those orders which were shipped after January 1, 2023.",
        "Query": "SELECT SUM(o.total_amount) ,  c.customer_name FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id WHERE p.warranty_period > 1 AND o.ship_date > '2023-01-01' GROUP BY c.customer_name"
    },
    {
        "NL": "Find the total time spent on events by customers who have completed a survey, grouped by their device platform.",
        "Query": "SELECT SUM(CASE WHEN device_platform = 'Android' THEN event_duration ELSE 0 END) AS android_time, SUM(CASE WHEN device_platform = 'iOS' THEN event_duration ELSE 0 END) AS ios_time FROM customers WHERE survey_completed = TRUE"
    },
    {
        "NL": "Find the total number of push notifications clicked for events happening in the last 30 days.",
        "Query": "SELECT COUNT(*) FROM push_notifications WHERE created_at >= NOW() - INTERVAL '30 days'"
    },
    {
        "NL": "What are the total amount and order status of orders made by customers who have clicked push notifications and have also completed surveys, along with the total time spent and discount applied in their corresponding events?",
        "Query": "SELECT SUM(CASE WHEN status = 'completed' THEN amount ELSE 0 END) AS total_amount, SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) AS order_status, SUM(CASE WHEN status = 'completed' THEN time_spent ELSE 0 END) AS total_time_spent, SUM(CASE WHEN status = 'completed' THEN discount ELSE 0 END) AS total_discount FROM orders WHERE push_notification = 'true' AND survey_completed = 'true'"
    },
    {
        "NL": "List all orders that have a payment status of paid and were shipped via a carrier other than UPS",
        "Query": "SELECT * FROM orders WHERE status = 'paid' AND carrier != 'UPS'"
    },
    {
        "NL": "Get the first and last name of customers who have placed an order with a total amount of more than $1000 and have an active subscription.",
        "Query": "SELECT first_name, last_name FROM customers WHERE total_amount > 1000 AND active_subscription = true"
    },
    {
        "NL": "Find the loyalty membership unique identifiers for customers who made more than $1000 in transactions and received a special discount on their birthday.",
        "Query": "SELECT DISTINCT loyalty_membership_id FROM customers WHERE total_transactions > 1000 AND birthday_discount = 'yes'"
    },
    {
        "NL": "Get the number of customers who are premium and have more than 10000 loyalty points.",
        "Query": "SELECT COUNT(*) FROM customers WHERE premium = 't' AND loyalty_points > 10000;"
    },
    {
        "NL": "What is the average total amount of orders for each city, along with the corresponding number of orders and customers in that city?",
        "Query": "SELECT avg(total_amount) AS avg_total_amount, count(*) AS num_orders, count(DISTINCT customer_id) AS num_customers FROM orders GROUP BY city"
    },
    {
        "NL": "Retrieve the product display names and their associated supplier reference IDs for products that have been in stock for less than 10 units and have not been restocked since before January 1, 2023, and are in the 'Electronics' category.",
        "Query": "SELECT t1.display_name, t2.supplier_reference_id FROM products AS t1 INNER JOIN product_suppliers AS t2 ON t1.id = t2.product_id WHERE t1.in_stock < 10 AND t1.restock_date < '2023-01-01' AND t1.category = 'Electronics'"
    },
    {
        "NL": "What are the product names and prices of the items in the cart for a specific user?",
        "Query": "SELECT T1.name, T1.price FROM cart AS T1 JOIN cart_items AS T2 ON T1.id = T2.cart_id JOIN products AS T3 ON T3.id = T2.product_id WHERE T1.user_id = 1"
    },
    {
        "NL": "Find the total number of transactions made by customers who have an active subscription, have a premium account, and have made a purchase in the last 30 days, and also find the average loyalty points earned by these customers, and the total average amount spent per order by these customers, and the average review score given by these customers for their transactions.",
        "Query": "SELECT COUNT(*) ,  AVG(loyalty_points) ,  AVG(total_amount) ,  AVG(review_score) FROM transactions WHERE subscription_status = 'active' AND account_type = 'premium' AND purchase_date >= NOW() - INTERVAL '30 days'"
    },
    {
        "NL": "Find the average click count and total cart value for events of type 'Product View' on the 'Android' platform.",
        "Query": "SELECT AVG(click_count) ,  SUM(total_cart_value) FROM events WHERE event_type = 'Product View' AND platform = 'Android';"
    },
    {
        "NL": "Find the total number of products that are active and have more than 1000 verified reviews.",
        "Query": "SELECT COUNT(*) FROM products WHERE active = TRUE AND verified_reviews > 1000;"
    },
    {
        "NL": "Find the number of suppliers for each country of operation, sorted in descending order.",
        "Query": "SELECT COUNT(DISTINCT country) ,  country FROM suppliers GROUP BY country ORDER BY COUNT(DISTINCT country) DESC"
    },
    {
        "NL": "Retrieve the total refund amount and the date when the refund was processed for orders that had events marked as 'Return'.",
        "Query": "SELECT SUM(orders.total_refund), orders.processed_date FROM orders JOIN order_events ON orders.id = order_events.order_id WHERE order_events.event = 'Return';"
    },
    {
        "NL": "Find the total number of customers who are eligible for special promotions.",
        "Query": "SELECT COUNT(*) FROM customers WHERE is_eligible_for_promotions = TRUE"
    },
    {
        "NL": "Find all products that have a standard retail price greater than 200 and an available stock quantity in units greater than 10",
        "Query": "SELECT * FROM products WHERE retail_price > 200 AND stock_quantity > 10"
    },
    {
        "NL": "List all the customers who have two-factor authentication enabled and their loyalty points",
        "Query": "SELECT customers.name, customers.loyalty_points FROM customers JOIN two_factor_auth ON customers.id = two_factor_auth.customer_id"
    },
    {
        "NL": "What is the average total transaction amount for orders with a total amount greater than $1000, and what is the average number of loyalty points earned for these transactions, considering only customers who have participated in the exclusive beta testing program and have a loyalty membership unique identifier greater than 5000, and have made a payment using the same billing and shipping address, and have not had any chargeback requests, and their transaction status is 'completed', and the transaction date and time is within the last 6 months?",
        "Query": "SELECT AVG(total_amount) AS avg_total_amount, AVG(loyalty_points) AS avg_loyalty_points FROM orders WHERE total_amount > 1000 AND customer_id IN (SELECT customer_id FROM beta_testers WHERE loyalty_membership_id > 5000) AND billing_address = shipping_address AND chargeback_requests = 0 AND transaction_status = 'completed' AND transaction_date >= NOW() - INTERVAL '6 months';"
    },
    {
        "NL": "Analyze the inventory data to identify products that are frequently restocked but have low sales volume. Specifically, find products that have been restocked more than 5 times in the last year, have a stock turnover rate less than 0.5, and have not been part of any completed orders within the last year. Additionally, include the last updated timestamp, expiry date, and the total quantity sold for each product.",
        "Query": "SELECT p.product_id, p.product_name, p.last_updated, p.expiry_date, SUM(o.quantity) AS total_quantity_sold, COALESCE(SUM(o.quantity), 0) / COALESCE(SUM(p.quantity), 1) AS stock_turnover_rate FROM products p LEFT JOIN orders o ON p.product_id = o.product_id WHERE o.order_status = 'completed' AND o.order_date < CURRENT_DATE - INTERVAL '1 year' AND p.restock_count > 5 AND p.stock_turnover_rate < 0.5 GROUP BY p.product_id, p.product_name, p.last_updated, p.expiry_date"
    },
    {
        "NL": "Retrieve the average time spent on the site by customers who clicked on a promotion email and placed an order.",
        "Query": "SELECT AVG(T2.time_spent) FROM promotions AS T1 INNER JOIN orders AS T2 ON T1.id = T2.promotion_id"
    },
    {
        "NL": "List the number of customers grouped by their marital status and average income.",
        "Query": "SELECT COUNT(*) ,  AVG(income) ,  marital_status FROM customers GROUP BY marital_status"
    },
    {
        "NL": "Retrieve the total discounted price and the estimated delivery date for all items in the cart that are also available in the products table.",
        "Query": "SELECT SUM(p.price - d.discount) AS total_discounted_price, p.estimated_delivery_date FROM cart c JOIN products p ON c.product_id = p.id"
    },
    {
        "NL": "Find the total loyalty points earned by customers who have made transactions in the last month and have an anniversary reward voucher status of true",
        "Query": "SELECT SUM(loyalty_points) FROM customers WHERE created_at > NOW() - INTERVAL '1 month' AND anniversary_reward = TRUE"
    },
    {
        "NL": "Find the number of events where the event type is 'ORDER_COMPLETION' and the device platform is 'ANDROID', and the customer has also left a review with 5 stars. Then, group these events by the event timestamp and find the total number of such events for each group. Finally, find the top 5 results with the highest total number of events.",
        "Query": "SELECT COUNT(*) ,  EXTRACT(EPOCH FROM timestamp) AS timestamp ,  COUNT(*) FROM events WHERE event_type = 'ORDER_COMPLETION' AND device_platform = 'ANDROID' AND review_rating = 5 GROUP BY EXTRACT(EPOCH FROM timestamp) ORDER BY COUNT(*) DESC LIMIT 5"
    },
    {
        "NL": "Find all users who have 'free shipping eligibility' as true and also have products in the wishlist which are currently out of stock.",
        "Query": "SELECT * FROM users JOIN wishlist ON users.id = wishlist.user_id JOIN products ON wishlist.product_id = products.id WHERE products.in_stock = 'false' AND users.free_shipping_eligibility = 'true'"
    },
    {
        "NL": "Get the total value of all carts for users who have completed a survey and have a cart status of 'active'",
        "Query": "SELECT SUM(total_value) FROM carts WHERE user_id IN (SELECT user_id FROM surveys WHERE status = 'completed') AND status = 'active';"
    },
    {
        "NL": "Find the total shipping costs and the estimated delivery dates for orders that were part of successful campaigns (ROI > 100%) and had at least one item that was part of a refund request. Include the campaign name, shipping carrier, and the total price of items in the order.",
        "Query": "SELECT SUM(o.total_price), o.estimated_delivery_date, c.campaign_name, s.shipping_carrier FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN campaigns c ON o.campaign_id = c.id JOIN refunds r ON oi.refund_id = r.id JOIN shipping s ON o.shipping_id = s.id WHERE c.ROI > 100 AND r.refund_status = 'approved'"
    },
    {
        "NL": "Get the campaign name and total reach for campaigns where the target audience is the same as the brand name of products in the wishlist",
        "Query": "SELECT T1.campaign_name, T1.total_reach FROM campaigns AS T1 INNER JOIN wishlist AS T2 ON T1.target_audience = T2.brand_name"
    },
    {
        "NL": "Find the number of events where a survey was completed.",
        "Query": "SELECT COUNT(*) FROM events WHERE survey_completed = TRUE;"
    },
    {
        "NL": "Find the total number of customers who have participated in the exclusive beta testing and have a loyalty membership unique identifier greater than 50000.",
        "Query": "SELECT COUNT(*) FROM customers WHERE beta_tester = 'true' AND loyalty_membership_id > 50000"
    },
    {
        "NL": "Find all the chargeback dispute reasons from the transactions_and_payments table.",
        "Query": "SELECT reason FROM transactions_and_payments"
    },
    {
        "NL": "Get the product identifier, review rating, and review feedback for reviews with a rating greater than 4 and a review length greater than 100 characters.",
        "Query": "SELECT product_id, review_rating, review_feedback FROM reviews WHERE review_rating > 4 AND review_length > 100"
    },
    {
        "NL": "Find the average shipping fee for orders that were created from carts where the estimated delivery date is before June 1, 2023, and the cart status is 'completed'.",
        "Query": "SELECT AVG(s.shipping_fee) FROM orders o JOIN carts c ON o.cart_id = c.id JOIN shipments s ON o.id = s.order_id WHERE c.estimated_delivery_date < '2023-06-01' AND c.status = 'completed'"
    },
    {
        "NL": "Get the refund amount and refund status for all refunds where the refund method is 'credit' and the status is 'processed'.",
        "Query": "SELECT refund_amount, refund_status FROM refunds WHERE refund_method = 'credit' AND refund_status = 'processed';"
    },
    {
        "NL": "Find the names of customers who have accumulated more than 1000 loyalty points and are eligible for special promotions.",
        "Query": "SELECT name FROM customers WHERE points > 1000 AND is_eligible_for_promotions"
    },
    {
        "NL": "Retrieve the first name, last name, and total amount spent by each premium customer in transactions, along with the number of transactions they made.",
        "Query": "SELECT T1.first_name, T1.last_name, SUM(T2.amount) AS total_amount, COUNT(T2.id) AS num_transactions FROM customers AS T1 INNER JOIN transactions AS T2 ON T1.id = T2.customer_id WHERE T1.premium = TRUE GROUP BY T1.id"
    },
    {
        "NL": "Retrieve the total transaction amounts and referral bonus points earned for customers who participated in the exclusive beta testing and have personalized product recommendations.",
        "Query": "SELECT SUM(t.amount) AS total_amount, SUM(r.points) AS referral_points FROM transactions t JOIN referrals r ON t.customer_id = r.customer_id WHERE t.tested = 'true' AND r.recommended = 'true'"
    },
    {
        "NL": "What are the product names and quantities of all items in orders with a total price greater than $100?",
        "Query": "SELECT T1.product_name, T1.quantity FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.total_price > 100"
    },
    {
        "NL": "Retrieve details of all wishlisted products where the price at addition is less than 50% of the current purchase price of the product in inventory, and the product has been on the wishlist for more than 30 days but has not been viewed in the last 15 days, also provide the name of the product, the user's ID who added it to the wishlist, and the current stock status of the product.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the shipping status of the orders which have estimated delivery before '2022-01-01'?",
        "Query": "SELECT shipping_status FROM orders WHERE estimated_delivery < '2022-01-01'"
    },
    {
        "NL": "Retrieve all product names and their associated supplier reference IDs for products that have a minimum threshold for restocking set to 5 or less and have a promotional discount applied, showing only active products.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all orders where the total amount is greater than 100 and the shipping fee is less than 20.",
        "Query": "SELECT * FROM orders WHERE total_amount > 100 AND shipping_fee < 20"
    },
    {
        "NL": "Retrieve the number of unique customers who added items to their wishlist from a mobile device and have at least one item with a reminder set.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total amount and tax amount for all orders?",
        "Query": "SELECT SUM(total_amount) AS total_amount, SUM(tax_amount) AS tax_amount FROM orders"
    },
    {
        "NL": "List the event types and their timestamps for customers who have a loyalty points balance greater than 500, and find out the event types that occurred on weekends.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Show all reviews with a star rating greater than 4.",
        "Query": "SELECT * FROM reviews WHERE rating > 4;"
    },
    {
        "NL": "Find the names of the customers who made previous purchases and submitted reviews with more than 4 stars and are verified, and their corresponding review ratings.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all customer information with their review ratings and the associated review image URLs for customers who have submitted a review with a rating of 5 stars and number of helpful votes received is greater than 10.",
        "Query": "SELECT c.*, r.rating, r.review_image_url FROM customers c JOIN reviews r ON c.customer_id = r.customer_id WHERE r.rating = 5 AND r.helpful_votes > 10"
    },
    {
        "NL": "Find the total amount spent on all orders for which email was opened and the payment method was 'PayPal'.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total revenue generated by all campaigns with a budget greater than $1000, along with the total number of clicks and impressions for each campaign, and also include the number of customers who made a purchase after clicking on an ad, and the total amount they spent, grouped by campaign name",
        "Query": "SELECT SUM(campaign_budget) AS total_revenue, COUNT(campaign_id) AS total_clicks, COUNT(impression_id) AS total_impressions, COUNT(purchase_id) AS total_customers, SUM(purchase_amount) AS total_spent FROM campaigns JOIN clicks ON campaigns.campaign_id = clicks.campaign_id JOIN impressions ON clicks.campaign_id = impressions.campaign_id JOIN purchases ON clicks.campaign_id = purchases.campaign_id WHERE campaigns.campaign_budget > 1000 GROUP BY campaigns.campaign_name"
    },
    {
        "NL": "List the total amount and discount applied for each order for orders made in 2023.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all orders that were shipped in the last month and list their shipping status, estimated delivery date, and shipping cost.",
        "Query": "SELECT * FROM orders WHERE shipped_at >= NOW() - INTERVAL '1 month' AND shipped_at IS NOT NULL AND shipping_status IN ('shipped', 'in transit') AND estimated_delivery_date IS NOT NULL AND shipping_cost > 0"
    },
    {
        "NL": "What are the product names and average review ratings of all products that have more than 100 reviews?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the average total price of all order items shipped to customers in the state of New York, along with the count of such orders.",
        "Query": "SELECT AVG(total_price) ,  COUNT(*) FROM orders JOIN order_items ON orders.id = order_items.order_id JOIN customers ON orders.customer_id = customers.id WHERE customers.state = 'New York';"
    },
    {
        "NL": "Calculate the total refund amount for each product that was part of a campaign and identify the campaign name and type for each product.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the last restock date and the primary contact person name for suppliers who have supplied products with a purchase price greater than 100.",
        "Query": "SELECT T2.last_restock_date, T1.name FROM suppliers AS T1 INNER JOIN supplier_products AS T2 ON T1.id = T2.supplier_id WHERE T2.purchase_price > 100 ORDER BY T2.last_restock_date DESC LIMIT 1"
    },
    {
        "NL": "Find the email open rate, campaign name, and shipping cost for each campaign, along with the estimated delivery date and shipping address of the corresponding shipping order.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total amount for orders and the corresponding order item id where payment status is paid?",
        "Query": "SELECT SUM(total_amount) ,  i.order_item_id FROM orders o JOIN order_items i ON o.order_id = i.order_id WHERE o.payment_status = 'paid'"
    },
    {
        "NL": "Find the total final billed amount for all transactions that occurred in the year 2022 and had a refund initiated.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the customer details of all premium users who have an active subscription and have made more than 10 orders.",
        "Query": "SELECT * FROM customers WHERE subscription_status = 'premium' AND orders_count > 10"
    },
    {
        "NL": "Find all customers who have at least one item in their wishlist and have an active subscription, along with the estimated delivery date of their shipments.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the average star rating given by customers who have made more than 5 previous purchases?",
        "Query": "SELECT AVG(star_rating) FROM customers WHERE id IN (SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(*) > 5)"
    },
    {
        "NL": "Find the official supplier business name, registered business address, and primary contact person name for each supplier who has supplied products to a customer who has placed an order, returned or requested a refund on a product that was added to their wishlist during the last 6 months, and also find the campaign name for each campaign that has a budget greater than the average spent for each campaign, the campaign start date, and the campaign end date.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Identify the top 10 suppliers with the highest average supplier rating, and list the total number of products they have supplied, the total quantity of their products in the inventory, and the average purchase price of their products. Also, find the average rating of the reviews for their products and the total number of reviews for their products. Filter the results to only include suppliers who have supplied products with a shelf life of more than 30 days.",
        "Query": "SELECT supplier_id, COUNT(DISTINCT product_id) AS total_products, SUM(quantity) AS total_quantity, AVG(purchase_price) AS avg_purchase_price, AVG(rating) AS avg_rating, COUNT(rating) AS total_reviews FROM supplier_product JOIN product ON supplier_product.product_id = product.product_id JOIN product_review ON product.product_id = product_review.product_id WHERE product.shelf_life > 30 GROUP BY supplier_id ORDER BY avg_rating DESC LIMIT 10;"
    },
    {
        "NL": "Find the total billed amount for all transactions initiated by customers from a specific country, say 'USA', who made a payment using a digital wallet.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total revenue generated from campaigns that used the discount code 'SUMMER2023'.",
        "Query": "SELECT SUM(total_revenue) FROM campaigns WHERE discount_code = 'SUMMER2023';"
    },
    {
        "NL": "Find all refund requests that were processed within the last 30 days and were made for products supplied by 'TechGiants Inc.'.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the campaign names and their corresponding campaign statuses?",
        "Query": "SELECT campaign_name, campaign_status FROM campaigns"
    },
    {
        "NL": "Find all customers who have shopped at least once, have a loyalty membership, and have provided feedback with an engagement score greater than 0.5. Also, list the average rating of the products they have reviewed, the total loyalty points they have accumulated, and the number of times they have edited their reviews. Filter the results to only include customers who are eligible for special promotions and have a loyalty tier level of 'Gold' or higher.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the total number of products supplied, average supplier rating, primary contact person name, and primary contact email address for each supplier who has not supplied any products to a customer who has placed an order and also has not supplied any products to a customer who has returned or requested a refund on a product that was added to their wishlist during the last 6 months, and also find the campaign name for each campaign that has a budget greater than the average spent for each campaign, the campaign start date, and the campaign end date.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total transaction amount and the average final billed amount for each order status from the transactions_and_payments and orders tables, excluding fraudulent transactions.",
        "Query": "SELECT SUM(t.amount) AS total_amount, AVG(o.final_billed_amount) AS avg_final_billed_amount, o.status FROM transactions_and_payments t JOIN orders o ON t.order_id = o.id WHERE t.is_fraudulent = FALSE GROUP BY o.status"
    },
    {
        "NL": "Find the average transaction amount for each customer who has placed at least one transaction and also has orders in their cart, excluding those who have not logged in for more than a year.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of orders made by customers who have given 5-star reviews and have purchased a product at least twice, along with the total amount spent by these customers and the average sentiment analysis score of their reviews",
        "Query": "SELECT COUNT(DISTINCT o.customer_id) ,  SUM(o.total_amount) ,  AVG(r.sentiment_score) FROM orders o JOIN reviews r ON o.customer_id = r.customer_id WHERE r.sentiment_score = 5 AND o.order_id IN (SELECT order_id FROM orders GROUP BY order_id HAVING COUNT(order_id) > 1);"
    },
    {
        "NL": "Find the campaign id and total reach of all campaigns with a budget greater than $1000.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the count of customers with free shipping eligibility set to true?",
        "Query": "SELECT COUNT(*) FROM customers WHERE free_shipping = TRUE;"
    },
    {
        "NL": "Find the customer birthday special discount status and the total discount amount redeemed for customers who have placed orders with a total amount greater than $50 and have a loyalty program tier level of 'Gold', including the product name and quantity of each order item, and the total transaction amount, grouped by the customer reference ID?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the average annual loyalty spending threshold for customers who have participated in exclusive beta testing and have a higher total reach than the average total reach of all campaigns.",
        "Query": "SELECT AVG(loyalty_spending) FROM customers WHERE beta_tester = TRUE AND total_reach > (SELECT AVG(total_reach) FROM campaigns)"
    },
    {
        "NL": "List all campaigns that ended before January 1, 2023.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the product names and average ratings of products with more than 5 reviews in the wishlist?",
        "Query": "SELECT T1.name, AVG(T2.rating) FROM products AS T1 INNER JOIN wishlist AS T2 ON T1.id = T2.product_id GROUP BY T1.id HAVING COUNT(T2.review_id) > 5"
    },
    {
        "NL": "What are the product names and the total price of each order item for all the orders with the campaign name 'Campaign X'?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the total number of loyalty points earned by each customer who has participated in the exclusive beta testing program.",
        "Query": "SELECT COUNT(*) FROM customers JOIN beta_testers ON customers.customer_id = beta_testers.customer_id"
    },
    {
        "NL": "Find the total shipping cost for each order that has an estimated delivery date later than January 1, 2023, and list the results sorted by the shipping cost in descending order.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the average review rating of products with a retail price higher than 500 and a minimum threshold for restocking higher than 50, and what is the average textual review feedback length of these reviews?",
        "Query": "SELECT AVG(rating) AS avg_rating, AVG(LENGTH(review)) AS avg_review_length FROM reviews WHERE retail_price > 500 AND restocking_threshold > 50"
    },
    {
        "NL": "Get the average loyalty points of customers who have made at least one order",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total amount of all orders placed and the corresponding final billed amount for transactions where the first time customer transaction flag is true.",
        "Query": "SELECT SUM(total_amount) AS total_amount, SUM(billed_amount) AS final_billed_amount FROM orders WHERE first_time_customer = TRUE;"
    },
    {
        "NL": "List the campaign names and the number of customers who have made a purchase through each campaign in the last 60 days.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of customers who are premium members and have made at least one order in the last year, along with the average time spent on the site.",
        "Query": "SELECT COUNT(DISTINCT c.customer_id) AS premium_customers, AVG(o.order_time) FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_time >= NOW() - INTERVAL '1 year' AND c.premium = TRUE;"
    },
    {
        "NL": "Find the total amount spent by customers who have made more than one transaction.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total revenue generated from all campaigns that ended after January 1, 2023.",
        "Query": "SELECT SUM(t2.revenue) FROM campaigns AS t1 INNER JOIN campaign_revenue AS t2 ON t1.id = t2.campaign_id WHERE t1.end_date > '2023-01-01'"
    },
    {
        "NL": "Find the customers who have purchased products with an average rating greater than 4 and get the product name and rating for each of them.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "How many orders were placed during a campaign with id 1?",
        "Query": "SELECT COUNT(*) FROM orders WHERE campaign_id = 1"
    },
    {
        "NL": "List the customers who have ordered items with a warranty period of more than 2 years.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all transactions where the customer has not previously made a purchase and the order was shipped to a billing address in the same city as the shipping address.",
        "Query": "SELECT * FROM transactions WHERE customer_id NOT IN (SELECT customer_id FROM orders) AND billing_city = shipping_city"
    },
    {
        "NL": "What is the total amount spent by customers who have accumulated more than 1000 loyalty points and have placed orders with a total amount greater than $100, including the total discount applied and the tax amount, grouped by the loyalty program tier level?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the average star rating of reviews for products with a net weight greater than 1 kilogram.",
        "Query": "SELECT AVG(r.rating) FROM reviews r JOIN products p ON r.product_id = p.id WHERE p.net_weight > 1"
    },
    {
        "NL": "Find the average rating of suppliers that have supplied more than 100 products.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get all wishlist items for users who have placed orders with a payment status of 'paid' and order status of 'delivered' and also get the shipping details of those orders.",
        "Query": "SELECT w.id, w.user_id, o.id AS order_id, o.payment_status, o.order_status, s.shipping_address, s.shipping_city, s.shipping_state, s.shipping_zip, s.shipping_country FROM wishlist_items w JOIN orders o ON w.user_id = o.user_id JOIN shipping_details s ON o.id = s.order_id WHERE o.payment_status = 'paid' AND o.order_status = 'delivered'"
    },
    {
        "NL": "Which customers have accumulated more than 1000 loyalty points and are eligible for free shipping?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the average time spent per session and the average cart value for sessions where the email was opened and a push notification was clicked.",
        "Query": "SELECT AVG(T1.time_spent) AS avg_time_spent, AVG(T2.cart_value) AS avg_cart_value FROM sessions AS T1 INNER JOIN session_details AS T2 ON T1.session_id = T2.session_id WHERE T1.email_opened = TRUE AND T2.push_notification_clicked = TRUE"
    },
    {
        "NL": "Find the total revenue generated by each campaign along with the total number of transactions made during the campaign's active period.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all the customers who have a total order value greater than $1000, have their newsletter subscription enabled, have a premium account, and have returned at least one product with a restocking fee, and also find the average number of products supplied by the supplier with the highest average supplier rating who is operating in the same country as the customer, and the total shipping cost for all the orders of these customers.",
        "Query": "SELECT (SUM(oi.total_amount) - SUM(oi.restocking_fee)) AS total_order_value, c.country, c.newsletter_subscription, c.premium_account, c.supplier_id, s.supplier_rating, s.country, AVG(o.num_products) AS avg_products, SUM(o.shipping_cost) AS total_shipping_cost FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN order_items oi ON o.order_id = oi.order_id JOIN suppliers s ON oi.supplier_id = s.supplier_id WHERE c.newsletter_subscription = 'true' AND c.premium_account = 'true' AND c.country = s.country AND o.total_amount - oi.restocking_fee > 1000 GROUP BY c.country, c.newsletter_subscription, c.premium_account, s.supplier_rating, s.country, o.supplier_id, o.total_amount, oi.restocking_fee"
    },
    {
        "NL": "Find the total revenue generated by campaigns that targeted customers who prefer a specific favorite category.",
        "Query": "SELECT SUM(c.revenue) FROM campaigns c JOIN customer_preferences cp ON c.customer_id = cp.customer_id JOIN favorite_categories fc ON cp.category_id = fc.id WHERE fc.category_name = 'specific_category_name';"
    },
    {
        "NL": "Identify the highest and lowest stock levels for products supplied by suppliers who have an average supplier rating of less than 3.5, along with the product's last updated date and the supplier's official business name.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the average refund amount and status for each return type?",
        "Query": "SELECT AVG(amount), status, return_type FROM refunds GROUP BY return_type"
    },
    {
        "NL": "Find all the transactions where the payment method used is 'visa' and the corresponding customer reference identifier is 12345.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the order id, total amount, and shipping fee for all orders with a payment status of 'paid' and a total amount greater than 100.",
        "Query": "SELECT order_id, total_amount, shipping_fee FROM orders WHERE payment_status = 'paid' AND total_amount > 100"
    },
    {
        "NL": "Which customers have spent more than $1000 in the last year and have a lifetime loyalty points earned of more than 5000, and also show the average loyalty points balance and the count of orders for these customers, including the top 3 products they have ordered with the highest retail price?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the number of orders and total amount of all orders for each shipping state that have a discount applied.",
        "Query": "SELECT COUNT(*) ,  SUM(total_amount) ,  COUNT(*) AS num_orders ,  SUM(total_amount) AS total_amount FROM orders WHERE discount IS NOT NULL GROUP BY shipping_state"
    },
    {
        "NL": "Find all the carts where the total price is greater than 50 and the cart status is 'active'.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total amount spent by customers who have accumulated more than 1000 loyalty points, have a loyalty program tier level of 'gold', have not had any chargeback requests, have made a payment using the same billing and shipping address, have purchased at least one item with a price per unit greater than $50, and have a customer feedback engagement score greater than 4, and what is the average number of loyalty points earned by these customers, considering only orders with a total amount greater than $500 and a delivery date within the last 3 months?",
        "Query": "SELECT AVG(loyalty_points) FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE c.loyalty_tier = 'gold' AND c.loyalty_points > 1000 AND c.chargeback_requests = 0 AND c.billing_address = c.shipping_address AND c.customer_feedback_engagement_score > 4 AND o.total_amount > 500 AND o.delivery_date >= NOW() - INTERVAL '3 months'"
    },
    {
        "NL": "Get the total number of orders, total transaction amount, and average loyalty points earned per order for customers who have made a purchase in the last 30 days, have a premium account, and have a total of at least 2 wishlist items, along with the average scroll depth percentage and click count for these customers",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total revenue generated by each campaign along with the number of total conversions and the number of products added to wishlists during the campaign period.",
        "Query": "SELECT campaign_id, SUM(revenue) AS total_revenue, COUNT(conversion_id) AS total_conversions, COUNT(wishlist_product_id) AS wishlist_products FROM campaign WHERE start_date <= CURRENT_DATE AND end_date >= CURRENT_DATE GROUP BY campaign_id"
    },
    {
        "NL": "What are the total amounts of orders made by each customer who has left a review?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "List all products that have been added to a wishlist with a priority level of high and are currently out of stock, along with the customer's notes and the product's detailed description, considering only products that have a standard retail price less than $50 and are from a specific brand.",
        "Query": "SELECT w.product_id, p.description, p.standard_retail_price, p.brand, c.notes FROM wishlist w JOIN products p ON w.product_id = p.id JOIN customers c ON w.customer_id = c.id WHERE p.standard_retail_price < 50 AND p.priority_level = 'high' AND p.stock_status = 'out_of_stock' AND p.brand = 'specific_brand';"
    },
    {
        "NL": "Retrieve all reviews that have been flagged as inappropriate and the customer's first and last name.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the product display name and the average review star rating for all products that have received at least 5 reviews.",
        "Query": "SELECT T1.display_name, AVG(T2.review_star_rating) FROM products AS T1 INNER JOIN reviews AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_id HAVING COUNT(T2.review_id) >= 5"
    },
    {
        "NL": "Get the total discount amount redeemed by customers in the loyalty program.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the number of reviews and ratings where the review was flagged as inappropriate.",
        "Query": "SELECT COUNT(r.id) FROM reviews r JOIN ratings ON r.id = ratings.review_id WHERE r.flagged = 'true';"
    },
    {
        "NL": "Retrieve the average star rating for products that have received more than 50 helpful votes.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "For all the customers who have both placed an order and added at least one item to their wishlist, display the customer's name, order count, wishlist count, and average order total amount.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the transaction details of all fraudulent transactions.",
        "Query": "SELECT * FROM transactions WHERE amount < 0 OR (amount > 1000 AND status = 'fraudulent')"
    },
    {
        "NL": "What is the average amount spent per order for customers with a premium account?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of loyalty points accumulated by customers who have redeemed more than 100 loyalty points and have at least one product in their cart with a promotional discount of more than 20%.",
        "Query": "SELECT COUNT(*) FROM customers c JOIN carts ON c.customer_id = carts.customer_id JOIN cart_items ON carts.cart_id = cart_items.cart_id JOIN products ON cart_items.product_id = products.product_id WHERE c.loyalty_points > 100 AND products.discount > 20"
    },
    {
        "NL": "Find all reviews with a rating of 5 and the customer has edited the review at least once.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the shipping details for all orders where the shipping status is 'delivered', along with the total price of items in those orders.",
        "Query": "SELECT shipping_address, shipping_city, shipping_state, shipping_zip, total_price FROM orders WHERE shipping_status = 'delivered'"
    },
    {
        "NL": "Find the customer information and transaction details of all customers who have applied for a refund, along with the refund amount and the product they purchased, also including the shipping address and the estimated delivery date. Ensure that the customer is not a premium customer and the transaction amount is greater than 100.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total amount of transactions for customers who have placed an order with a total amount greater than 100, have a loyalty program status with a balance greater than 100, and have made a transaction in the last 30 days. Also, include the customer's name and order status in the results.",
        "Query": "SELECT SUM(t.total_amount) ,  c.name ,  o.status FROM orders o JOIN customers c ON o.customer_id = c.customer_id JOIN transactions t ON o.order_id = t.order_id WHERE t.transaction_date >= NOW() - INTERVAL '30 days' AND o.total_amount > 100 AND c.loyalty_balance > 100"
    },
    {
        "NL": "Find all products that have an average customer review rating greater than or equal to 4.5, and are supplied by a supplier with an average supplier rating greater than or equal to 4.5, and have a standard retail price including tax less than or equal to $100, and are flagged as environmentally sustainable, and are featured products, and have a total number of verified reviews greater than or equal to 1000, and have a shipping weight measurement in kilograms less than or equal to 5 kilograms.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the total transaction amount for each transaction where the transaction status is 'completed' and the fraud detection flagged is false.",
        "Query": "SELECT SUM(amount) FROM transactions WHERE status = 'completed' AND fraud_detection_flagged = false;"
    },
    {
        "NL": "Find the total number of products supplied by each supplier, and the average rating of each supplier, and the total number of verified reviews for each product supplied by each supplier, and the average retail price of each product supplied by each supplier, and the total number of transactions made for each product supplied by each supplier.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of premium customers who have made more than 10 orders and have a loyalty points balance greater than 500.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all customers who have initiated a refund and have a transaction status of 'Completed'.",
        "Query": "SELECT * FROM customers WHERE refund_id IN (SELECT refund_id FROM refunds WHERE transaction_status = 'Completed')"
    },
    {
        "NL": "Find the total number of customers who have an active subscription and are over 30 years old.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the average star rating of reviews for products that have received more than 50 helpful votes and were submitted by premium customers who have made more than 10 purchases, along with the customer's first name and last name, filtering out reviews that are flagged as inappropriate and sorting the results by the customer's last name in descending order.",
        "Query": "SELECT AVG(r.rating) ,  p.first_name ,  p.last_name FROM reviews r JOIN customers c ON r.customer_id = c.customer_id JOIN products p ON r.product_id = p.product_id WHERE r.helpful_votes > 50 AND c.premium_customer = TRUE AND c.purchases > 10 AND r.appropriate = TRUE GROUP BY p.first_name ,  p.last_name ORDER BY p.last_name DESC"
    },
    {
        "NL": "Find the total number of orders placed by customers who are premium members and have an active subscription.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the details of all campaigns that have a start date later than '2022-01-01' and are of type 'email'",
        "Query": "SELECT * FROM campaigns WHERE start_date > '2022-01-01' AND campaign_type = 'email';"
    },
    {
        "NL": "What is the number of customers who are eligible for special promotions and have accumulated more than 1000 loyalty points, along with the total discount amount redeemed and the total number of helpful votes received by reviews submitted by these customers, grouped by the loyalty program tier level?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the number of orders shipped in the past 24 hours, grouped by shipping status.",
        "Query": "SELECT COUNT(*) ,  shipping_status FROM orders WHERE created_at > NOW() - INTERVAL '24 hour' GROUP BY shipping_status"
    },
    {
        "NL": "Find all non-premium customers who have not placed any orders this year and have a subscription, list their email, phone number, and last login date.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the average shipping cost for orders that have been shipped and have a shipping status of 'delivered'?",
        "Query": "SELECT AVG(shipping_cost) FROM orders WHERE shipping_status = 'delivered'"
    },
    {
        "NL": "What are the order IDs and shipping costs for orders that have been shipped and have a shipping status of 'delivered'?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total revenue generated for each campaign along with the total shipping cost for the corresponding orders",
        "Query": "SELECT SUM(o.total_amount - o.shipping_cost) AS total_revenue, SUM(o.shipping_cost) AS total_shipping_cost FROM orders o JOIN campaigns c ON o.campaign_id = c.id GROUP BY c.id"
    },
    {
        "NL": "List all customers who have a newsletter subscription and their wishlist items.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of loyalty points for customers with free shipping eligibility and the average supplier rating of their suppliers.",
        "Query": "SELECT COUNT(*) ,  AVG(s.rating) FROM customers c JOIN supplier_ratings sr ON c.id = sr.customer_id JOIN suppliers s ON sr.supplier_id = s.id WHERE s.free_shipping = 'true'"
    },
    {
        "NL": "Find all reviews that have a sentiment analysis score greater than or equal to 0.8, and are from customers who have made at least 5 previous purchases, and have a review approval moderation status of 'Approved', and have a review moderator note containing the word 'Excellent', and are associated with products that have a standard retail price including tax greater than $50, and are from suppliers with an average supplier rating greater than or equal to 4.5, and are flagged as environmentally sustainable, and have a total number of verified reviews greater than or equal to 500.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the average supplier rating?",
        "Query": "SELECT AVG(supplier_rating) FROM suppliers"
    },
    {
        "NL": "Get the total amount of all refunds where the refund status is 'approved' and the refund method is 'credit'.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the average revenue generated per campaign?",
        "Query": "SELECT AVG(revenue) FROM campaigns"
    },
    {
        "NL": "Find all unique product identifiers where the standard retail price is greater than the promotional price, and the percentage discount is greater than 0.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "List the shipping details for orders with a shipping status of 'shipped' in the last 30 days.",
        "Query": "SELECT * FROM orders WHERE created_at > NOW() - INTERVAL '30 days' AND status = 'shipped'"
    },
    {
        "NL": "Get the total discount amount redeemed and the last loyalty point update date for customers who have an accumulated loyalty points balance greater than 500 and are eligible for special promotions.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the total number of loyalty points earned by customers who have made more than 5 orders and have free shipping eligibility.",
        "Query": "SELECT COUNT(*) FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_count > 5 AND c.free_shipping_eligibility = true"
    },
    {
        "NL": "Find the total number of transactions for each customer.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the average time spent on the events related to orders that have a payment method of 'Credit Card' and occurred in the year 2022, grouped by the event type.",
        "Query": "SELECT AVG(event_time) FROM events WHERE event_type IN ('payment', 'update') AND payment_method = 'Credit Card' AND EXTRACT(YEAR FROM event_time) = 2022"
    },
    {
        "NL": "Retrieve a comprehensive report for each customer, which includes the total time spent on the site, average cart value, number of unique sessions, the most common device platform, and the average review rating. Additionally, for each customer, calculate the total amount spent on orders, the average shipping fee per item, and the average tax amount per item. This report should be ordered by the total time spent in descending order.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total transaction amount and the review approval moderation status for transactions that have been flagged as fraudulent and have a review approval moderation status of 'approved'.",
        "Query": "SELECT SUM(amount), review_status FROM transactions WHERE is_fraudulent = TRUE AND review_status = 'approved'"
    },
    {
        "NL": "Find all female customers above 40 years old with more than 1000 loyalty points.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all transactions where the customer has made a purchase using a digital wallet and the product is currently in stock, also find the quantity of the product in the inventory.",
        "Query": "SELECT t.* ,  i.quantity FROM transactions t JOIN inventory i ON t.product_id = i.product_id WHERE t.payment_method = 'digital wallet' AND i.quantity > 0"
    },
    {
        "NL": "Analyze the engagement of customers by calculating the average time spent on the website, the total number of clicks, and the number of reviews they have provided, for customers who have placed an order in the past year and have a loyalty tier level of 'Gold'. The results should be grouped by city and ordered by the number of reviews in descending order.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "List all columns for the orders table",
        "Query": "SELECT * FROM orders;"
    },
    {
        "NL": "Find all orders where the order status is 'pending' and the shipping address city is 'New York'.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the details of all wishlist items that have been added by customers who have made at least one purchase with a total transaction amount greater than $100.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the total number of customers who are eligible for special promotions and have an accumulated loyalty points balance greater than 1000.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Calculate the total quantity of inventory that is past the expiry date for all products.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve all the columns from the customerinfo table where the customer's preferred language is 'English'.",
        "Query": "SELECT * FROM customerinfo WHERE language = 'English';"
    },
    {
        "NL": "Find the total amount of all orders shipped to the city of New York and their corresponding product names",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of products in each cart for users who have opened their email and have a review rating greater than 3",
        "Query": "SELECT COUNT(DISTINCT c.cart_id) FROM carts c JOIN users u ON c.user_id = u.id JOIN reviews r ON u.id = r.user_id WHERE r.rating > 3 AND u.email IS NOT NULL"
    },
    {
        "NL": "Get the product details and the average review rating for products that have been purchased by customers who have also opened an email.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the total transaction amounts for each payment method used and the corresponding total billed amounts?",
        "Query": "SELECT payment_method, SUM(transaction_amount) AS total_transaction_amount, SUM(billed_amount) AS total_billed_amount FROM transactions GROUP BY payment_method"
    },
    {
        "NL": "List all customers who have a total loyalty points value greater than 1000 and are subscribed to the newsletter.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all loyalty members who have never participated in exclusive beta testing but are eligible for special promotions.",
        "Query": "SELECT * FROM loyalty_members WHERE id NOT IN (SELECT loyalty_member_id FROM exclusive_beta_testing) AND eligible_for_promotions"
    },
    {
        "NL": "Retrieve a comprehensive list of products that have received reviews with a sentiment analysis score higher than 3.5, along with the average number of verified reviews and the total number of edits made to those reviews. Additionally, provide the product display name, primary material composition, and the estimated production cost per unit, considering only those products that have been reviewed more than 100 times.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of transactions for each campaign and the total revenue generated for each campaign.",
        "Query": "SELECT COUNT(*) AS total_transactions, SUM(revenue) AS total_revenue FROM transactions GROUP BY campaign"
    },
    {
        "NL": "Get the customer birthday special discount status and the order date for customers who have placed orders with a payment status of 'paid' and have participated in exclusive beta testing.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all premium customers who have an active subscription and a wishlist with more than 1 item.",
        "Query": "SELECT * FROM customers WHERE subscription_status = 'active' AND id IN (SELECT customer_id FROM wishlist WHERE id > 1)"
    },
    {
        "NL": "Find the total number of reviews left by customers who have a non-premium account.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the total amounts and shipping fees for orders placed by customers who have made previous purchases at least five times, and what are the associated review scores of the orders, grouped by the customer's identifier and the order's delivery date?",
        "Query": "SELECT SUM(total_amount), SUM(shipping_fee), review_score FROM orders JOIN customers ON orders.customer_id = customers.id WHERE customers.purchase_count >= 5 GROUP BY customers.id, orders.delivery_date"
    },
    {
        "NL": "Find the total number of customers who have more than 1000 accumulated loyalty points balance and are eligible for special promotions.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total quantity of products with a fragile item indicator of true and an available stock quantity greater than 1000?",
        "Query": "SELECT SUM(quantity) FROM products WHERE fragile = true AND stock_quantity > 1000;"
    },
    {
        "NL": "Get the details of all customers who have active subscription and are premium.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Identify the top 5 products with the highest total refund amounts, considering only completed refund requests.",
        "Query": "SELECT product_id, SUM(refund_amount) FROM refund_requests WHERE status = 'completed' GROUP BY product_id ORDER BY SUM(refund_amount) DESC LIMIT 5;"
    },
    {
        "NL": "What are the campaign names and the total amount of each order for all the orders?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total revenue generated from campaigns that have generated more than $1000 in revenue and also list the average shipping cost for orders placed under these campaigns.",
        "Query": "SELECT SUM(c.revenue), AVG(o.shipping_cost) FROM campaigns c JOIN orders o ON c.id = o.campaign_id WHERE c.revenue > 1000"
    },
    {
        "NL": "Retrieve the average sentiment analysis score of reviews for products that have had a promotional discount applied and were added to the wishlist within the last 90 days. Additionally, include the total number of reviews for these products and the average esthetic rating given by customers.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the product names and their corresponding prices in the wishlist where the billing address city is 'New York' in the transactions table?",
        "Query": "SELECT T1.product_name, T1.price FROM transactions AS T1 INNER JOIN wishlist AS T2 ON T1.id = T2.transaction_id WHERE T2.city = 'New York'"
    },
    {
        "NL": "Retrieve the average price per unit of products in orders, along with the average discount applied per order item, for those items that have a return period of more than 30 days.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the top 5 customers based on the total amount spent on orders, along with the number of orders and the average order value, filtering for orders placed on a desktop device.",
        "Query": "SELECT customers.name, SUM(orders.total_amount) AS total_spent, COUNT(orders.id) AS num_orders, AVG(orders.total_amount) AS avg_order_value FROM customers JOIN orders ON customers.id = orders.customer_id WHERE orders.device = 'desktop' GROUP BY customers.name ORDER BY SUM(orders.total_amount) DESC LIMIT 5"
    },
    {
        "NL": "Retrieve the total transaction amount and final billed amount for all transactions where the transaction is marked as fraudulent and the total transaction amount is greater than 1000.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all order IDs and their corresponding shipping costs where the delivery date is after '2020-01-01' and the shipping status is 'delivered'.",
        "Query": "SELECT order_id, shipping_cost FROM orders WHERE delivery_date > '2020-01-01' AND shipping_status = 'delivered'"
    },
    {
        "NL": "Retrieve the total number of transactions, the total transaction amount, and the average transaction amount for each supplier's transactions.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the average income of customers who have a wishlist and have ordered a product at least once.",
        "Query": "SELECT AVG(t1.income) FROM customers AS t1 INNER JOIN wishlist AS t2 ON t1.customer_id = t2.customer_id INNER JOIN orders AS t3 ON t2.customer_id = t3.customer_id"
    },
    {
        "NL": "Retrieve the total quantity of each product in the inventory with a stock status of 'available' and a stock threshold greater than or equal to 10.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the total prices and product names of the order items for a specific order?",
        "Query": "SELECT SUM(price), product_name FROM order_items WHERE order_id = 1"
    },
    {
        "NL": "Find the total revenue generated by all campaigns and the total cost per acquisition",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total cart value and the event type for each cart status where the cart status is 'active' and the event type is 'checkout'",
        "Query": "SELECT SUM(total_amount) ,  event_type FROM carts WHERE status = 'active' AND event_type = 'checkout' GROUP BY status"
    },
    {
        "NL": "List the details of all cart items that have a total price of more than $100.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Show all products in the cart for the user with user id 123.",
        "Query": "SELECT * FROM cart WHERE user_id = 123"
    },
    {
        "NL": "For each product in the cart, list the product display name, price per unit in the cart, and the total number of units ordered, along with the customer's review sentiment score if available.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total discount amount redeemed by all customers who are eligible for special promotions and have accumulated more than 1000 loyalty points?",
        "Query": "SELECT SUM(t2.discount_amount) FROM customers AS t1 INNER JOIN loyalty_points AS t2 ON t1.customer_id = t2.customer_id WHERE t1.promotion_eligible = TRUE AND t2.loyalty_points > 1000"
    },
    {
        "NL": "Find all the users whose cart status is not 'abandoned' and who have more than one item in their cart with the same product ID. For these users, calculate the total price of the items in their cart and the total price of the items in their wishlist, as well as the average price per unit of the items in their cart. Also, find the average price per unit of the items in their wishlist and the number of wishlist items that are currently in stock.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the total loyalty points earned by loyalty members who enrolled after '2020-01-01', and what is their average spending threshold?",
        "Query": "SELECT SUM(loyalty_points) AS total_points, AVG(spending_threshold) AS average_threshold FROM customers WHERE enrollment_date > '2020-01-01' AND loyalty_program = 'loyalty_program'"
    },
    {
        "NL": "Get the details of all campaigns that have a target audience of 'young adults' and also find the names of suppliers who have supplied products in these campaigns with the quantity supplied.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total reach of each campaign and the total number of reviews submitted by each customer?",
        "Query": "SELECT SUM(campaigns.reach) AS total_reach, COUNT(customers.id) AS total_reviews FROM customers JOIN reviews ON customers.id = reviews.customer_id JOIN campaigns ON reviews.campaign_id = campaigns.id GROUP BY customers.id"
    },
    {
        "NL": "What are the order ids, customer ids, customer names, customer emails, customer phone numbers, order dates, total prices, discounts applied, tax amounts, shipping fees, estimated delivery dates, and cart statuses of customers who have made orders with total prices greater than 100, discounts applied greater than 10, tax amounts greater than 5, shipping fees greater than 10, and estimated delivery dates within the next 30 days, who are also eligible for special promotions, have loyalty points greater than 1000, have active subscriptions, are not premium, have a gender of 'M', an income greater than 50000, and an average spent per order greater than 100?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the order id, total amount, and shipping address for orders where the order status is 'shipped' and the payment status is 'paid'.",
        "Query": "SELECT order_id, total_amount, shipping_address FROM orders WHERE status = 'shipped' AND payment_status = 'paid';"
    },
    {
        "NL": "List all events where the device browser is 'Chrome' and the event type is 'purchase'.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the order ID, order date, and total amount for orders where the shipping fee is greater than 10 and the order status is 'completed'.",
        "Query": "SELECT order_id, order_date, total_amount FROM orders WHERE shipping_fee > 10 AND status = 'completed'"
    },
    {
        "NL": "What is the total wishlist quantity for each customer with their loyalty points and preferred language?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "List all refunds that have been initiated by the customer.",
        "Query": "SELECT * FROM refunds WHERE customer_id IN (SELECT id FROM customers WHERE is_customer = TRUE)"
    },
    {
        "NL": "Find the total revenue generated from orders placed in the last 30 days.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total price of all order items in the order_items table?",
        "Query": "SELECT SUM(total_price) FROM order_items"
    },
    {
        "NL": "Retrieve the average total amount spent on orders for each campaign type, along with the campaign name, and sort by average total amount in descending order.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the transaction details of customers who have earned more than 100 bonus loyalty points last month.",
        "Query": "SELECT t.* FROM transactions t JOIN customers c ON t.customer_id = c.id WHERE EXTRACT(MONTH FROM t.transaction_date) = EXTRACT(MONTH FROM CURRENT_DATE) - 1 AND EXTRACT(YEAR FROM t.transaction_date) = EXTRACT(YEAR FROM CURRENT_DATE) - 1 AND c.loyalty_points > 100"
    },
    {
        "NL": "Find the shipping carrier for the order with the highest shipping cost, along with the product name and total price for each order item in that order, and also include the customer notes and refund status for any refunds or returns related to those order items.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all customers who have made a purchase in the last 30 days, have a premium account, and have spent an average of more than $50 per order. Also, include details of their most recent event interaction, including the type of event, the device used, and the location of the event.",
        "Query": "SELECT c.*, e.type, e.device, e.location FROM customers c JOIN events e ON c.customer_id = e.customer_id WHERE e.event_date >= NOW() - INTERVAL '30 days' AND c.account_type = 'premium' AND c.average_order_value > 50"
    },
    {
        "NL": "What is the average total price of all carts?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total price of the order items where the item status is 'delivered' and the return period is greater than 30 days?",
        "Query": "SELECT SUM(t2.price * t1.quantity) FROM orders AS t1 INNER JOIN order_items AS t2 ON t1.id = t2.order_id WHERE t2.status = 'delivered' AND t2.return_period > 30"
    },
    {
        "NL": "Find the average supplier rating and the supplier's country of operation for suppliers who have supplied more than 1000 products",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the names and email addresses of all customers who have placed more than one order, along with the shipping address and carrier for their most recent order",
        "Query": "SELECT c.name, c.email, o.shipping_address, o.carrier FROM customers c JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_id HAVING COUNT(o.order_id) > 1"
    },
    {
        "NL": "Retrieve the average review rating for each product, including only those with more than 10 reviews.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "List the review unique identifier, review submission date, and submitted review star rating for reviews that have more than 5 helpful votes and are verified.",
        "Query": "SELECT review_id, review_submission_date, review_star_rating FROM reviews WHERE helpful_votes > 5 AND verified = TRUE"
    },
    {
        "NL": "Get the total amount of refund made by each person with the corresponding wishlist status.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the average final billed amount for transactions that are not fraudulent.",
        "Query": "SELECT AVG(t.final_billed_amount) FROM transactions t WHERE t.fraudulent = FALSE"
    },
    {
        "NL": "Retrieve the names and email addresses of customers whose loyalty membership will expire within the next 30 days and who have not made any loyalty point redemptions in the last 6 months.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the total amount spent by each customer in the transactions_and_payments table, grouping by customer reference id.",
        "Query": "SELECT SUM(amount) AS total_amount FROM transactions_and_payments GROUP BY customer_reference_id"
    },
    {
        "NL": "Get the official business name of each supplier, the average rating of each supplier, and the number of products supplied by each supplier for suppliers that have products which were ordered by customers who have opened an email, sorted by the total number of products supplied in descending order.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total amount spent in transaction currency code EUR and the total number of transactions for the customers who have ordered more than 5 times, and calculate the average amount spent for each order. Also, get the total number of transactions for each customer and the average amount spent for each order. Additionally, get the details of the orders that were refunded and the reason for the refund, along with the details of the customers who have ordered the most, including the total amount spent and the average amount spent for each order.",
        "Query": "SELECT SUM(t.amount) AS total_spent, COUNT(t.id) AS total_transactions, AVG(o.amount) AS avg_amount_spent, COUNT(o.id) AS total_orders, AVG(o.amount) AS avg_order_amount, COALESCE(r.refund_amount, 0) AS refund_amount, r.refund_reason, c.total_orders, c.avg_order_amount FROM orders o JOIN customers c ON o.customer_id = c.id JOIN transactions t ON o.id = t.order_id WHERE t.currency_code = 'EUR' AND c.total_orders > 5 GROUP BY c.id, r.id ORDER BY c.total_orders DESC LIMIT 1"
    },
    {
        "NL": "Find the average standard retail price including tax for products from suppliers in the UK, who have at least 100 products supplied, and who have an average supplier rating of at least 4.0. Also, find the total number of such suppliers.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total transaction amount for each customer who has made at least one transaction using a digital wallet.",
        "Query": "SELECT SUM(t.amount) FROM transactions t JOIN customers c ON t.customer_id = c.id WHERE t.payment_method = 'digital'"
    },
    {
        "NL": "Find the total amount spent and average supplier rating for each order with its corresponding supplier information.",
        "Query": "SELECT SUM(o.total_amount), AVG(s.rating) ,  o.order_id, s.supplier_name, s.rating FROM orders o JOIN supplier_ratings sr ON o.order_id = sr.order_id JOIN suppliers s ON sr.supplier_id = s.supplier_id GROUP BY o.order_id"
    },
    {
        "NL": "List all carts along with the product quantity and total discounted price for each cart where the cart was added more than 30 days ago.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total amount spent on all campaigns?",
        "Query": "SELECT SUM(total_spent) FROM campaigns"
    },
    {
        "NL": "Find the total number of orders and total amount spent for each month in 2022.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of reviews and the average review sentiment score for each product, ordered by the total number of reviews in descending order.",
        "Query": "SELECT COUNT(*) ,  AVG(sentiment_score) ,  COUNT(*) AS total_reviews FROM reviews GROUP BY product ORDER BY total_reviews DESC"
    },
    {
        "NL": "Calculate the average total amount of orders placed within the campaigns that generated more than $500 in revenue, along with the campaign name.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total shipping cost for all orders shipped to the city of New York.",
        "Query": "SELECT SUM(t2.cost) FROM orders AS t1 INNER JOIN order_items AS t2 ON t1.id = t2.order_id INNER JOIN shipments AS t3 ON t2.id = t3.order_item_id WHERE t3.city = 'New York';"
    },
    {
        "NL": "Find the total number of wishlist records for each user, along with the total number of products supplied by each supplier, and also find the total reach and revenue generated for each campaign that has a higher budget than the average budget of all campaigns, and also find the shipping cost and shipping status for each shipping record where the shipping address is in the same city as the registered business address of the supplier with the highest average supplier rating, and also find the average supplier rating and official business name for each supplier who operates in the same country as the supplier with the highest average supplier rating.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Provide the loyalty tier level and preferred language of customers who have purchased products from the wishlist with a total discount amount redeemed of more than $10.",
        "Query": "SELECT T2.loyalty_tier_level, T2.preferred_language FROM wishlist AS T1 INNER JOIN customers AS T2 ON T1.customer_id = T2.customer_id WHERE T1.total_discount_amount > 10"
    },
    {
        "NL": "List all the order items that are returnable and have a quantity greater than 1, along with the product name and the order id.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the average order value and total orders for customers who have placed at least one order in the last 30 days, and have a loyalty program status with a balance greater than 100. Also, include the customer's name and occupation in the results.",
        "Query": "SELECT AVG(o.order_value) ,  COUNT(o.order_id) ,  c.name ,  c.occupation FROM orders o JOIN customers c ON o.customer_id = c.customer_id WHERE o.order_date >= NOW() - INTERVAL '30 days' AND c.loyalty_balance > 100 GROUP BY c.name ,  c.occupation"
    },
    {
        "NL": "Find the customer's name and total loyalty points earned from all transactions for customers who have more than 100 loyalty points.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of loyalty points for customers who have participated in exclusive beta testing and have a loyalty program tier level of 'Platinum'.",
        "Query": "SELECT COUNT(*) FROM customers JOIN loyalty_program ON customers.id = loyalty_program.customer_id WHERE loyalty_program.tier_level = 'Platinum' AND loyalty_program.exclusive_beta_participation = TRUE;"
    },
    {
        "NL": "List all customers who have made more than 10 orders with their email addresses and total orders count.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of verified reviews written by premium customers who have made more than 5 purchases and have an account balance greater than $500.",
        "Query": "SELECT COUNT(*) FROM customers c JOIN orders o ON c.customer_id = o.customer_id JOIN reviews r ON c.customer_id = r.customer_id WHERE c.is_premium = TRUE AND c.account_balance > 500 AND o.order_count > 5"
    },
    {
        "NL": "Get the names of the campaigns with a budget greater than $10,000, along with the names of the suppliers who supply products with a quantity greater than 50 and have an average rating greater than 3, and the total revenue generated by these campaigns.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the names of the suppliers who supply products with a quantity greater than 100 and have an average rating greater than 4, along with the product names and their current stock status.",
        "Query": "SELECT T2.name, T1.name, T1.current_stock FROM products AS T1 INNER JOIN suppliers AS T2 ON T1.supplier_id = T2.id WHERE T1.quantity > 100 AND T1.average_rating > 4"
    },
    {
        "NL": "Find the loyalty program tier level and the total number of verified reviews for products purchased by customers who have a loyalty membership unique identifier greater than 1000 and have made a transaction with a total transaction amount greater than 500.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the order status and total amount for all orders with shipping address in California.",
        "Query": "SELECT order_status, SUM(total_amount) FROM orders WHERE shipping_address IN ('California', 'CA') GROUP BY order_status"
    },
    {
        "NL": "Fetch all items in the wishlist for the user with user id 123.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the top 5 campaigns by revenue generated?",
        "Query": "SELECT campaign, SUM(revenue) FROM campaigns GROUP BY campaign ORDER BY SUM(revenue) DESC LIMIT 5;"
    },
    {
        "NL": "Get the total number of products, along with their names, and the quantity in stock for products with a stock status of 'in stock'.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total number of helpful votes received by each product and the total price of each order item for the product?",
        "Query": "SELECT product_id, COUNT(votes) AS helpful_votes, SUM(price) AS total_price FROM orders GROUP BY product_id"
    },
    {
        "NL": "Get the customer ID, first name, and last name of customers who have initiated a refund and the refund status is 'pending'.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the list of customers who have earned the most loyalty points in the last year, along with their total spending, average order value, and the number of orders they have placed, considering only customers who have made at least 5 purchases and have a loyalty tier level of 'Gold' or higher.",
        "Query": "SELECT c.customer_name, SUM(o.total_spending) AS total_spending, AVG(o.total_spending) AS avg_order_value, COUNT(o.order_id) AS num_orders FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date >= NOW() - INTERVAL '1 year' AND c.loyalty_tier_level >= 'Gold' GROUP BY c.customer_name HAVING COUNT(o.order_id) >= 5"
    },
    {
        "NL": "Find the number of orders that have been cancelled or returned, along with the total amount of discounts applied to these orders, and the average review rating for these orders. Include only orders made by customers who have also completed a survey. Group the results by the customer ID.",
        "Query": "SELECT COUNT(o.id) AS cancelled_orders, SUM(d.amount) AS total_discounts, AVG(r.rating) AS avg_review_rating FROM orders o JOIN customer_orders co ON o.id = co.order_id JOIN customer c ON co.customer_id = c.id JOIN survey s ON c.id = s.customer_id JOIN order_discounts od ON o.id = od.order_id JOIN discounts d ON od.discount_id = d.id JOIN reviews r ON o.id = r.order_id WHERE o.status IN ('cancelled', 'returned') AND s.completed = TRUE GROUP BY c.id"
    },
    {
        "NL": "Retrieve detailed product information for all items that have been part of orders shipped after January 1, 2023, with a promotional discount greater than 20%, and which have a shipping status indicating they are delivered, grouping the results by product category and listing the count of such products in each category.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the average refund amount for all orders that have been fully refunded and have a status of 'approved' in the refunds_returns table.",
        "Query": "SELECT AVG(amount) FROM refunds_returns WHERE status = 'approved' AND amount > 0"
    },
    {
        "NL": "What are the order ids of the orders where the tax amount is more than 100 and the item status is delivered in the order items",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total discount amount redeemed by customers who have a lifetime loyalty points earned greater than 1000 and have an anniversary reward voucher status of True?",
        "Query": "SELECT SUM(t2.discount_amount) FROM customers AS t1 INNER JOIN loyalty_points AS t2 ON t1.customer_id = t2.customer_id WHERE t1.loyalty_points > 1000 AND t1.anniversary_reward_voucher = True"
    },
    {
        "NL": "What is the name and phone number of each customer who has placed an order with a total amount greater than 100, along with the order date and total amount?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the list of customer names, loyalty program tier levels, and total amount spent by customers who have participated in exclusive beta testing and have made orders with a total amount greater than 100",
        "Query": "SELECT T1.name, T2.tier_level, SUM(T3.amount) FROM customers AS T1 INNER JOIN beta_testers AS T2 ON T1.id = T2.customer_id INNER JOIN orders AS T3 ON T1.id = T3.customer_id WHERE T2.exclusive_beta = TRUE AND T3.amount > 100 GROUP BY T1.name, T2.tier_level"
    },
    {
        "NL": "List the product identifiers and review submission dates of reviews with more than 10 helpful votes.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the total impressions and clicks for each campaign name where the campaign has a start date after '2020-01-01' and there is at least one order item with a matching product id in the inventory table?",
        "Query": "SELECT SUM(i.clicks), SUM(i.impressions), c.name FROM inventory i JOIN orders o ON i.product_id = o.product_id JOIN campaigns c ON o.campaign_id = c.id WHERE c.start_date > '2020-01-01' GROUP BY c.name"
    },
    {
        "NL": "Get the first name and last name of customers who have at least one item in their wishlist",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the average amount spent per order by customers who have more than 100 loyalty points?",
        "Query": "SELECT AVG(amount_spent) FROM orders WHERE customer_id IN (SELECT customer_id FROM loyalty_points WHERE points > 100)"
    },
    {
        "NL": "List all reviews where the review's star rating is above 4 and the review is flagged as inappropriate, showing the review text, product identifier, and customer identifier.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Select all shipping information for orders shipped in the last 30 days.",
        "Query": "SELECT * FROM orders WHERE created_at >= NOW() - INTERVAL '30 days'"
    },
    {
        "NL": "Find all transactions made by customers who have purchased a product that is currently in stock and has a low inventory turnover rate, and also show the corresponding shipping details for those transactions, including the estimated delivery date and shipping cost.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Which events have been triggered by customers who have placed an order with a total amount greater than $100 and what is the average time spent by these customers during the events?",
        "Query": "SELECT e.id, e.name, e.start_time, e.end_time, c.total_amount, AVG(e.start_time - e.end_time) AS avg_time_spent FROM events e JOIN orders o ON e.event_id = o.event_id JOIN customers c ON o.customer_id = c.id WHERE c.total_amount > 100 GROUP BY e.id, e.name, e.start_time, e.end_time, c.total_amount"
    },
    {
        "NL": "Find the average conversion rate and ROI of all campaigns that had a positive review sentiment score (greater than 0.5) for at least one of their associated products. Also, include the campaign name and status in the results.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total revenue generated by transactions for premium customers between January 1, 2023, and December 31, 2023.",
        "Query": "SELECT SUM(t.total_amount) FROM transactions t JOIN customers c ON t.customer_id = c.customer_id WHERE c.customer_type = 'premium' AND t.transaction_date BETWEEN '2023-01-01' AND '2023-12-31'"
    },
    {
        "NL": "What is the total revenue generated across all campaigns?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all the orders whose shipment status is not shipped and their respective customers' total wishlist value exceeds 1000, for each customer display their name, order id, order date, and total wishlist value.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the total number of orders and total spent for customers who have a newsletter subscription",
        "Query": "SELECT COUNT(*) ,  SUM(total_amount) FROM orders JOIN customers ON orders.customer_id = customers.customer_id WHERE customers.newsletter_subscription = TRUE;"
    },
    {
        "NL": "Get the total number of orders for customers who have more than 100 loyalty points.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total accumulated loyalty points for customers who have participated in exclusive beta testing and have ordered products with a promotional discount greater than 10%.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the names of all the products that have a standard retail price greater than $100?",
        "Query": "SELECT name FROM products WHERE retail_price > 100;"
    },
    {
        "NL": "Find the total number of wishlist items for all customers who have  purchased a product with the category 'Fashion', along with the number of order items for each customer.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all products that have a higher standard retail price and are also perishable, along with their corresponding inventory quantities and last restock dates.",
        "Query": "SELECT p.name, i.quantity, i.last_restock FROM products p JOIN inventory i ON p.id = i.product_id WHERE p.standard_retail_price > p.list_price AND p.is_perishable"
    },
    {
        "NL": "Find the average star rating of reviews for each customer who has submitted more than 5 reviews.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all reviews with a rating of 5 and a verification status of true, along with the corresponding product identifier and review submission date.",
        "Query": "SELECT product_id, submission_date FROM reviews WHERE rating = 5 AND verified = TRUE;"
    },
    {
        "NL": "Find the total amount of all orders where the order status is 'delivered' and the customer has clicked on a push notification.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the email address and preferred payment method of each customer who has placed an order with a payment status of 'paid'?",
        "Query": "SELECT email, preferred_payment_method FROM customers WHERE id IN (SELECT customer_id FROM orders WHERE payment_status = 'paid')"
    },
    {
        "NL": "Retrieve the list of products that have been added to a user's wishlist more than 5 times and have a low stock status, including the product's name, the supplier's business name, and the last updated stock date.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the product name and the actual_spent of the campaigns for products with total_reach greater than 100?",
        "Query": "SELECT T1.product_name, T2.actual_spent FROM campaigns AS T1 INNER JOIN product_campaigns AS T2 ON T1.id = T2.campaign_id WHERE T2.total_reach > 100"
    },
    {
        "NL": "List all suppliers who have supplied more than 500 products and have an average supplier rating greater than 4.5.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the business names of suppliers from the USA?",
        "Query": "SELECT DISTINCT T1.name FROM suppliers AS T1 INNER JOIN customers AS T2 ON T1.supplier_id = T2.supplier_id WHERE T2.country = 'USA'"
    },
    {
        "NL": "Find all customers who are eligible for special promotions and have accumulated more than 1000 loyalty points, along with their first and last names and email addresses.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the average quantity and total price of products in the cart for each product where the cart status is 'Active', and the recommended products are not null, and the wishlist flag is true, and the product id is in the wishlist. Group the result by product id and calculate the standard deviation of the total price for each group.",
        "Query": "SELECT STDEV(total_price) ,  avg(quantity) ,  SUM(total_price) FROM cart WHERE status = 'Active' AND recommended_product IS NOT NULL AND wishlist = true AND product_id IN (SELECT product_id FROM wishlist) GROUP BY product_id"
    },
    {
        "NL": "Find the average time spent by customers on the website who have made a purchase and have also completed a survey.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the average review rating and the sum of cart value for each event type.",
        "Query": "SELECT AVG(rating) AS average_rating, SUM(cart_value) AS total_cart_value FROM reviews GROUP BY event_type"
    },
    {
        "NL": "Give me the total amount of sales made in the last month from the 'orders' table.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the total quantity of products in the inventory for each order and the order status",
        "Query": "SELECT order_id, status, SUM(quantity) FROM inventory JOIN orders ON inventory.order_id = orders.id GROUP BY order_id, status"
    },
    {
        "NL": "What is the total loyalty points balance and the total discount amount redeemed for customers with a loyalty membership?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all events for orders where the order status is 'cancelled' and the payment status is 'pending' and the total amount is less than 50, along with the event type, the device platform, and the location city, and also find the campaign name for each order.",
        "Query": "SELECT e.event_type, d.platform, l.city, c.campaign_name, o.total_amount, o.order_status, o.payment_status FROM orders o JOIN events e ON o.event_id = e.event_id JOIN devices d ON o.device_id = d.device_id JOIN locations l ON o.location_id = l.location_id JOIN campaigns c ON o.campaign_id = c.campaign_id WHERE o.order_status = 'cancelled' AND o.payment_status = 'pending' AND o.total_amount < 50"
    },
    {
        "NL": "Find the product name, standard retail price, and expected lead time for products in the 'Electronics' category with a product status of active, an estimated production cost per unit less than 50, and a net weight greater than 1 kilogram.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "List the products with a featured product flag set to true, along with their associated supplier reference id, sorted by their standard retail price in descending order.",
        "Query": "SELECT product_id, supplier_reference_id, standard_retail_price FROM products WHERE featured_product = TRUE ORDER BY standard_retail_price DESC"
    },
    {
        "NL": "Retrieve the names and descriptions of products that are currently in the cart of users who have participated in the exclusive beta testing of the loyalty program and have a loyalty membership unique identifier greater than 1000.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Show the total number of reviews submitted by customers who have flagged their reviews as inappropriate.",
        "Query": "SELECT COUNT(*) FROM reviews WHERE customer_id IN (SELECT customer_id FROM reviews WHERE flagged = TRUE)"
    },
    {
        "NL": "List the average star rating of reviews that were submitted by customers who have previously purchased the product more than 3 times.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the average cost per acquisition for all campaigns that have a budget greater than 5000.",
        "Query": "SELECT AVG(cost_per_acquisition) FROM campaigns WHERE budget > 5000;"
    },
    {
        "NL": "Get the average time spent by customers in seconds on the website who are premium members.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the average lifetime loyalty points earned by customers who have exceeded their annual loyalty spending threshold and have a loyalty program tier level of 'gold'",
        "Query": "SELECT AVG(lifetime_loyalty_points) FROM customers WHERE annual_loyalty_spending > (SELECT threshold FROM loyalty_programs WHERE tier_level = 'gold')"
    },
    {
        "NL": "List the email addresses and names of customers who are subscribed to the newsletter and have a balance greater than $1000 in their accounts.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the order IDs and total amounts of orders placed by customers who have made previous purchases of at least 5 products.",
        "Query": "SELECT order_id ,  SUM(total_amount) FROM orders GROUP BY order_id HAVING COUNT(DISTINCT product_id) >= 5"
    },
    {
        "NL": "Retrieve the official business name of suppliers who have supplied products with an inventory turnover rate greater than 1, along with the expected restock date and the last inventory audit date for those products.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "List the loyalty points balance of all customers who have products in the wishlist with a price greater than $100.",
        "Query": "SELECT T1.balance FROM customers AS T1 INNER JOIN wishlist AS T2 ON T1.id = T2.customer_id INNER JOIN products AS T3 ON T2.product_id = T3.id WHERE T3.price > 100"
    },
    {
        "NL": "Find the total price of each order in the cart, along with the campaign name, start date, and end date of the corresponding campaign, using the estimated delivery date to join the two tables.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the campaign names and review unique identifiers for campaigns that have a higher conversion rate than the average conversion rate of all campaigns and have a corresponding review with a higher sentiment analysis score than the average sentiment analysis score of all reviews.",
        "Query": "SELECT T1.name, T2.review_id FROM campaigns AS T1 INNER JOIN reviews AS T2 ON T1.id = T2.campaign_id WHERE T1.conversion_rate > (SELECT AVG(conversion_rate) FROM campaigns) AND T2.sentiment_score > (SELECT AVG(sentiment_score) FROM reviews)"
    },
    {
        "NL": "Retrieve the event type, device type, and location city for events where the cart value was greater than 500 and the event occurred in the year 2022",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the event types and the associated customer IDs for events that occurred on the same day as a transaction made by a customer who used a gift card.",
        "Query": "SELECT DISTINCT e.event_type, g.customer_id FROM events e JOIN transactions t ON e.event_id = t.event_id JOIN gift_cards gc ON t.customer_id = gc.customer_id JOIN customers c ON gc.customer_id = c.customer_id WHERE t.transaction_date = e.transaction_date AND gc.gift_card_used = TRUE"
    },
    {
        "NL": "What are the order details of orders with a total amount greater than 1000 that were shipped from the United States?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the list of customers who have added items to their wishlist at least twice, along with the total amount spent by these customers on transactions that included a gift card or store credit usage, along with the average transaction amount and the device platform used for the last event they triggered, filtering for customers who have enabled email notifications and have a loyalty points balance above 1000.",
        "Query": "SELECT c.customer_id, c.customer_name, SUM(t.transaction_amount) AS total_spent, AVG(t.transaction_amount) AS avg_transaction_amount, t.device_platform, t.event_timestamp FROM customers c JOIN wishlist w ON c.customer_id = w.customer_id JOIN transactions t ON w.transaction_id = t.transaction_id WHERE t.gift_card_usage = 'yes' OR t.store_credit_usage = 'yes' AND c.email_notifications = 'yes' AND c.loyalty_points_balance > 1000 GROUP BY c.customer_id, c.customer_name, t.device_platform, t.event_timestamp HAVING COUNT(DISTINCT t.transaction_id) >= 2"
    },
    {
        "NL": "What is the total number of transactions made by first-time customers in the year 2022?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the product id, quantity, and total price for all order items in orders where the product name contains the word 'Laptop', the order status is 'Pending', and the shipping address is located in a city that starts with the letter 'N'. Also, find the total number of products supplied by suppliers who are located in the same city and country of operation as the shipping address. Order the results in descending order of total price.",
        "Query": "SELECT T1.product_id, T1.quantity, T1.total_price, COUNT(*) FROM orders AS T1 INNER JOIN order_items AS T2 ON T1.order_id = T2.order_id INNER JOIN suppliers AS T3 ON T2.supplier_id = T3.supplier_id WHERE T1.status = 'Pending' AND T1.product_name LIKE '%Laptop%' AND T1.shipping_address_city LIKE 'N%' AND T3.country = T1.shipping_address_country GROUP BY T1.product_id, T1.quantity, T1.total_price ORDER BY SUM(T1.total_price) DESC"
    },
    {
        "NL": "Find the total number of active subscriptions and the average loyalty points of customers who have an active subscription and a premium account, grouped by city.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the names of all suppliers who have supplied products to campaigns with a budget greater than 1000 and also find the campaign names and their start dates.",
        "Query": "SELECT T1.name, T2.name, T2.start_date FROM suppliers AS T1 INNER JOIN campaign_suppliers AS T2 ON T1.id = T2.supplier_id INNER JOIN campaigns AS T3 ON T2.campaign_id = T3.id WHERE T3.budget > 1000"
    },
    {
        "NL": "Find the average shipping cost for orders that have been shipped from the city of New York.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all events that occurred on orders which have been shipped to the United States, including the event timestamp and the shipping date.",
        "Query": "SELECT e.event_timestamp, o.shipping_date FROM orders o JOIN events e ON o.id = e.order_id WHERE o.country = 'United States';"
    },
    {
        "NL": "Which customers initiated a refund for their order and how much was the refund amount?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total price of all order items with a warranty period of more than 30 days?",
        "Query": "SELECT SUM(t2.price * t1.quantity) FROM orders AS t1 INNER JOIN order_items AS t2 ON t1.id = t2.order_id WHERE t2.warranty_period > 30;"
    },
    {
        "NL": "Find the total number of reviews and the average rating for products that have been discontinued.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of products supplied by each supplier and the average supplier rating, along with the inventory details for the products they supply where the quantity is less than the stock threshold.",
        "Query": "SELECT supplier_id, COUNT(*) AS total_products, AVG(rating) AS avg_rating, SUM(CASE WHEN quantity < stock_threshold THEN 1 ELSE 0 END) AS low_inventory_count FROM products JOIN suppliers ON products.supplier_id = suppliers.supplier_id GROUP BY supplier_id"
    },
    {
        "NL": "Find the total number of orders that have a payment status of paid and were created in the year 2022.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the product names and quantities of items in orders where the transaction status is 'success'?",
        "Query": "SELECT T1.product_name, T2.quantity FROM orders AS T1 INNER JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.transaction_status = 'success'"
    },
    {
        "NL": "Retrieve the total amount spent by customers in the past year, grouped by their preferred language.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the product names from order items along with the order date for those orders that have a promotional offer applied and the payment method used is 'Credit Card'.",
        "Query": "SELECT T1.product_name, T2.order_date FROM order_items AS T1 INNER JOIN orders AS T2 ON T1.order_id = T2.order_id WHERE T2.promo_offer IS NOT NULL AND T2.payment_method = 'Credit Card'"
    },
    {
        "NL": "Get the total number of transactions where the chargeback request status is true.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total revenue generated and campaign name from the campaigns table and the shipping cost from the shipping table where the campaign status is 'active' and the shipping status is 'shipped'.",
        "Query": "SELECT SUM(c.revenue), c.name, s.cost FROM campaigns c JOIN shipping s ON c.id = s.campaign_id WHERE c.status = 'active' AND s.status = 'shipped'"
    },
    {
        "NL": "Find the total number of units ordered and the estimated production cost for each product listed in the order_items table, joining with the products table to include the cost.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the supplier names and their total number of products supplied, ordered by the number of products in descending order.",
        "Query": "SELECT supplier_name ,  COUNT(*) FROM supplier_product GROUP BY supplier_name ORDER BY COUNT(*) DESC"
    },
    {
        "NL": "What is the average accumulated loyalty points balance across all customers who have participated in exclusive beta testing?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the shipping address, shipping city, shipping state, shipping zipcode, and estimated delivery date for each order that has a total discount amount redeemed greater than 100, and has a free shipping eligibility as true, and the order's shipping record has a shipping status as 'shipped', and the order's shipping record has a tracking number that starts with 'ABC', and the order's shipping record has a shipping cost greater than 20",
        "Query": "SELECT T1.shipping_address, T1.shipping_city, T1.shipping_state, T1.shipping_zipcode, T1.estimated_delivery_date FROM orders AS T1 INNER JOIN shipping_records AS T2 ON T1.id = T2.order_id WHERE T1.total_discount_amount > 100 AND T1.free_shipping_eligibility = TRUE AND T2.shipping_status = 'shipped' AND T2.tracking_number LIKE 'ABC%' AND T2.shipping_cost > 20"
    },
    {
        "NL": "List all refunds along with their processing dates, refund amounts, and reasons, where the refund amount is greater than $100.",
        "Query": "SELECT * FROM refunds WHERE refund_amount > 100"
    },
    {
        "NL": "Select the final billed amount for transactions where the transaction status is 'completed'.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all customers who have more than 1000 lifetime loyalty points earned and have a loyalty program tier level of 'Gold'.",
        "Query": "SELECT * FROM customers WHERE lifetime_loyalty_points > 1000 AND loyalty_program_tier_level = 'Gold';"
    },
    {
        "NL": "Calculate the total discount applied and the total tax amount for orders placed in the year 2022, with a refund status of true in the transactions_and_payments table.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the average shipping costs for transactions from the 'new customer campaign'?",
        "Query": "SELECT AVG(shipping_cost) FROM transactions WHERE campaign = 'new customer campaign';"
    },
    {
        "NL": "Find the names of customers who have an active subscription and are located in New York City, along with the total number of products supplied by their preferred supplier.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "List all customers who have made a transaction using cryptocurrency.",
        "Query": "SELECT * FROM customers JOIN transactions ON customers.id = transactions.customer_id WHERE transactions.currency = 'cryptocurrency';"
    },
    {
        "NL": "Find the total number of products supplied by each supplier that has a stock threshold above 100 in the inventory.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the exclusive coupon codes assigned to customers in the loyalty program at the platinum level?",
        "Query": "SELECT DISTINCT coupon_code FROM loyalty_program WHERE customer_id IN (SELECT customer_id FROM loyalty_program WHERE level = 'platinum')"
    },
    {
        "NL": "What is the average total price of carts that have a discounted total price greater than 100 and a cart status of 'Checked Out'?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the campaign name, target audience, and total price for all campaigns where the campaign type is 'email' and the cart status is 'checkedout'.",
        "Query": "SELECT campaign_name, target_audience, total_price FROM campaigns WHERE campaign_type = 'email' AND cart_status = 'checkedout';"
    },
    {
        "NL": "Retrieve the total amount and delivery date of orders that were shipped after '2023-01-01' and have a discount applied greater than 0.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the shipping details of all orders that have a budget greater than $10,000 and list the supplier details of the product shipped.",
        "Query": "SELECT o.order_id, o.order_date, o.budget, s.supplier_name, p.product_name, s.supplier_address FROM orders o JOIN order_items oi ON o.order_id = oi.order_id JOIN products p ON oi.product_id = p.product_id JOIN suppliers s ON p.supplier_id = s.supplier_id WHERE o.budget > 10000"
    },
    {
        "NL": "What are the details of suppliers from the United States who supplied products for orders with a total amount greater than 500?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the order IDs, order dates, and shipping addresses of orders for which refunds have been initiated, along with the corresponding refund amounts and return conditions, for customers who have not opened emails and have a review rating of 5 in their events?",
        "Query": "SELECT o.order_id, o.order_date, o.shipping_address, r.refund_amount, r.return_condition FROM orders o JOIN refunds r ON o.order_id = r.order_id JOIN customers c ON o.customer_id = c.customer_id JOIN event_ratings er ON c.customer_id = er.customer_id WHERE r.refund_initiated = TRUE AND c.email_opened = FALSE AND er.rating = 5"
    },
    {
        "NL": "Get the product details of products with available stock quantity greater than 50 and estimated replenishment date within the next 7 days",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "How many devices have a device_type of mobile and device_platform of android?",
        "Query": "SELECT COUNT(*) FROM devices WHERE device_type = 'mobile' AND device_platform = 'android';"
    },
    {
        "NL": "Retrieve the total number of products supplied by each supplier along with their average rating.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the average total transaction amount for each order that has a review with a star rating of 5.",
        "Query": "SELECT AVG(T2.total_amount) FROM orders AS T1 INNER JOIN reviews AS T2 ON T1.id = T2.order_id WHERE T2.star_rating = 5"
    },
    {
        "NL": "Find the loyalty program tier and total spent for all customers who have ever purchased a product from the 'Electronics' category and have a lifetime loyalty points balance greater than 1000",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the count of customers from the customerinfo table who have more than 100 loyalty points and the average spent per order is greater than 1000.",
        "Query": "SELECT COUNT(*) FROM customerinfo WHERE loyalty_points > 100 AND avg_spent_per_order > 1000"
    },
    {
        "NL": "What are the review ratings, customer review submission dates and review approval moderation statuses for all reviews with helpful votes received greater than 10?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all suppliers based in 'United States' with an average supplier rating above 4.5.",
        "Query": "SELECT * FROM suppliers WHERE country='United States' AND avg_rating > 4.5"
    },
    {
        "NL": "What are the reviews for products with a high aggregate customer review rating and what is the shipping status for orders of these products?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the average loyalty points earned by customers who have active subscriptions and are premium members.",
        "Query": "SELECT AVG(loyalty_points) FROM customers WHERE subscription_status = 'active' AND membership_type = 'premium';"
    },
    {
        "NL": "Find the total number of products supplied by the supplier with the highest average rating, along with the supplier's official business name.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "List the total transaction amount and corresponding customer reference for transactions that are flagged as fraudulent.",
        "Query": "SELECT SUM(amount), customer_reference FROM transactions WHERE is_fraudulent = TRUE"
    },
    {
        "NL": "Find the total transaction amount for customers who are eligible for special promotions and have made transactions with a total transaction amount greater than 1000.",
        "Query": "SELECT SUM(t.total_amount) FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE c.promotion_eligible = TRUE AND t.total_amount > 1000"
    },
    {
        "NL": "Get the total number of verified reviews and the aggregate customer review rating for the product with the highest rating.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of reviews submitted by premium customers.",
        "Query": "SELECT COUNT(*) FROM reviews WHERE customer_type = 'premium';"
    },
    {
        "NL": "Find the average sentiment score of reviews for products that have received more than 10 helpful votes and are verified.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the campaign name and the budget for the campaign with campaign_id 1?",
        "Query": "SELECT campaign_name, budget FROM campaigns WHERE campaign_id = 1;"
    },
    {
        "NL": "Find all orders where shipping status is 'shipped' and order status is 'delivered' along with shipping details.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "List the names of products purchased by customers who are eligible for special promotions and have a loyalty tier level of 'Silver' or higher.",
        "Query": "SELECT DISTINCT T1.name FROM products AS T1 INNER JOIN orders AS T2 ON T1.id = T2.product_id INNER JOIN customers AS T3 ON T3.id = T2.customer_id WHERE T3.loyalty_tier_level IN ('Silver', 'Gold', 'Platinum')"
    },
    {
        "NL": "Find the top 5 customers who have made the highest total cart value in events, considering only those with an active subscription and their last order was made within the last 6 months, and also include the product categories they frequently purchase.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all the campaigns that have a budget greater than 1000 and have impressions greater than 1000.",
        "Query": "SELECT * FROM campaigns WHERE budget > 1000 AND impressions > 1000"
    },
    {
        "NL": "Retrieve the average number of edits made to reviews for customers who have an engagement score above 8, have submitted reviews that contain multimedia content, and those reviews were flagged as inappropriate. Also, include the count of such reviews for each customer and filter the results to only include customers who have redeemed more than 100 loyalty points. Further, sort the results by the total number of edits made in descending order.",
        "Query": "SELECT AVG(edits) ,  COUNT(*) ,  customer_id FROM reviews WHERE engagement_score  >  8 AND multimedia_content IS NOT NULL AND flagged_inappropriate = TRUE GROUP BY customer_id HAVING SUM(edits)  >  100 ORDER BY SUM(edits) DESC"
    },
    {
        "NL": "What are the product names and quantities of all order items with a price per unit greater than $50?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the total transaction amount, payment method used, and transaction date and time for transactions that occurred within the last 30 days and corresponding order status is 'delivered', and not cancelled or pending. The transaction method used should be either 'Credit Card' or 'PayPal', and the total transaction amount should be greater than $100.00.",
        "Query": "SELECT SUM(amount), payment_method, transaction_date_time FROM transactions WHERE transaction_date_time >= NOW() - INTERVAL '30 days' AND order_status IN ('delivered', 'cancelled', 'pending') AND payment_method IN ('Credit Card', 'PayPal') AND amount > 100"
    },
    {
        "NL": "Retrieve the total order value for each customer who has made at least one purchase, along with the average review rating for products in their orders, excluding those customers whose reviews have been flagged as inappropriate and considering only verified reviewers. Additionally, filter the results to show only those customers who have spent more than $500 in total and include the city of their last delivery.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all the customers who have placed orders with a total amount greater than $100 and have an active subscription.",
        "Query": "SELECT customers.* FROM customers JOIN orders ON customers.id = orders.customer_id WHERE SUM(orders.amount) > 100 AND orders.status = 'active'"
    },
    {
        "NL": "Get the total amount and discount applied for all orders placed in the last month.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "List all campaigns with an end date in the current year that have a budget greater than the actual spent.",
        "Query": "SELECT * FROM campaigns WHERE EXTRACT(YEAR FROM end_date) = EXTRACT(YEAR FROM CURRENT_DATE) AND budget > actual_spent"
    },
    {
        "NL": "List the wishlist items for customers who have more than 100 loyalty points and are subscribed to the newsletter.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What are the total revenue generated and cost per acquisition for each campaign status where the campaign type is 'online' and there is at least one order item with a matching product id in the order items table?",
        "Query": "SELECT SUM(oi.quantity * oi.price) AS total_revenue, SUM(oi.quantity * oi.price) / COUNT(DISTINCT o.id) AS cost_per_acquisition FROM orders o JOIN order_items oi ON o.id = oi.order_id JOIN campaigns c ON o.campaign_id = c.id WHERE c.type = 'online' AND c.status IN ('active', 'completed') AND o.id IN (SELECT oi.order_id FROM order_items WHERE product_id IN (SELECT id FROM products));"
    },
    {
        "NL": "Find the total loyalty points earned by customers who have made at least one order and are eligible for special promotions",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "What is the total number of customers who have active subscriptions and are premium?",
        "Query": "SELECT COUNT(*) FROM customers WHERE subscription_status = 'active' AND subscription_type = 'premium';"
    },
    {
        "NL": "Retrieve the product display name and standard retail price of all featured products.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "List all order items for a specific order identified by order_id 12345.",
        "Query": "SELECT * FROM order_items WHERE order_id = 12345;"
    },
    {
        "NL": "Find the campaign name and total reviews made by customers who purchased products linked to the given campaign ID. Order the results by the total reviews made in descending order.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the order details of customers who have made a purchase in the last 30 days and have loyalty points greater than 100.",
        "Query": "SELECT * FROM orders WHERE created_at > NOW() - INTERVAL '30 days' AND customer_id IN (SELECT customer_id FROM loyalty_points WHERE points > 100)"
    },
    {
        "NL": "Get the average total price of all the items in the cart and the average discount applied",
        "Query": "SELECT AVG(total_price) AS avg_total_price, AVG(discount) AS avg_discount FROM cart"
    },
    {
        "NL": "What is the total refund amount for all refunds initiated by seller and customer?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Show the quantity, last_updated, and supplier_id of products in inventory for products with a quantity greater than 50 and a stock_threshold of less than 20.",
        "Query": "SELECT quantity, last_updated, supplier_id FROM products WHERE quantity > 50 AND stock_threshold < 20"
    },
    {
        "NL": "Calculate the total loyalty points earned by customers from the last 30 days.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total revenue generated and the number of conversions for campaigns that ended after January 1, 2023, and had a ROI greater than 200%",
        "Query": "SELECT SUM(revenue), COUNT(conversions) FROM campaigns WHERE end_date > '2023-01-01' AND roi > 200"
    },
    {
        "NL": "Get the campaign name, campaign status, and the total refund amount for each campaign",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find all wishlist items that have a price at addition greater than 100",
        "Query": "SELECT * FROM wishlist WHERE price_at_addition > 100"
    },
    {
        "NL": "Get the total amount of all orders that were created after the start date of a specific campaign with id 1.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Get the total refund amount, order item id, product name, item status, and standard retail price including tax for each refundable order item that has a total price greater than 100, and has a return period less than 30 days, and belongs to a customer who has a lifetime loyalty points earned greater than 1000, and has an anniversary reward voucher status as true, and order item's product belongs to a supplier with a minimum threshold for restocking greater than 50",
        "Query": "SELECT SUM(t2.price * t2.quantity) AS total_refund, t1.order_item_id, t1.product_name, t1.status, t1.price * t1.quantity AS total_price FROM refunds t1 JOIN order_items t2 ON t1.order_item_id = t2.order_item_id JOIN products t3 ON t2.product_id = t3.product_id JOIN suppliers t4 ON t3.supplier_id = t4.supplier_id WHERE t1.total_price > 100 AND t1.return_period < 30 AND t1.customer_id IN (SELECT customer_id FROM loyalty_points WHERE lifetime_loyalty_points > 1000) AND t1.anniversary_reward_voucher = TRUE AND t4.restock_threshold > 50"
    },
    {
        "NL": "What is the average restocking fee for returns that have been processed?",
        "Query": "SELECT AVG(restocking_fee) FROM returns WHERE status = 'processed'"
    },
    {
        "NL": "Get the total quantity of products in the inventory that have a stock threshold greater than 50 and a safety stock less than 20.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the customer information, including their loyalty points and registration date, along with the transaction details, including the transaction date and payment method, and the inventory details, including the quantity and last restock date, for customers who have purchased a product with a quantity greater than 20 and a payment method of credit card, and also check if the customer has a valid subscription and the transaction amount is greater than 50.",
        "Query": "SELECT c.customer_name, c.customer_email, c.customer_phone, c.loyalty_points, c.registration_date, t.transaction_date, t.payment_method, i.quantity, i.last_restock_date, t.transaction_amount FROM customers c JOIN transactions t ON c.customer_id = t.customer_id JOIN inventory i ON t.product_id = i.product_id WHERE t.quantity > 20 AND t.payment_method = 'credit card' AND c.subscription_status = 'active' AND t.transaction_amount > 50"
    },
    {
        "NL": "Find the total amount redeemed by customers who are eligible for special promotions.",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Retrieve the total number of loyal customers who have made at least one transaction and have a transaction amount greater than 100.",
        "Query": "SELECT COUNT(*) FROM customers c JOIN transactions t ON c.customer_id = t.customer_id WHERE t.transaction_amount > 100"
    },
    {
        "NL": "Find out how many products are in stock and what is their current stock status?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the total number of unique customers who have both reviewed a product and completed a survey.",
        "Query": "SELECT COUNT(DISTINCT c.customer_id) FROM customers c JOIN reviews r ON c.customer_id = r.customer_id JOIN surveys s ON r.customer_id = s.customer_id"
    },
    {
        "NL": "What is the average amount spent by customers in the last 365 days, and what is their average lifetime loyalty points earned?",
        "Query": "/* Error generating SQL: 'choices' */"
    },
    {
        "NL": "Find the names of products, their corresponding categories and the names of suppliers who supply them, the products being fragile, the suppliers have an average rating of more than 3, the products have a net weight of less than 1 kilogram, and the quantity in stock is more than 50. Also, sort the results by the product names in descending order.",
        "Query": "SELECT T1.name, T2.category, T3.supplier_name FROM products AS T1 INNER JOIN product_categories AS T2 ON T1.id = T2.product_id INNER JOIN supplier_ratings AS T3 ON T3.supplier_id = T1.supplier_id WHERE T1.net_weight < 1000 AND T1.fragile = TRUE AND T3.rating_avg > 3 AND T1.quantity_in_stock > 50 ORDER BY T1.name DESC"
    },
    {
        "NL": "Get the transaction unique identifier, transaction date and time, and payment method used for transactions with a total transaction amount greater than 1000 and a refund status of false.",
        "Query": "/* Error generating SQL: 'choices' */"
    }
]